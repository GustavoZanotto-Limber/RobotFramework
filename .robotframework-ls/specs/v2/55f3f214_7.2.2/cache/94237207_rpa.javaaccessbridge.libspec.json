mtime:1744373244.744162
{"name": "RPA.JavaAccessBridge", "doc": "Java application UI automation library using [Java Access Bridge technology](https://www.oracle.com/java/technologies/javase/javase-tech-access-bridge.html).\n\nThe library utilizes [java-access-bridge-wrapper](https://github.com/robocorp/java-access-bridge-wrapper) package to interact with\nJava UI. Currently only the 64-bit Windows OS is supported.\n\n**Inspecting elements**\n\nWe have built an [Assistant](https://github.com/robocorp/working-with-java) for working with Java application's element structure and [Java locators](https://robocorp.com/docs-robot-framework/development-guide/locators#java-locators).\nThe Assistant provides copy-paste-able locators for each element and also allows testing locators against\nselected application.\n\nIf our tools fail to pick the locator from your target application, there is always the\n[Access Bridge Explorer](https://github.com/google/access-bridge-explorer) from Google that enables you to see the raw view. Please note that\nAccess Bridge Explorer repository has been archived on July 27, 2022 and is no longer actively\nmaintained.\n\nThe [Accessibility Insights for Windows](https://accessibilityinsights.io/en/downloads/) can show element properties if application framework\nsupports Windows UI Automation (UIA), see more at [using Accessibility Insights](https://accessibilityinsights.io/docs/en/windows/reference/faq/#can-i-use-accessibility-insights-for-windows-on-a-windows-app-written-with-java). Then the recommended\nlibrary would be [RPA.Windows](https://robocorp.com/docs-robot-framework/libraries/rpa-framework/rpa-windows) library.\n\n**Steps to enable**\n\n> 1. Enable the Java Access Bridge in Windows\n\n> 1. Set environment variable RC\\_JAVA\\_ACCESS\\_BRIDGE\\_DLL as an absolute path to WindowsAccessBridge-64.dll.\n>    It is also possible to give DLL location as library initialization parameter access\\_bridge\\_path.\n\n> ```console\n> C:\\path\\to\\java\\bin\\jabswitch -enable\n> set RC_JAVA_ACCESS_BRIDGE_DLL=C:\\path\\to\\Java\\bin\\WindowsAccessBridge-64.dll\n> ```\n\n> ```robotframework\n> *** Settings ***\n> Library   RPA.JavaAccessBridge   access_bridge_path=C:\\path\\to\\Java\\bin\\WindowsAccessBridge-64.dll\n> ```\n\n**About Java wrapper callbacks and actions**\n\nThere might be a compatibility issue with callbacks and actions on target Java application. Possible reasons:\n\n* target application is executed with 32-bit Java\n\n* target application does not support callbacks and/or actions\n\nWorkaround for this situation is to initialize JavaAccessBridge library with parameter ignore\\_callbacks=True.\nThen application's element information is still accessible and any actions on those elements can be performed\nwith RPA.Desktop library. Keep in mind that you can still manuall refresh an element with `Refresh Element`.\n\n*Note.* There are still keywords, for example. `Call Element Action`, which will cause error if used in this\nsituation.\n\n```robotframework\n*** Settings ***\nLibrary   RPA.JavaAccessBridge   ignore_callbacks=True\n```\n\n**Controlling the Java window**\n\nKeyword for this purpose is `Select Window`. Window selection is based on the `title` parameter, which can be\ngiven as a regular expressions to match the correct window. The keyword brings the window into focus and initially\nreads window's element structure.\n\n**Locating elements**\n\nTo automate actions on the Java application, the robot needs locations to various elements\nusing a feature called [Java locators](https://robocorp.com/docs-robot-framework/development-guide/locators#java-locators). Locator describes properties of an element.\n\nAt the moment library contains basic level support for locators.\n\nThe common locator types are `name` and `role`.\n\nTo identify element with more than one property and can be used, for example:\n\n> ```console\n> role:push button and name:Clear\n> ```\n\nTo address element within parent element > can be used, for example:\n\n> ```console\n> name:Find Purchase Orders > name:NumberField\n> ```\n\nSome keywords accept element as an parameter in place of locator.\n\nNew locator type strict has been added in rpaframework==12.5.0. Currently\nproperty values of string type have been evaluated with startsWith which\ncan match several property values. With strict set in the locator string,\nall locator on the right side of this definition will be matched using\nstrict (equal matching), example:\n\n> ```robotframework\n> # without strict, name can be 'Type', 'Type1', 'Type of'...\n> Get Elements   role:push button and name:Type\n> # name must be equal to 'Type'\n> Get Elements  role:push button and strict:True and name:Type\n> ```\n\nKeyword `Get Elements` has extra parameter `strict`, which when set to\n`True` forces all locator value matches to be strict, example:\n\n> ```robotframework\n> # without strict, name can be 'Type', 'Type1', 'Type of'...\n> Get Elements  role:push button and name:Type\n> # name must be equal to 'Type' and role must be equal to 'text'\n> Get Elements  role:text and name:Type  strict=True\n> ```\n\n**About JavaElement object**\n\nThe `JavaElement` was added in rpaframework==12.3.0 for easy access into\n`ContextNode` objects which have been returned by `Get Elements` keyword.\n\nKeyword `Get Elements` still returns `ContextNode` objects, but with parameter\n`java_elements=True` the keyword returns `JavaElement` objects instead (they\nstill contain reference to `ContextNode` object via `node` property, e.g.\nJavaObject.node).\n\nProperties and methods included in the JavaElement:\n\n* name: str\n\n* role: str\n\n* description: str\n\n* states: list            # list presentation of states (string)\n\n* ancestry: int           # you can set the maximum depth based on this\n\n* checked: bool\n\n* selected: bool\n\n* visible: bool\n\n* enabled: bool\n\n* showing: bool\n\n* focusable: bool\n\n* states_string: str\n\n* x: int                  # left coordinate of the element\n\n* y: int                  # top coordinate of the element\n\n* width: int\n\n* height: int\n\n* node: ContextNode       # original ContextNode\n\n* row: int                # table row, -1 if element is not member of table\n\n* col: int                # table column, -1 if element is not member of table\n\n* text: str               # text content of the element\n\n* column_count: int       # table column count\n\n* visible_children: list  # visible children elements of this element\n\n* visible_children_count: int\n\n* index_in_parent: int    # position in the parent\n\n* click()                 # method for clicking element center\n\n* type_text()             # method for typing text into element (if possible)\n\n**Interacting with elements**\n\nBy default application elements are interacted with Actions supported by the element.\nMost common example is click action supported by an button element.\n\nBut because application and technology support for the actions might be limited, it is also\npossible to opt for interaction elements by their coordinates by giving keyword parameter\n`action=False` if parameter is available.\n\n**Examples**\n\n*robotframework*\n\n```robotframework\n*** Settings ***\nLibrary   RPA.JavaAccessBridge\nLibrary   Process\n\n*** Tasks ***\nWrite text into Swing application\n    Start Process    java -jar BasicSwing.jar\n    ...              shell=${TRUE}\n    ...              cwd=${CURDIR}\n    Select Window    Chat Frame\n    Type Text    role:text\n    ...          text for the textarea\n    Type Text    role:text\n    ...          text for the input field\n    ...          index=1\n    ...          clear=${TRUE}\n    Click Element    role:push button and name:Send\n```\n\n*Python*\n\n```python\nfrom RPA.JavaAccessBridge import JavaAccessBridge\nimport subprocess\n\njab = JavaAccessBridge()\n\nsubprocess.Popen(\n    [\"java\", \"-jar\", \"BasicSwing.jar\"],\n    shell=True,\n    cwd=\".\",\n    close_fds=True\n)\njab.select_window(\"Chat Frame\")\njab.type_text(\n    \"role:text\",\n    \"text for the textarea\",\n    enter=True\n)\njab.type_text(\n    \"role:text\",\n    \"text for the input field\",\n    index=1,\n    clear=True\n)\njab.click_element(\"role:push button and name:Send\")\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "c:\\ProgramData\\Jenkins\\.jenkins\\workspace\\Robot\\RobotFramework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py", "lineno": 218, "tags": [], "inits": [{"name": "__init__", "args": [{"name": "ignore_callbacks", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_callbacks: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "access_bridge_path", "kind": "POSITIONAL_OR_NAMED", "repr": "access_bridge_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "max_depth", "kind": "POSITIONAL_OR_NAMED", "repr": "max_depth: int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "disable_refresh", "kind": "POSITIONAL_OR_NAMED", "repr": "disable_refresh: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "If library is not given `access_bridge_path` then path needs to be given\nby the environment variable `RC_JAVA_ACCESS_BRIDGE_DLL`.\n\nThe `ignore_callbacks` can be set to `True` if the target application\ndoes not support Java callback feature (property value change listeners).\n\nparam ignore_callbacks\n\n:   set to True if application does not support\n    Java callback feature, defaults to False\n\nparam access_bridge_path\n\n:   absolute filepath to the DLL, defaults to None\n\nparam max_depth\n\n:   limit the height of the element tree (how deep the search\n    goes); by default every element is taken into account and the tree of\n    elements is built until reaching the last leaf (which might be\n    time-consuming)\n\nparam disable_refresh\n\n:   disables automatic app/element refresh when this is\n    True (saves time); by default, automatic app/element refreshes are\n    triggered with keywords like `Read Table`, `Wait Until Element Exists`\n", "tags": [], "source": null, "shortdoc": "If library is not given `access_bridge_path` then path needs to be given by the environment variable `RC_JAVA_ACCESS_BRIDGE_DLL`.", "lineno": 443}], "keywords": [{"name": "Application Refresh", "args": [], "doc": "Refresh application element tree\n\nMight be required action after application element\nstructure changes after window refresh.\n", "tags": [], "source": null, "shortdoc": "Refresh application element tree", "lineno": 971}, {"name": "Call Element Action", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "action", "kind": "POSITIONAL_OR_NAMED", "repr": "action: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Call element action\n\nparam locator\n\n:   target element\n\nparam action\n\n:   name of the element action to call\n", "tags": [], "source": null, "shortdoc": "Call element action", "lineno": 905}, {"name": "Click Coordinates", "args": [{"name": "x", "kind": "POSITIONAL_OR_NAMED", "repr": "x: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "y", "kind": "POSITIONAL_OR_NAMED", "repr": "y: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "click_type", "kind": "POSITIONAL_OR_NAMED", "repr": "click_type: str = click", "required": true, "defaultValue": "click", "types": ["str"], "typedocs": []}, {"name": "delay", "kind": "POSITIONAL_OR_NAMED", "repr": "delay: float = 0.5", "required": true, "defaultValue": "0.5", "types": ["float"], "typedocs": []}], "doc": "Keyword to mouse click at specific coordinates.\n\nparam x\n\n:   horizontal coordinate\n\nparam y\n\n:   vertical coordinates\n\nparam click_type\n\n:   default click, see RPA.Desktop for different\n    click options\n\nparam delay\n\n:   how much in seconds to delay after click, defaults to 0.5\n", "tags": [], "source": null, "shortdoc": "Keyword to mouse click at specific coordinates.", "lineno": 933}, {"name": "Click Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: ContextNode | JavaElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "index", "kind": "POSITIONAL_OR_NAMED", "repr": "index: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}, {"name": "action", "kind": "POSITIONAL_OR_NAMED", "repr": "action: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: int = 10", "required": true, "defaultValue": "10", "types": ["int"], "typedocs": []}, {"name": "click_type", "kind": "POSITIONAL_OR_NAMED", "repr": "click_type: str = click", "required": true, "defaultValue": "click", "types": ["str"], "typedocs": []}], "doc": "Click element\n\nparam locator\n\n:   element to click\n\nparam index\n\n:   target element index if multiple are returned\n\nparam action\n\n:   call click action on element (default), or use coordinates\n\nparam timeout\n\n:   timeout in seconds to find element\n\nparam click_type\n\n:   default click, see RPA.Desktop for different\n    click options\n", "tags": [], "source": null, "shortdoc": "Click element", "lineno": 867}, {"name": "Click Push Button", "args": [{"name": "button_name", "kind": "POSITIONAL_OR_NAMED", "repr": "button_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Click element of role push button\n\nparam button_name\n\n:   name of the button to click\n", "tags": [], "source": null, "shortdoc": "Click element of role push button", "lineno": 1057}, {"name": "Close Java Window", "args": [], "doc": "Close active Java window which has been accessed\nvia `\\`Select Window` keyword.\n", "tags": [], "source": null, "shortdoc": "Close active Java window which has been accessed via `\\`Select Window` keyword.", "lineno": 1143}, {"name": "Get Element Actions", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: ContextNode | JavaElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Get list of possible element actions\n\nparam locator\n\n:   target element\n", "tags": [], "source": null, "shortdoc": "Get list of possible element actions", "lineno": 823}, {"name": "Get Element Text", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: ContextNode | JavaElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "index", "kind": "POSITIONAL_OR_NAMED", "repr": "index: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}], "doc": "Get element text\n\nparam locator\n\n:   target element\n\nparam index\n\n:   target element index if multiple are returned\n", "tags": [], "source": null, "shortdoc": "Get element text", "lineno": 784}, {"name": "Get Elements", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "java_elements", "kind": "POSITIONAL_OR_NAMED", "repr": "java_elements: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "strict", "kind": "POSITIONAL_OR_NAMED", "repr": "strict: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Get matching elements\n\nparam locator\n\n:   elements to get\n\nparam java_elements\n\n:   if True will return elements as `JavaElement`\n    on False will return Java ContextNodes\n\nparam strict\n\n:   on True all locator matches need to match exactly, on\n    False will be using startsWith matching on non-integer properties\n\nreturn\n\n:   list of ContextNodes or JavaElements\n\nPython example.\n\n```python\nelements = java.get_elements(\"name:common\", java_elements=True)\nfor e in elements:\n    print(e.name if e.name else \"EMPTY\", e.visible, e.x, e.y)\n    if e.role == \"check box\":\n        e.click()\n    else:\n        java.type_text(e, \"new content\", clear=True, typing=False)\n\n# following does NOT return anything because search is strict\n# and there are no 'push butto' role\nelements = java.get_elements(\"role:push butto\", strict=True)\n```\n\nRobotframework  example.\n\n```robotframework\n${elements}=    Get Elements\n...    role:push button and name:Send\n...    java_elements=True\nEvaluate   $elements[0].click()\nClick Element    ${elements}[0]    action=False\nType Text\n...    ${elements}[0]\n...    moretext\n...    clear=True\n...    typing=False\n```\n", "tags": [], "source": null, "shortdoc": "Get matching elements", "lineno": 670}, {"name": "Get Locator Tree", "args": [], "doc": "Return Java locator tree as list of objects.\n\nMostly relevant object properties are:\n\n> * ancestry\n\n> * role\n\n> * name\n\n> * description\n\n> * indexInParent\n\nreturn\n\n:   list of objects\n", "tags": [], "source": null, "shortdoc": "Return Java locator tree as list of objects.", "lineno": 1007}, {"name": "Get Version Info", "args": [], "doc": "Get Java Access Bridge version information\n", "tags": [], "source": null, "shortdoc": "Get Java Access Bridge version information", "lineno": 1071}, {"name": "Highlight Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: ContextNode | JavaElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "index", "kind": "POSITIONAL_OR_NAMED", "repr": "index: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}], "doc": "Highlight an element\n\nparam locator\n\n:   element to highlight\n\nparam index\n\n:   target element index if multiple are returned\n", "tags": [], "source": null, "shortdoc": "Highlight an element", "lineno": 842}, {"name": "List Java Windows", "args": [], "doc": "List all available Java windows.\n\nJavaWindow object contains following properties:\n\n> * Java process id (pid)\n\n> * Java window title\n\n> * Java window handle (hwnd)\n\nThe pid and title can be used to get control of the\nJava process by.\n\nreturn\n\n:   list of JavaWindow objects\n\n**Python example.**\n\n```python\nwindow_list = java.list_java_windows()\n# By looping window list\nfor window in window_list:\n    if window.title == \"my java window title\":\n        logging.info(\"Java window found\")\n        java.select_window_by_pid(window.pid)\n# Directly accessing\nif len(window_list) == 1:\n    java.select_window_by_pid(window_list[0].pid)\n```\n\n**Robot Framework example.**\n\n```robotframework\n@{window_list}=    List Java Windows\nFOR    ${window}    IN    @{window_list}\n    IF    \"${window.title}\" == \"my java window title\"\n        Select Window By PID    ${window.pid}\n    END\nEND\nIF    len($window_list)==1\n    Select Window By PID    ${window_list[0].pid}\nEND\n```\n", "tags": [], "source": null, "shortdoc": "List all available Java windows.", "lineno": 1152}, {"name": "Press Keys", "args": [{"name": "@keys", "kind": "VAR_POSITIONAL", "repr": "*keys", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Press multiple keys down simultaneously\n\nSee [Desktop](https://rpaframework.org/libraries/desktop/index.html) library documentation for supported keys\n\nparam keys\n\n:   keys to press\n", "tags": [], "source": null, "shortdoc": "Press multiple keys down simultaneously", "lineno": 980}, {"name": "Print Element Tree", "args": [{"name": "filename", "kind": "POSITIONAL_OR_NAMED", "repr": "filename: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Print current element into log and possibly into a file\n\nparam filename\n\n:   filepath to save element tree\n\nreturn\n\n:   element tree\n", "tags": [], "source": null, "shortdoc": "Print current element into log and possibly into a file", "lineno": 992}, {"name": "Print Locator Tree", "args": [{"name": "filename", "kind": "POSITIONAL_OR_NAMED", "repr": "filename: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Print current Java window locator list into log and possibly\ninto a file.\n\nparam filename\n\n:   filepath to save locator tree\n\nreturn\n\n:   locator tree\n", "tags": [], "source": null, "shortdoc": "Print current Java window locator list into log and possibly into a file.", "lineno": 1023}, {"name": "Read Table", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: ContextNode | JavaElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "visible_only", "kind": "POSITIONAL_OR_NAMED", "repr": "visible_only: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Return Java table as list of lists (rows containing columns).\n\nEach cell element is represented by `JavaElement` class.\n\nparam locator\n\n:   locator to match element with type of table\n\nparam visible_only\n\n:   return all the children when this is False\n\nreturn\n\n:   list of lists\n\nExample.\n\n```python\ntable = java.read_table(locator_table)\nfor row in table:\n    for cell in row:\n        if cell.role == \"check box\":\n            print(cell.row, cell.col, str(cell.checked))\n        else:\n            print(cell.row, cell.col, cell.name)\n```\n", "tags": [], "source": null, "shortdoc": "Return Java table as list of lists (rows containing columns).", "lineno": 1084}, {"name": "Refresh Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: ContextNode | JavaElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "index", "kind": "POSITIONAL_OR_NAMED", "repr": "index: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}], "doc": "Refresh an element alone.\n\nThis will ensure the latest data is available in the targeted element, thus\ngaining speed when dealing with big apps that won't require an entire global\nrefresh. The obtained Java element is returned.\n\nparam locator\n\n:   element to refresh\n\nparam index\n\n:   target element index if multiple are returned\n\nreturns\n\n:   the Java element found by the passed locator\n", "tags": [], "source": null, "shortdoc": "Refresh an element alone.", "lineno": 1324}, {"name": "Select Menu", "args": [{"name": "menu", "kind": "POSITIONAL_OR_NAMED", "repr": "menu: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "menuitem", "kind": "POSITIONAL_OR_NAMED", "repr": "menuitem: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Select menu by clicking menu elements\n\nparam menu\n\n:   name of the menu\n\nparam menuitem\n\n:   name of the menu item\n", "tags": [], "source": null, "shortdoc": "Select menu by clicking menu elements", "lineno": 1047}, {"name": "Select Window", "args": [{"name": "title", "kind": "POSITIONAL_OR_NAMED", "repr": "title: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "bring_foreground", "kind": "POSITIONAL_OR_NAMED", "repr": "bring_foreground: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: int = 30", "required": true, "defaultValue": "30", "types": ["int"], "typedocs": []}], "doc": "Selects Java application window as target for the automation using\nJava window title.\n\nparam title\n\n:   application window title\n\nparam bring_foreground\n\n:   if application is brought to foreground or not\n\nparam timeout\n\n:   selection timeout\n", "tags": [], "source": null, "shortdoc": "Selects Java application window as target for the automation using Java window title.", "lineno": 546}, {"name": "Select Window By Pid", "args": [{"name": "pid", "kind": "POSITIONAL_OR_NAMED", "repr": "pid: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "bring_foreground", "kind": "POSITIONAL_OR_NAMED", "repr": "bring_foreground: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: int = 30", "required": true, "defaultValue": "30", "types": ["int"], "typedocs": []}], "doc": "Selects Java application window as target for the automation using\nJava process ID (pid).\n\nparam pid\n\n:   application process id\n\nparam bring_foreground\n\n:   if application is brought to foreground or not\n\nparam timeout\n\n:   selection timeout\n", "tags": [], "source": null, "shortdoc": "Selects Java application window as target for the automation using Java process ID (pid).", "lineno": 1215}, {"name": "Select Window By Title", "args": [{"name": "title", "kind": "POSITIONAL_OR_NAMED", "repr": "title: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "bring_foreground", "kind": "POSITIONAL_OR_NAMED", "repr": "bring_foreground: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: int = 30", "required": true, "defaultValue": "30", "types": ["int"], "typedocs": []}], "doc": "Selects Java application window as target for the automation using\nJava window title.\n\nparam title\n\n:   application window title\n\nparam bring_foreground\n\n:   if application is brought to foreground or not\n\nparam timeout\n\n:   selection timeout\n", "tags": [], "source": null, "shortdoc": "Selects Java application window as target for the automation using Java window title.", "lineno": 1200}, {"name": "Set Display Scale Factor", "args": [{"name": "factor", "kind": "POSITIONAL_OR_NAMED", "repr": "factor: float", "required": true, "defaultValue": null, "types": ["float"], "typedocs": []}], "doc": "Override library display scale factor.\n\nKeyword returns previous value.\n\nparam factor\n\n:   value for the new display scale factor\n\nreturn\n\n:   previous display scale factor value\n", "tags": [], "source": null, "shortdoc": "Override library display scale factor.", "lineno": 533}, {"name": "Set Mouse Position", "args": [{"name": "element", "kind": "POSITIONAL_OR_NAMED", "repr": "element: ContextNode", "required": true, "defaultValue": null, "types": ["ContextNode"], "typedocs": []}], "doc": "Set mouse position to element center\n\nparam element\n\n:   target element\n", "tags": [], "source": null, "shortdoc": "Set mouse position to element center", "lineno": 618}, {"name": "Shutdown Jab", "args": [], "doc": "Call Java Access Bridge process shutdown\n", "tags": [], "source": null, "shortdoc": "Call Java Access Bridge process shutdown", "lineno": 1066}, {"name": "Toggle Drop Down", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: ContextNode | JavaElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "index", "kind": "POSITIONAL_OR_NAMED", "repr": "index: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}], "doc": "Toggle dropdown action on element\n\nparam locator\n\n:   element locator\n\nparam index\n\n:   target element index if multiple are returned\n", "tags": [], "source": null, "shortdoc": "Toggle dropdown action on element", "lineno": 949}, {"name": "Type Text", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: ContextNode | JavaElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "index", "kind": "POSITIONAL_OR_NAMED", "repr": "index: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}, {"name": "clear", "kind": "POSITIONAL_OR_NAMED", "repr": "clear: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "enter", "kind": "POSITIONAL_OR_NAMED", "repr": "enter: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "typing", "kind": "POSITIONAL_OR_NAMED", "repr": "typing: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Type text into coordinates defined by locator\n\nparam locator\n\n:   target element\n\nparam text\n\n:   text to write\n\nparam index\n\n:   target element if multiple are returned\n\nparam clear\n\n:   should element be cleared before typing\n\nparam enter\n\n:   should enter key be pressed after typing\n\nparam typing\n\n:   if True (default) will use Desktop().type_text()\n    if False will use Desktop().press_keys()\n", "tags": [], "source": null, "shortdoc": "Type text into coordinates defined by locator", "lineno": 630}, {"name": "Wait Until Element Exists", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: int = 10", "required": true, "defaultValue": "10", "types": ["int"], "typedocs": []}], "doc": "Wait until element(s) matching the locator are found within\ngiven timeout or raises `ElementNotFound` exception.\n\nparam locator\n\n:   locator to match element\n\nparam timeout\n\n:   timeout in seconds to find element\n\nreturn\n\n:   element(s) if found\n", "tags": [], "source": null, "shortdoc": "Wait until element(s) matching the locator are found within given timeout or raises `ElementNotFound` exception.", "lineno": 1297}, {"name": "Wait Until Element Is Focused", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: ContextNode | JavaElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "index", "kind": "POSITIONAL_OR_NAMED", "repr": "index: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float = 0.5", "required": true, "defaultValue": "0.5", "types": ["float"], "typedocs": []}], "doc": "Wait until element is focused\n\nparam locator\n\n:   target element\n\nparam index\n\n:   target element index if multiple are returned\n\nparam timeout\n\n:   timeout in seconds to wait, default 0.5 seconds\n", "tags": [], "source": null, "shortdoc": "Wait until element is focused", "lineno": 763}, {"name": "Wait Until Element Text Contains", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: ContextNode | JavaElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "index", "kind": "POSITIONAL_OR_NAMED", "repr": "index: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float = 0.5", "required": true, "defaultValue": "0.5", "types": ["float"], "typedocs": []}], "doc": "Wait until element text contains expected text\n\nparam locator\n\n:   target element\n\nparam text\n\n:   element text should contain this\n\nparam index\n\n:   target element index if multiple are returned\n\nparam timeout\n\n:   timeout in seconds to wait, default 0.5 seconds\n", "tags": [], "source": null, "shortdoc": "Wait until element text contains expected text", "lineno": 721}, {"name": "Wait Until Element Text Equals", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: ContextNode | JavaElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "index", "kind": "POSITIONAL_OR_NAMED", "repr": "index: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float = 0.5", "required": true, "defaultValue": "0.5", "types": ["float"], "typedocs": []}], "doc": "Wait until element text equals expected text\n\nparam locator\n\n:   target element\n\nparam text\n\n:   element text should match this\n\nparam index\n\n:   target element index if multiple are returned\n\nparam timeout\n\n:   timeout in seconds to wait, default 0.5 seconds\n", "tags": [], "source": null, "shortdoc": "Wait until element text equals expected text", "lineno": 742}], "dataTypes": {}, "typedocs": []}
mtime:1744373210.5766344
{"name": "RPA.Excel.Application", "doc": "Excel.Application is a library for controlling the Excel application.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary             RPA.Excel.Application\nTask Setup          Open Application\nTask Teardown       Quit Application\n\n*** Tasks ***\nManipulate Excel application\n    Open Workbook           workbook.xlsx\n    Set Active Worksheet    sheetname=new stuff\n    Write To Cells          row=1\n    ...                     column=1\n    ...                     value=my data\n    Save Excel\n\nRun Excel Macro\n    Open Workbook   orders_with_macro.xlsm\n    Run Macro       Sheet1.CommandButton1_Click\n\nExport Workbook as PDF\n    Open Workbook           workbook.xlsx\n    Export as PDF           workbook.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.Excel.Application import Application\n\napp = Application()\n\napp.open_application()\napp.open_workbook('workbook.xlsx')\napp.set_active_worksheet(sheetname='new stuff')\napp.write_to_cells(row=1, column=1, value='new data')\napp.save_excel()\napp.quit_application()\n```\n\n**Caveats**\n\nThis library works on a Windows operating system with UI enabled only, and you must\nensure that you open the app first with `Open Application` before running any\nother relevant keyword which requires to operate on an open app. The application is\nautomatically closed at the end of the task execution, so this can be changed by\nimporting the library with the autoexit=${False} setting.\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Excel|Outlook|Word.Application    autoexit=${False}\n```\n\nIf you're running the Process by Control Room through a custom self-hosted Worker\nservice, then please make sure that you enable an RDP session by ticking \"Use\nDesktop Connection\" under the Step configuration.\n\nIf you still encounter issues with opening a document, please ensure that file can\nbe opened first manually and dismiss any alert potentially blocking the process.\n\nCheck the documentation below for more info:\n\n* [https://robocorp.com/docs/control-room/unattended/worker-setups/windows-desktop](https://robocorp.com/docs/control-room/unattended/worker-setups/windows-desktop)\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "c:\\ProgramData\\Jenkins\\.jenkins\\workspace\\Robot\\RobotFramework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py", "lineno": 96, "tags": [], "inits": [{"name": "__init__", "args": [{"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "&kwargs", "kind": "VAR_NAMED", "repr": "**kwargs", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Initialize the library instance by wrapping the COM Windows app.\n\nparam autoexit\n\n:   Automatically close the app when the process finishes.\n", "tags": [], "source": null, "shortdoc": "Initialize the library instance by wrapping the COM Windows app.", "lineno": 145}], "keywords": [{"name": "Add New Sheet", "args": [{"name": "sheetname", "kind": "POSITIONAL_OR_NAMED", "repr": "sheetname: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "create_workbook", "kind": "POSITIONAL_OR_NAMED", "repr": "create_workbook: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Add new worksheet to workbook. Workbook is created by default if\nit does not exist.\n\nparam sheetname\n\n:   name for sheet\n\nparam create_workbook\n\n:   create workbook if True, defaults to True\n\nraises ValueError\n\n:   error is raised if workbook does not exist and\n    create\\_workbook is False\n", "tags": [], "source": null, "shortdoc": "Add new worksheet to workbook. Workbook is created by default if it does not exist.", "lineno": 209}, {"name": "Add New Workbook", "args": [], "doc": "Adds new workbook for Excel application\n", "tags": [], "source": null, "shortdoc": "Adds new workbook for Excel application", "lineno": 159}, {"name": "Close Document", "args": [{"name": "save_changes", "kind": "POSITIONAL_OR_NAMED", "repr": "save_changes: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Close the active document and app (if open).\n\nparam save_changes\n\n:   Enable changes saving on quit. (False by default)\n", "tags": [], "source": "c:\\ProgramData\\Jenkins\\.jenkins\\workspace\\Robot\\RobotFramework\\.venv\\lib\\site-packages\\RPA\\application.py", "shortdoc": "Close the active document and app (if open).", "lineno": 184}, {"name": "Create Pivot Field", "args": [{"name": "data_column", "kind": "POSITIONAL_OR_NAMED", "repr": "data_column: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "operation", "kind": "POSITIONAL_OR_NAMED", "repr": "operation: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "numberformat", "kind": "POSITIONAL_OR_NAMED", "repr": "numberformat: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Create pivot field object parameters.\n\n*Note.* At the moment operation \"DISTINCT COUNT\" is not\nsupported as there seems to be issues in the COM interface,\nwhich have not been resolved yet (regarding this library\nimplementation).\n\nPython example:\n\n```python\nfield_count = excel.create_pivot_field(\"price\", \"count\", \"#\")\nfield_avg = excel.create_pivot_field(\"price\", \"average\", \"#0,#0\")\n```\n\nRobot Framework example:\n\n```robotframework\n${field_sum}=    Create Pivot Field    price    sum    #,#0\n${field_max}=    Create Pivot Field    price    max    #,#0\n```\n\nparam data_column\n\n:   name of the data column\n\nparam operation\n\n:   name of the possible operations\n    (SUM, AVERAGE, MAX, MIN, COUNT)\n\nparam numberformat\n\n:   Excel cell number format, by default\n    number format is not set for the field\n\nreturn\n\n:   field object\n", "tags": [], "source": null, "shortdoc": "Create pivot field object parameters.", "lineno": 395}, {"name": "Create Pivot Table", "args": [{"name": "source_worksheet", "kind": "POSITIONAL_OR_NAMED", "repr": "source_worksheet: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "pivot_worksheet", "kind": "POSITIONAL_OR_NAMED", "repr": "pivot_worksheet: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "rows", "kind": "POSITIONAL_OR_NAMED", "repr": "rows: List[str]", "required": true, "defaultValue": null, "types": ["List"], "typedocs": []}, {"name": "fields", "kind": "POSITIONAL_OR_NAMED", "repr": "fields: List[PivotField]", "required": true, "defaultValue": null, "types": ["List"], "typedocs": []}, {"name": "sort_field", "kind": "POSITIONAL_OR_NAMED", "repr": "sort_field: PivotField | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "sort_direction", "kind": "POSITIONAL_OR_NAMED", "repr": "sort_direction: str = descending", "required": true, "defaultValue": "descending", "types": ["str"], "typedocs": []}, {"name": "data_range", "kind": "POSITIONAL_OR_NAMED", "repr": "data_range: Any | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "pivot_name", "kind": "POSITIONAL_OR_NAMED", "repr": "pivot_name: str = PivotTable1", "required": true, "defaultValue": "PivotTable1", "types": ["str"], "typedocs": []}, {"name": "collapse_rows", "kind": "POSITIONAL_OR_NAMED", "repr": "collapse_rows: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "show_grand_total", "kind": "POSITIONAL_OR_NAMED", "repr": "show_grand_total: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Create a pivot table in the specified worksheet.\n\nThis is a initial implementation of the pivot table creation,\nwhich might not work in all cases. The alternative way\nof creating pivot tables is to use a macro an run it.\n\nPython example:\n\n```python\nrows = [\"products\", \"expense_type\"]\nfield_count = excel.create_pivot_field(\"price\", \"count\", \"#\")\nfield_avg = excel.create_pivot_field(\"price\", \"average\", \"#0,#0\")\npivottable = excel.create_pivot_table(\n    source_worksheet=\"data\",\n    pivot_worksheet=\"test!R5C5\",\n    rows=rows,\n    fields=[field_count, field_avg]\n)\n```\n\nRobot Framework example:\n\n```robotframework\n@{rows}=    Create List    products    expense_type\n${field_sum}=    Create Pivot Field    price    sum    #,#0\n${field_max}=    Create Pivot Field    price    max    #,#0\n@{fields}=   Create List   ${field_sum}    ${field_max}\n${pivottable}=    Create Pivot Table\n...    source_worksheet=data\n...    pivot_worksheet=test!R5C5\n...    rows=${rows}\n...    fields=${fields}\n```\n\nparam source_worksheet\n\n:   name of the source worksheet\n\nparam pivot_worksheet\n\n:   name of the pivot worksheet, can\n    be the same as the source worksheet but then cell location\n    of the pivot table needs to be given in the format \"R1C1\"\n    (R is a column numbe and C is a row number, e.g. \"R1C1\" is A1)\n\nparam rows\n\n:   columns in the source\\_worksheet which are used\n    as pivot table rows\n\nparam fields\n\n:   columns for the pivot table data fields\n\nparam sort_field\n\n:   field to sort the pivot table by (one of the\n    fields)\n\nparam sort_direction\n\n:   sort direction (ascending or descending),\n    default is descending\n\nparam data_range\n\n:   source data range, if not given then\n    the whole used range of source\\_worksheet will be used\n\nparam pivot_name\n\n:   name of the pivot table, if not given\n    then the name is \"PivotTable1\"\n\nparam collapse_rows\n\n:   if True then the first row will be collapsed\n\nparam show_grand_total\n\n:   if True then the grand total will be shown\n    for the columns\n\nreturn\n\n:   created PivotTable object\n", "tags": [], "source": null, "shortdoc": "Create a pivot table in the specified worksheet.", "lineno": 431}, {"name": "Create Table", "args": [{"name": "table_name", "kind": "POSITIONAL_OR_NAMED", "repr": "table_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "table_range", "kind": "POSITIONAL_OR_NAMED", "repr": "table_range: Any | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Create a table in the current worksheet.\n\nparam table_name\n\n:   name for the table\n\nparam table_range\n\n:   source table range, if not given then\n    the whole used range of source\\_worksheet will be used\n", "tags": [], "source": null, "shortdoc": "Create a table in the current worksheet.", "lineno": 680}, {"name": "Export As Pdf", "args": [{"name": "pdf_filename", "kind": "POSITIONAL_OR_NAMED", "repr": "pdf_filename: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "excel_filename", "kind": "POSITIONAL_OR_NAMED", "repr": "excel_filename: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Export Excel as PDF file\n\nIf Excel filename is not given, the currently open workbook\nwill be exported as PDF.\n\nparam pdf_filename\n\n:   PDF filename to save\n\nparam excel_filename\n\n:   Excel filename to open\n", "tags": [], "source": null, "shortdoc": "Export Excel as PDF file", "lineno": 377}, {"name": "Find", "args": [{"name": "search_string", "kind": "POSITIONAL_OR_NAMED", "repr": "search_string: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "search_range", "kind": "POSITIONAL_OR_NAMED", "repr": "search_range: Any | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "max_results", "kind": "POSITIONAL_OR_NAMED", "repr": "max_results: int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "search_order", "kind": "POSITIONAL_OR_NAMED", "repr": "search_order: SearchOrder = ROWS", "required": true, "defaultValue": "ROWS", "types": ["SearchOrder"], "typedocs": []}, {"name": "match_case", "kind": "POSITIONAL_OR_NAMED", "repr": "match_case: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "search_type", "kind": "POSITIONAL_OR_NAMED", "repr": "search_type: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "search_after", "kind": "POSITIONAL_OR_NAMED", "repr": "search_after: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "exact", "kind": "POSITIONAL_OR_NAMED", "repr": "exact: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Keyword for finding text in the current worksheet.\n\nWildcard can be used in a search string. The asterisk (\\*) represents\nany series of characters, and the question mark (?) represents a single\ncharacter.\n\nPython example:\n\n```python\nranges = excel.find(\"32.145.???.1\", \"IP!E1:E9999\", 6)\nfor r in ranges:\n    print(f\"ADDR = {r.Address} VALUE = {r.Value}\")\n    r.Value = r.Value.replace(\"32.145.\", \"192.168.\")\n    r.BorderAround()\n```\n\nRobot Framework example:\n\n```robotframework\n${ranges}=    Find\n...    search_string=32.145.*\n...    search_range=IP!A1:A9999\n...    max_results=6\n...    search_order=COLUMNS\n\nFOR    ${ranges}    IN    @{ranges}\n    ${value}=    Set Variable    ${range.Value}\n    Log to console    ADDR = ${range.Address} VALUE = ${value}\n    ${new_value}=    Replace String    ${value}    32.145.    192.168.\n    Set Object Property    ${range}    Value    ${new_value}\n    Call Method    ${range}    BorderAround\nEND\n```\n\nparam search_string\n\n:   what to search for\n\nparam search_range\n\n:   if not given will search the current\n    worksheet\n\nparam max_results\n\n:   can be used to limit number of results\n\nparam search_order\n\n:   by default search is executed by ROWS,\n    can be changed to COLUMNS\n\nparam match_case\n\n:   if True then the search is case sensitive\n\nparam search_type\n\n:   can be FORMULAS, VALUES, COMMENTS or COMMENTS THREADED\n\nparam search_after\n\n:   search after this cell\n\nparam exact\n\n:   if True then the search is expected to be a exact match\n\nreturn\n\n:   list of Range objects\n", "tags": [], "source": null, "shortdoc": "Keyword for finding text in the current worksheet.", "lineno": 579}, {"name": "Find First Available Cell", "args": [{"name": "worksheet", "kind": "POSITIONAL_OR_NAMED", "repr": "worksheet: Any = None", "required": true, "defaultValue": "None", "types": ["Any"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int = 1", "required": true, "defaultValue": "1", "types": ["int"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int = 1", "required": true, "defaultValue": "1", "types": ["int"], "typedocs": []}], "doc": "Find first available free cell\n\nparam worksheet\n\n:   worksheet to handle, defaults to active worksheet if None\n\nparam row\n\n:   starting row for search, defaults to 1\n\nparam column\n\n:   starting column for search, defaults to 1\n\nreturn\n\n:   tuple (row, column) or (None, None) if not found\n", "tags": [], "source": null, "shortdoc": "Find first available free cell", "lineno": 243}, {"name": "Find First Available Row", "args": [{"name": "worksheet", "kind": "POSITIONAL_OR_NAMED", "repr": "worksheet: Any | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int = 1", "required": true, "defaultValue": "1", "types": ["int"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int = 1", "required": true, "defaultValue": "1", "types": ["int"], "typedocs": []}], "doc": "Find first available free row\n\nparam worksheet\n\n:   worksheet to handle, defaults to active worksheet if None\n\nparam row\n\n:   starting row for search, defaults to 1\n\nparam column\n\n:   starting column for search, defaults to 1\n\nreturn\n\n:   row or None\n", "tags": [], "source": null, "shortdoc": "Find first available free row", "lineno": 229}, {"name": "Get Pivot Tables", "args": [{"name": "pivot_table_name", "kind": "POSITIONAL_OR_NAMED", "repr": "pivot_table_name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "as_list", "kind": "POSITIONAL_OR_NAMED", "repr": "as_list: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Return pivot tables in the current worksheet.\n\nPython example:\n\n```python\nfrom RPA.Tables import Tables\n\npivot_tables = excel.get_pivot_tables()\n\nfor tbl_name, tbl_list in pivot_tables.items():\n    print(f\"TABLE NAME: {tbl_name}\")\n    table = Tables().create_table(data=tbl_list[1:], columns=tbl_list[0])\n    print(table)\n```\n\nRobot Framework example:\n\n```robotframework\n${pivots}=    Get Pivot Tables\nFOR    ${tablename}    ${pivot}    IN    &{pivots}\n    Log To Console    ${tablename}\n    ${table}=    RPA.Tables.Create Table\n    ...   data=${{$pivot[1:]}}\n    ...   columns=${{$pivot[0]}}\n    Log To Console    ${table}\nEND\n```\n\nparam pivot_table_name\n\n:   name of the pivot table to return,\n    will return by default all pivot tables\n\nparam as_list\n\n:   if True then the pivot table data is returned as list\n    of lists, if False then the data is returned as list of Range objects\n\nreturn\n\n:   dictionary of pivot tables (names as keys and table data as values)\n", "tags": [], "source": null, "shortdoc": "Return pivot tables in the current worksheet.", "lineno": 744}, {"name": "Get Range", "args": [{"name": "table_range", "kind": "POSITIONAL_OR_NAMED", "repr": "table_range: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Get range object for the given range address.\n\nThese object properties and methods can be then called.\n\nPython example:\n\n```python\nsource = excel.get_range('A1:B2')\nfor r in source:\n    print(f\"ADDR = {r.Address} VAL = {r.Value}\")\n    r.BorderAround()\nsource.Merge()\n# Creating a formula and copying it to another range\nexcel.get_range(\"E4\").Formula = \"=SUM(C4:D4)\"\ndestination = excel.get_range(\"E5:E10\")\nexcel.get_range(\"E4\").Copy(destination)\n```\n\nRobot Framework example:\n\n```robotframework\n${range}=    Get Range    data!A1:A4\nFOR    ${r}    IN    @{range}\n    Log To Console    ADDR = ${r.Address} VAL = ${r.Value}\n    Call Method  ${r}    BorderAround\nEND\nCall Method    ${range}    Merge\n```\n\nparam table_range\n\n:   range to return\n\nreturn\n\n:   range object\n", "tags": [], "source": null, "shortdoc": "Get range object for the given range address.", "lineno": 709}, {"name": "List Tables", "args": [], "doc": "Return tables in the current worksheet.\n\nreturn\n\n:   list of table names\n", "tags": [], "source": null, "shortdoc": "Return tables in the current worksheet.", "lineno": 702}, {"name": "Merge Range", "args": [{"name": "initial_range", "kind": "POSITIONAL_OR_NAMED", "repr": "initial_range: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}], "doc": "Merges a range of cells.\n\nparam initial_range\n\n:   range of cells to merge\n", "tags": [], "source": null, "shortdoc": "Merges a range of cells.", "lineno": 909}, {"name": "Open Application", "args": [{"name": "visible", "kind": "POSITIONAL_OR_NAMED", "repr": "visible: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "display_alerts", "kind": "POSITIONAL_OR_NAMED", "repr": "display_alerts: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Open the application.\n\nparam visible\n\n:   Show the window on opening. (False by default)\n\nparam display_alerts\n\n:   Display alert popups. (False by default)\n", "tags": [], "source": "c:\\ProgramData\\Jenkins\\.jenkins\\workspace\\Robot\\RobotFramework\\.venv\\lib\\site-packages\\RPA\\application.py", "shortdoc": "Open the application.", "lineno": 145}, {"name": "Open Workbook", "args": [{"name": "filename", "kind": "POSITIONAL_OR_NAMED", "repr": "filename: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Open Excel by filename\n\nBy default sets active worksheet to sheet number 1\n\nparam filename\n\n:   path to filename\n", "tags": [], "source": null, "shortdoc": "Open Excel by filename", "lineno": 164}, {"name": "Quit Application", "args": [{"name": "save_changes", "kind": "POSITIONAL_OR_NAMED", "repr": "save_changes: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Quit the application.\n\nparam save_changes\n\n:   Enable to save changes on quit. (False by default)\n", "tags": [], "source": "c:\\ProgramData\\Jenkins\\.jenkins\\workspace\\Robot\\RobotFramework\\.venv\\lib\\site-packages\\RPA\\application.py", "shortdoc": "Quit the application.", "lineno": 209}, {"name": "Read From Cells", "args": [{"name": "worksheet", "kind": "POSITIONAL_OR_NAMED", "repr": "worksheet: Any = None", "required": true, "defaultValue": "None", "types": ["Any"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int = None", "required": true, "defaultValue": "None", "types": ["int"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int = None", "required": true, "defaultValue": "None", "types": ["int"], "typedocs": []}], "doc": "Read value from cell.\n\nparam worksheet\n\n:   worksheet to handle, defaults to active worksheet if None\n\nparam row\n\n:   target row, defaults to None\n\nparam column\n\n:   target row, defaults to None\n\nraises ValueError\n\n:   if cell is not given\n", "tags": [], "source": null, "shortdoc": "Read value from cell.", "lineno": 301}, {"name": "Remove Hidden Columns And Rows", "args": [{"name": "initial_range", "kind": "POSITIONAL_OR_NAMED", "repr": "initial_range: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}, {"name": "worksheet", "kind": "POSITIONAL_OR_NAMED", "repr": "worksheet: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Removes hidden columns and rows from a range and returns a new range.\n\nparam initial_range\n\n:   range of cells to remove hidden columns and rows from\n\nparam worksheet\n\n:   set active worksheet (name) before removing hidden\n    columns and rows\n\nreturn\n\n:   new range or initial range if no hidden cells found\n", "tags": [], "source": null, "shortdoc": "Removes hidden columns and rows from a range and returns a new range.", "lineno": 873}, {"name": "Run Macro", "args": [{"name": "macro_name", "kind": "POSITIONAL_OR_NAMED", "repr": "macro_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "@args: Any", "kind": "VAR_POSITIONAL", "repr": "*args: Any", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Run Excel macro with given name\n\nparam macro_name\n\n:   macro to run\n\nparam args\n\n:   arguments to pass to macro\n", "tags": [], "source": null, "shortdoc": "Run Excel macro with given name", "lineno": 368}, {"name": "Save Excel", "args": [], "doc": "Saves Excel file\n", "tags": [], "source": null, "shortdoc": "Saves Excel file", "lineno": 325}, {"name": "Save Excel As", "args": [{"name": "filename", "kind": "POSITIONAL_OR_NAMED", "repr": "filename: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "autofit", "kind": "POSITIONAL_OR_NAMED", "repr": "autofit: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "file_format", "kind": "POSITIONAL_OR_NAMED", "repr": "file_format=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Save Excel with name if workbook is open\n\nparam filename\n\n:   where to save file\n\nparam autofit\n\n:   autofit cell widths if True, defaults to False\n\nparam file_format\n\n:   format of file\n\n**Note:** Changing the file extension for the path does not\naffect the actual format. To use an older format, use\nthe `file_format` argument with one of the following values:\n\n[https://docs.microsoft.com/en-us/office/vba/api/excel.xlfileformat](https://docs.microsoft.com/en-us/office/vba/api/excel.xlfileformat)\n\nExamples:\n\n```robotframework\n# Save workbook in modern format\nSave excel as    orders.xlsx\n\n# Save workbook in Excel 97 format (format from above URL)\nSave excel as    legacy.xls   file_format=${56}\n```\n", "tags": [], "source": null, "shortdoc": "Save Excel with name if workbook is open", "lineno": 331}, {"name": "Set Active Worksheet", "args": [{"name": "sheetname", "kind": "POSITIONAL_OR_NAMED", "repr": "sheetname: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "sheetnumber", "kind": "POSITIONAL_OR_NAMED", "repr": "sheetnumber: int = None", "required": true, "defaultValue": "None", "types": ["int"], "typedocs": []}], "doc": "Set active worksheet by either its sheet number or name\n\nparam sheetname\n\n:   name of Excel sheet, defaults to None\n\nparam sheetnumber\n\n:   index of Excel sheet, defaults to None\n", "tags": [], "source": null, "shortdoc": "Set active worksheet by either its sheet number or name", "lineno": 195}, {"name": "Set Object Property", "args": [{"name": "object_instance", "kind": "POSITIONAL_OR_NAMED", "repr": "object_instance", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "property_name", "kind": "POSITIONAL_OR_NAMED", "repr": "property_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Set the property of any object.\n\nThis is a utility keyword for Robot Framework syntax to set object\nproperty values.\n\n```robotframework\n${new_value}=    Replace String    ${value}    10.132.    5511.11.\nSet Object Property    ${result}    Value    ${new_value}\n```\n\nparam object_instance\n\n:   object instance to set the property\n\nparam property_name\n\n:   property name to set\n\nparam value\n\n:   value to set\n", "tags": [], "source": "c:\\ProgramData\\Jenkins\\.jenkins\\workspace\\Robot\\RobotFramework\\.venv\\lib\\site-packages\\RPA\\application.py", "shortdoc": "Set the property of any object.", "lineno": 224}, {"name": "Unmerge Range", "args": [{"name": "initial_range", "kind": "POSITIONAL_OR_NAMED", "repr": "initial_range: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}], "doc": "Unmerges a range of cells.\n\nparam initial_range\n\n:   range of cells to unmerge\n", "tags": [], "source": null, "shortdoc": "Unmerges a range of cells.", "lineno": 897}, {"name": "Write Data To Range", "args": [{"name": "target_range", "kind": "POSITIONAL_OR_NAMED", "repr": "target_range: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}, {"name": "values", "kind": "POSITIONAL_OR_NAMED", "repr": "values: Table | List[List]", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "log_warnings", "kind": "POSITIONAL_OR_NAMED", "repr": "log_warnings: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Writes data to the specified range(s) in the Excel worksheet.\n\nThe range width should match the number of columns in the data.\n\nMultiple ranges can be specified by separating them with a semicolon, but\nstill the total width of ranges should match the number of columns in the data.\n\nPython example:\n\n```python\nfrom RPA.Tables import Tables\nfrom RPA.Excel.Application import Application\n\nexcel = Application()\n\ntable = Tables().read_table_from_csv(\"input.csv\", header=True)\nexcel.open_workbook(\"result.xslx)\nexcel.write_data_to_range(\"A2:P100\", table)\n```\n\nRobot Framework example:\n\n```robotframework\n${input_table}=    Read table from CSV    input.csv    header=True\nOpen Workbook      result.xlsx\nWrite Data To Range    A2:L21    ${input_table}   # Single range\nWrite Data To Range    C2:E21;G2:I21    ${input_table}   # Multiple ranges\n```\n\nparam target_range\n\n:   A1 string presentation of the range(s) to write or\n    Range object.\n\nparam values\n\n:   Table or list of lists to write to the range(s).\n\nparam log_warnings\n\n:   on False will suppress logging warning, default\n    is True (warnings are logged)\n", "tags": [], "source": null, "shortdoc": "Writes data to the specified range(s) in the Excel worksheet.", "lineno": 803}, {"name": "Write To Cells", "args": [{"name": "worksheet", "kind": "POSITIONAL_OR_NAMED", "repr": "worksheet: Any = None", "required": true, "defaultValue": "None", "types": ["Any"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int = None", "required": true, "defaultValue": "None", "types": ["int"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int = None", "required": true, "defaultValue": "None", "types": ["int"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "number_format", "kind": "POSITIONAL_OR_NAMED", "repr": "number_format: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "formula", "kind": "POSITIONAL_OR_NAMED", "repr": "formula: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Write value, number_format and/or formula into cell.\n\nparam worksheet\n\n:   worksheet to handle, defaults to active worksheet if None\n\nparam row\n\n:   target row, defaults to None\n\nparam column\n\n:   target row, defaults to None\n\nparam value\n\n:   possible value to set, defaults to None\n\nparam number_format\n\n:   possible number format to set, defaults to None\n\nparam formula\n\n:   possible format to set, defaults to None\n\nraises ValueError\n\n:   if cell is not given\n", "tags": [], "source": null, "shortdoc": "Write value, number_format and/or formula into cell.", "lineno": 265}], "dataTypes": {}, "typedocs": []}
<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.Browser.Selenium" type="LIBRARY" format="ROBOT" scope="GLOBAL" generated="2025-04-11T12:07:30+00:00" specversion="6" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\RPA\Browser\Selenium.py" lineno="195">
<version>6.7.1</version>
<doc>SeleniumLibrary is a web testing library for Robot Framework.

    This document explains how to use keywords provided by SeleniumLibrary.
    For information about installation, support, and more, please visit the
    [https://github.com/robotframework/SeleniumLibrary|project pages].
    For more information about Robot Framework, see http://robotframework.org.

    SeleniumLibrary uses the Selenium WebDriver modules internally to
    control a web browser. See http://seleniumhq.org for more information
    about Selenium in general and SeleniumLibrary README.rst
    [https://github.com/robotframework/SeleniumLibrary#browser-drivers|Browser drivers chapter]
    for more details about WebDriver binary installation.

- `Locating elements`
- `Browser and Window`
- `Browser and Driver options and service class`
- `Timeouts, waits, and delays`
- `Run-on-failure functionality`
- `Boolean arguments`
- `EventFiringWebDriver`
- `Thread support`
- `Plugins`
- `Language`
- `Auto closing browser`
- `Importing`
- `Keywords`

    = Locating elements =

    All keywords in SeleniumLibrary that need to interact with an element
    on a web page take an argument typically named ``locator`` that specifies
    how to find the element. Most often the locator is given as a string
    using the locator syntax described below, but `using WebElements` is
    possible too.

    == Locator syntax ==

    SeleniumLibrary supports finding elements based on different strategies
    such as the element id, XPath expressions, or CSS selectors. The strategy
    can either be explicitly specified with a prefix or the strategy can be
    implicit.

    === Default locator strategy ===

    By default, locators are considered to use the keyword specific default
    locator strategy. All keywords support finding elements based on ``id``
    and ``name`` attributes, but some keywords support additional attributes
    or other values that make sense in their context. For example, `Click
    Link` supports the ``href`` attribute and the link text and addition
    to the normal ``id`` and ``name``.

    Examples:

    | `Click Element` | example | # Match based on ``id`` or ``name``.            |
    | `Click Link`    | example | # Match also based on link text and ``href``.   |
    | `Click Button`  | example | # Match based on ``id``, ``name`` or ``value``. |

    If a locator accidentally starts with a prefix recognized as `explicit
    locator strategy` or `implicit XPath strategy`, it is possible to use
    the explicit ``default`` prefix to enable the default strategy.

    Examples:

    | `Click Element` | name:foo         | # Find element with name ``foo``.               |
    | `Click Element` | default:name:foo | # Use default strategy with value ``name:foo``. |
    | `Click Element` | //foo            | # Find element using XPath ``//foo``.           |
    | `Click Element` | default: //foo   | # Use default strategy with value ``//foo``.    |

    === Explicit locator strategy ===

    The explicit locator strategy is specified with a prefix using either
    syntax ``strategy:value`` or ``strategy=value``. The former syntax
    is preferred because the latter is identical to Robot Framework's
    [http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#named-argument-syntax|
    named argument syntax] and that can cause problems. Spaces around
    the separator are ignored, so ``id:foo``, ``id: foo`` and ``id : foo``
    are all equivalent.

    Locator strategies that are supported by default are listed in the table
    below. In addition to them, it is possible to register `custom locators`.

    | = Strategy = |          = Match based on =         |         = Example =            |
    | id           | Element ``id``.                     | ``id:example``                 |
    | name         | ``name`` attribute.                 | ``name:example``               |
    | identifier   | Either ``id`` or ``name``.          | ``identifier:example``         |
    | class        | Element ``class``.                  | ``class:example``              |
    | tag          | Tag name.                           | ``tag:div``                    |
    | xpath        | XPath expression.                   | ``xpath://div[@id="example"]`` |
    | css          | CSS selector.                       | ``css:div#example``            |
    | dom          | DOM expression.                     | ``dom:document.images[5]``     |
    | link         | Exact text a link has.              | ``link:The example``           |
    | partial link | Partial link text.                  | ``partial link:he ex``         |
    | sizzle       | Sizzle selector deprecated.         | ``sizzle:div.example``         |
    | data         | Element ``data-*`` attribute        | ``data:id:my_id``              |
    | jquery       | jQuery expression.                  | ``jquery:div.example``         |
    | default      | Keyword specific default behavior.  | ``default:example``            |

    See the `Default locator strategy` section below for more information
    about how the default strategy works. Using the explicit ``default``
    prefix is only necessary if the locator value itself accidentally
    matches some of the explicit strategies.

    Different locator strategies have different pros and cons. Using ids,
    either explicitly like ``id:foo`` or by using the `default locator
    strategy` simply like ``foo``, is recommended when possible, because
    the syntax is simple and locating elements by id is fast for browsers.
    If an element does not have an id or the id is not stable, other
    solutions need to be used. If an element has a unique tag name or class,
    using ``tag``, ``class`` or ``css`` strategy like ``tag:h1``,
    ``class:example`` or ``css:h1.example`` is often an easy solution. In
    more complex cases using XPath expressions is typically the best
    approach. They are very powerful but a downside is that they can also
    get complex.

    Examples:

    | `Click Element` | id:foo                      | # Element with id 'foo'. |
    | `Click Element` | css:div#foo h1              | # h1 element under div with id 'foo'. |
    | `Click Element` | xpath: //div[@id="foo"]//h1 | # Same as the above using XPath, not CSS. |
    | `Click Element` | xpath: //*[contains(text(), "example")] | # Element containing text 'example'. |

    *NOTE:*

    - The ``strategy:value`` syntax is only supported by SeleniumLibrary 3.0
      and newer.
    - Using the ``sizzle`` strategy or its alias ``jquery`` requires that
      the system under test contains the jQuery library.
    - Prior to SeleniumLibrary 3.0, table related keywords only supported
      ``xpath``, ``css`` and ``sizzle/jquery`` strategies.
    - ``data`` strategy is conveniance locator that will construct xpath from the parameters.
      If you have element like `&lt;div data-automation="automation-id-2"&gt;`, you locate the element via
      ``data:automation:automation-id-2``. This feature was added in SeleniumLibrary 5.2.0

    === Implicit XPath strategy ===

    If the locator starts with ``//``  or multiple opening parenthesis in front
    of the ``//``, the locator is considered to be an XPath expression. In other
    words, using ``//div`` is equivalent to using explicit ``xpath://div`` and
    ``((//div))`` is equivalent to using explicit ``xpath:((//div))``

    Examples:

    | `Click Element` | //div[@id="foo"]//h1 |
    | `Click Element` | (//div)[2]           |

    The support for the ``(//`` prefix is new in SeleniumLibrary 3.0.
    Supporting multiple opening parenthesis is new in SeleniumLibrary 5.0.

    === Chaining locators ===

    It is possible chain multiple locators together as single locator. Each chained locator must start with locator
    strategy. Chained locators must be separated with single space, two greater than characters and followed with
    space. It is also possible mix different locator strategies, example css or xpath. Also a list can also be
    used to specify multiple locators. This is useful, is some part of locator would match as the locator separator
    but it should not. Or if there is need to existing WebElement as locator.

    Although all locators support chaining, some locator strategies do not abey the chaining. This is because
    some locator strategies use JavaScript to find elements and JavaScript is executed for the whole browser context
    and not for the element found be the previous locator. Chaining is supported by locator strategies which
    are based on Selenium API, like `xpath` or `css`, but example chaining is not supported by `sizzle` or `jquery

    Examples:
    | `Click Element` | css:.bar &gt;&gt; xpath://a | # To find a link which is present after an element with class "bar" |

    List examples:
    | ${locator_list} =             | `Create List`   | css:div#div_id            | xpath://*[text(), " &gt;&gt; "] |
    | `Page Should Contain Element` | ${locator_list} |                           |                           |
    | ${element} =                  | Get WebElement  | xpath://*[text(), " &gt;&gt; "] |                           |
    | ${locator_list} =             | `Create List`   | css:div#div_id            | ${element}                |
    | `Page Should Contain Element` | ${locator_list} |                           |                           |

    Chaining locators in new in SeleniumLibrary 5.0

    == Using WebElements ==

    In addition to specifying a locator as a string, it is possible to use
    Selenium's WebElement objects. This requires first getting a WebElement,
    for example, by using the `Get WebElement` keyword.

    | ${elem} =       | `Get WebElement` | id:example |
    | `Click Element` | ${elem}          |            |

    == Custom locators ==

    If more complex lookups are required than what is provided through the
    default locators, custom lookup strategies can be created. Using custom
    locators is a two part process. First, create a keyword that returns
    a WebElement that should be acted on:

    | Custom Locator Strategy | [Arguments] | ${browser} | ${locator} | ${tag} | ${constraints} |
    |   | ${element}= | Execute Javascript | return window.document.getElementById('${locator}'); |
    |   | RETURN | ${element} |

    This keyword is a reimplementation of the basic functionality of the
    ``id`` locator where ``${browser}`` is a reference to a WebDriver
    instance and ``${locator}`` is the name of the locator strategy. To use
    this locator, it must first be registered by using the
    `Add Location Strategy` keyword:

    | `Add Location Strategy` | custom | Custom Locator Strategy |

    The first argument of `Add Location Strategy` specifies the name of
    the strategy and it must be unique. After registering the strategy,
    the usage is the same as with other locators:

    | `Click Element` | custom:example |

    See the `Add Location Strategy` keyword for more details.

    = Browser and Window =

    There is different conceptual meaning when SeleniumLibrary talks
    about windows or browsers. This chapter explains those differences.

    == Browser ==

    When `Open Browser` or `Create WebDriver` keyword is called, it
    will create a new Selenium WebDriver instance by using the
    [https://www.seleniumhq.org/docs/03_webdriver.jsp|Selenium WebDriver]
    API. In SeleniumLibrary terms, a new browser is created. It is
    possible to start multiple independent browsers (Selenium Webdriver
    instances) at the same time, by calling `Open Browser` or
    `Create WebDriver` multiple times. These browsers are usually
    independent of each other and do not share data like cookies,
    sessions or profiles. Typically when the browser starts, it
    creates a single window which is shown to the user.

    == Window ==

    Windows are the part of a browser that loads the web site and presents
    it to the user. All content of the site is the content of the window.
    Windows are children of a browser. In SeleniumLibrary browser is a
    synonym for WebDriver instance. One browser may have multiple
    windows. Windows can appear as tabs, as separate windows or pop-ups with
    different position and size. Windows belonging to the same browser
    typically share the sessions detail, like cookies. If there is a
    need to separate sessions detail, example login with two different
    users, two browsers (Selenium WebDriver instances) must be created.
    New windows can be opened example by the application under test or
    by example `Execute Javascript` keyword:

    | `Execute Javascript`    window.open()    # Opens a new window with location about:blank

    The example below opens multiple browsers and windows,
    to demonstrate how the different keywords can be used to interact
    with browsers, and windows attached to these browsers.

    Structure:
    | BrowserA
    |            Window 1  (location=https://robotframework.org/)
    |            Window 2  (location=https://robocon.io/)
    |            Window 3  (location=https://github.com/robotframework/)
    |
    | BrowserB
    |            Window 1  (location=https://github.com/)

    Example:
    | `Open Browser`       | https://robotframework.org         | ${BROWSER}       | alias=BrowserA   | # BrowserA with first window is opened.                                       |
    | `Execute Javascript` | window.open()                      |                  |                  | # In BrowserA second window is opened.                                        |
    | `Switch Window`      | locator=NEW                        |                  |                  | # Switched to second window in BrowserA                                       |
    | `Go To`              | https://robocon.io                 |                  |                  | # Second window navigates to robocon site.                                    |
    | `Execute Javascript` | window.open()                      |                  |                  | # In BrowserA third window is opened.                                         |
    | ${handle}            | `Switch Window`                    | locator=NEW      |                  | # Switched to third window in BrowserA                                        |
    | `Go To`              | https://github.com/robotframework/ |                  |                  | # Third windows goes to robot framework github site.                          |
    | `Open Browser`       | https://github.com                 | ${BROWSER}       | alias=BrowserB   | # BrowserB with first windows is opened.                                      |
    | ${location}          | `Get Location`                     |                  |                  | # ${location} is: https://www.github.com                                      |
    | `Switch Window`      | ${handle}                          | browser=BrowserA |                  | # BrowserA second windows is selected.                                        |
    | ${location}          | `Get Location`                     |                  |                  | # ${location} = https://robocon.io/                                           |
    | @{locations 1}       | `Get Locations`                    |                  |                  | # By default, lists locations under the currectly active browser (BrowserA).   |
    | @{locations 2}       | `Get Locations`                    |  browser=ALL     |                  | # By using browser=ALL argument keyword list all locations from all browsers. |

    The above example, @{locations 1} contains the following items:
    https://robotframework.org/, https://robocon.io/ and
    https://github.com/robotframework/'. The @{locations 2}
    contains the following items: https://robotframework.org/,
    https://robocon.io/, https://github.com/robotframework/'
    and 'https://github.com/.

    = Browser and Driver options and service class =

    This section talks about how to configure either the browser or
    the driver using the options and service arguments of the `Open
    Browser` keyword.

    == Configuring the browser using the Selenium Options ==

    As noted within the keyword documentation for `Open Browser`, its
    ``options`` argument accepts Selenium options in two different
    formats: as a string and as Python object which is an instance of
    the Selenium options class.

    === Options string format ===

    The string format allows defining Selenium options methods
    or attributes and their arguments in Robot Framework test data.
    The method and attributes names are case and space sensitive and
    must match to the Selenium options methods and attributes names.
    When defining a method, it must be defined in a similar way as in
    python: method name, opening parenthesis, zero to many arguments
    and closing parenthesis. If there is a need to define multiple
    arguments for a single method, arguments must be separated with
    comma, just like in Python. Example: `add_argument("--headless")`
    or `add_experimental_option("key", "value")`. Attributes are
    defined in a similar way as in Python: attribute name, equal sign,
    and attribute value. Example, `headless=True`. Multiple methods
    and attributes must be separated by a semicolon. Example:
    `add_argument("--headless");add_argument("--start-maximized")`.

    Arguments allow defining Python data types and arguments are
    evaluated by using Python
    [https://docs.python.org/3/library/ast.html#ast.literal_eval|ast.literal_eval].
    Strings must be quoted with single or double quotes, example "value"
    or 'value'. It is also possible to define other Python builtin
    data types, example `True` or `None`, by not using quotes
    around the arguments.

    The string format is space friendly. Usually, spaces do not alter
    the defining methods or attributes. There are two exceptions.
    In some Robot Framework test data formats, two or more spaces are
    considered as cell separator and instead of defining a single
    argument, two or more arguments may be defined. Spaces in string
    arguments are not removed and are left as is. Example
    `add_argument ( "--headless" )` is same as
    `add_argument("--headless")`. But `add_argument(" --headless ")` is
    not same same as `add_argument ( "--headless" )`, because
    spaces inside of quotes are not removed. Please note that if
    options string contains backslash, example a Windows OS path,
    the backslash needs escaping both in Robot Framework data and
    in Python side. This means single backslash must be writen using
    four backslash characters. Example, Windows path:
    "C:\path\to\profile" must be written as
    "C:\\\\path\\\to\\\\profile". Another way to write
    backslash is use Python
    [https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals|raw strings]
    and example write: r"C:\\path\\to\\profile".

    === Selenium Options as Python class ===

    As last format, ``options`` argument also supports receiving
    the Selenium options as Python class instance. In this case, the
    instance is used as-is and the SeleniumLibrary will not convert
    the instance to other formats.
    For example, if the following code return value is saved to
    `${options}` variable in the Robot Framework data:
    | options = webdriver.ChromeOptions()
    | options.add_argument('--disable-dev-shm-usage')
    | return options

    Then the `${options}` variable can be used as an argument to
    ``options``.

    Example the ``options`` argument can be used to launch Chomium-based
    applications which utilize the
    [https://bitbucket.org/chromiumembedded/cef/wiki/UsingChromeDriver|Chromium Embedded Framework]
    . To launch Chromium-based application, use ``options`` to define
    `binary_location` attribute and use `add_argument` method to define
    `remote-debugging-port` port for the application. Once the browser
    is opened, the test can interact with the embedded web-content of
    the system under test.

    == Configuring the driver using the Service class ==

    With the ``service`` argument, one can setup and configure the driver. For example
    one can set the driver location and/port or specify the command line arguments. There
    are several browser specific attributes related to logging as well. For the various
    Service Class attributes refer to
    [https://www.selenium.dev/documentation/webdriver/drivers/service/|the Selenium documentation]
    . Currently the ``service`` argument only accepts Selenium service in the string format.

    === Service string format ===

    The string format allows for defining Selenium service attributes
    and their values in the `Open Browser` keyword. The attributes names
    are case and space sensitive and must match to the Selenium attributes
    names. Attributes are defined in a similar way as in Python: attribute
    name, equal sign, and attribute value. Example, `port=1234`. Multiple
    attributes must be separated by a semicolon. Example:
    `executable_path='/path/to/driver';port=1234`. Don't have duplicate
    attributes, like `service_args=['--append-log', '--readable-timestamp'];
    service_args=['--log-level=DEBUG']` as the second will override the first.
    Instead combine them as in
    `service_args=['--append-log', '--readable-timestamp', '--log-level=DEBUG']`

    Arguments allow defining Python data types and arguments are
    evaluated by using Python. Strings must be quoted with single
    or double quotes, example "value" or 'value'

    = Timeouts, waits, and delays =

    This section discusses different ways how to wait for elements to
    appear on web pages and to slow down execution speed otherwise.
    It also explains the `time format` that can be used when setting various
    timeouts, waits, and delays.

    == Timeout ==

    SeleniumLibrary contains various keywords that have an optional
    ``timeout`` argument that specifies how long these keywords should
    wait for certain events or actions. These keywords include, for example,
    ``Wait ...`` keywords and keywords related to alerts. Additionally
    `Execute Async Javascript`. Although it does not have ``timeout``,
    argument, uses a timeout to define how long asynchronous JavaScript
    can run.

    The default timeout these keywords use can be set globally either by
    using the `Set Selenium Timeout` keyword or with the ``timeout`` argument
    when `importing` the library. If no default timeout is set globally, the
    default is 5 seconds. If None is specified for the timeout argument in the
    keywords, the default is used. See `time format` below for supported
    timeout syntax.

    == Implicit wait ==

    Implicit wait specifies the maximum time how long Selenium waits when
    searching for elements. It can be set by using the `Set Selenium Implicit
    Wait` keyword or with the ``implicit_wait`` argument when `importing`
    the library. See [https://www.seleniumhq.org/docs/04_webdriver_advanced.jsp|
    Selenium documentation] for more information about this functionality.

    See `time format` below for supported syntax.

    == Page load ==
    Page load timeout is the amount of time to wait for page load to complete
    until a timeout exception is raised.

    The default page load timeout can be set globally
    when `importing` the library with the ``page_load_timeout`` argument
    or by using the `Set Selenium Page Load Timeout` keyword.

    See `time format` below for supported timeout syntax.

    Support for page load is new in SeleniumLibrary 6.1

    == Selenium speed ==

    Selenium execution speed can be slowed down globally by using `Set
    Selenium speed` keyword. This functionality is designed to be used for
    demonstrating or debugging purposes. Using it to make sure that elements
    appear on a page is not a good idea. The above-explained timeouts
    and waits should be used instead.

    See `time format` below for supported syntax.

    == Time format ==

    All timeouts and waits can be given as numbers considered seconds
    (e.g. ``0.5`` or ``42``) or in Robot Framework's time syntax
    (e.g. ``1.5 seconds`` or ``1 min 30 s``). For more information about
    the time syntax see the
    [http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format|Robot Framework User Guide].

    = Run-on-failure functionality =

    SeleniumLibrary has a handy feature that it can automatically execute
    a keyword if any of its own keywords fails. By default, it uses the
    `Capture Page Screenshot` keyword, but this can be changed either by
    using the `Register Keyword To Run On Failure` keyword or with the
    ``run_on_failure`` argument when `importing` the library. It is
    possible to use any keyword from any imported library or resource file.

    The run-on-failure functionality can be disabled by using a special value
    ``NOTHING`` or anything considered false (see `Boolean arguments`)
    such as ``NONE``.

    = Boolean arguments =

    Starting from 5.0 SeleniumLibrary relies on Robot Framework to perform the
    boolean conversion based on keyword arguments [https://docs.python.org/3/library/typing.html|type hint].
    More details in Robot Framework
    [http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#supported-conversions|user guide]

    Please note SeleniumLibrary 3 and 4 did have own custom methods to covert
    arguments to boolean values.

    = EventFiringWebDriver =

    The SeleniumLibrary offers support for
    [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html#module-selenium.webdriver.support.event_firing_webdriver|EventFiringWebDriver].
    See the Selenium and SeleniumLibrary
    [https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst#EventFiringWebDriver|EventFiringWebDriver support]
    documentation for further details.

    EventFiringWebDriver is new in SeleniumLibrary 4.0

    = Thread support =

    SeleniumLibrary is not thread-safe. This is mainly due because the underlying
    [https://github.com/SeleniumHQ/selenium/wiki/Frequently-Asked-Questions#q-is-webdriver-thread-safe|
    Selenium tool is not thread-safe] within one browser/driver instance.
    Because of the limitation in the Selenium side, the keywords or the
    API provided by the SeleniumLibrary is not thread-safe.

    = Plugins =

    SeleniumLibrary offers plugins as a way to modify and add library keywords and modify some of the internal
    functionality without creating a new library or hacking the source code. See
    [https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst#Plugins|plugin API]
    documentation for further details.

    Plugin API is new SeleniumLibrary 4.0

    = Language =

    SeleniumLibrary offers the possibility to translate keyword names and documentation to new language. If language
    is defined, SeleniumLibrary will search from
    [https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-search-path | module search path]
    for Python packages starting with `robotframework-seleniumlibrary-translation` by using the
    [https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/ | Python pluging API]. The Library
    is using naming convention to find Python plugins.

    The package must implement a single API call, ``get_language`` without any arguments. The method must return a
    dictionary containing two keys: ``language`` and ``path``. The language key value defines which language
    the package contains. Also the value should match (case insensitive) the library ``language`` import parameter.
    The path parameter value should be full path to the translation file.

    == Translation file ==

    The file name or extension is not important, but data must be in [https://www.json.org/json-en.html | json]
    format. The keys of json are the methods names, not the keyword names, which implements keywords. Value of
    key is json object which contains two keys: ``name`` and ``doc``. The ``name`` key contains the keyword
    translated name and `doc` contains translated documentation. Providing doc and name are optional, example
    translation json file can only provide translations to keyword names or only to documentation. But it is
    always recommended to provide translation to both name and doc. Special key ``__intro__`` is for class level
    documentation and ``__init__`` is for init level documentation. These special values ``name`` can not be
    translated, instead ``name`` should be kept the same.

    == Generating template translation file ==

    Template translation file, with English language can be created by running:
    `rfselib translation /path/to/translation.json` command. Command does not provide translations to other
    languages, it only provides easy way to create full list keywords and their documentation in correct
    format. It is also possible to add keywords from library plugins by providing `--plugins` arguments
    to command. Example: `rfselib translation --plugins myplugin.SomePlugin /path/to/translation.json` The
    generated json file contains `sha256` key, which contains the sha256 sum of the library documentation.
    The sha256 sum is used by `rfselib translation --compare /path/to/translation.json` command, which compares
    the translation to the library and prints outs a table which tells if there are changes needed for
    the translation file.

    Example project for translation can be found from
    [https://github.com/MarketSquare/robotframework-seleniumlibrary-translation-fi | robotframework-seleniumlibrary-translation-fi]
    repository.
    
= Auto closing browser =

    By default, the browser instances created during a task execution are closed
    at the end of the task. This can be prevented with the ``auto_close``
    parameter when *importing* the library.

    The value of the parameter needs to be set to ``False`` or any object evaluated as
    false (see `Boolean arguments`).
    </doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="243">
<arguments repr="*args, **kwargs">
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**kwargs">
<name>kwargs</name>
</arg>
</arguments>
<doc>SeleniumLibrary can be imported with several optional arguments.

- ``timeout``:
  Default value for `timeouts` used with ``Wait ...`` keywords.
- ``implicit_wait``:
  Default value for `implicit wait` used when locating elements.
- ``run_on_failure``:
  Default action for the `run-on-failure functionality`.
- ``screenshot_root_directory``:
  Path to folder where possible screenshots are created or EMBED.
  See `Set Screenshot Directory` keyword for further details about EMBED.
  If not given, the directory where the log file is written is used.
- ``plugins``:
  Allows extending the SeleniumLibrary with external Python classes.
- ``event_firing_webdriver``:
  Class for wrapping Selenium with
  [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html#module-selenium.webdriver.support.event_firing_webdriver|EventFiringWebDriver]
- ``page_load_timeout``:
  Default value to wait for page load to complete until a timeout exception is raised.
- ``action_chain_delay``:
  Default value for `ActionChains` delay to wait in between actions.
- ``language``:
  Defines language which is used to translate keyword names and documentation.</doc>
<shortdoc>SeleniumLibrary can be imported with several optional arguments.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Add Cookie" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\cookie.py" lineno="143">
<arguments repr="name: str, value: str, path: str | None = None, domain: str | None = None, secure: bool | None = None, expiry: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name: str">
<name>name</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: str">
<name>value</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="path: str | None = None">
<name>path</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="domain: str | None = None">
<name>domain</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="secure: bool | None = None">
<name>secure</name>
<type name="Union" union="true">
<type name="bool" typedoc="boolean"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="expiry: str | None = None">
<name>expiry</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Adds a cookie to your current session.

``name`` and ``value`` are required, ``path``, ``domain``, ``secure``
and ``expiry`` are optional.  Expiry supports the same formats as
the [http://robotframework.org/robotframework/latest/libraries/DateTime.html|DateTime]
library or an epoch timestamp.

Example:
| `Add Cookie` | foo | bar |                            |
| `Add Cookie` | foo | bar | domain=example.com         |
| `Add Cookie` | foo | bar | expiry=2027-09-28 16:21:35 | # Expiry as timestamp.     |
| `Add Cookie` | foo | bar | expiry=1822137695          | # Expiry as epoch seconds. |

Prior to SeleniumLibrary 3.0 setting expiry did not work.</doc>
<shortdoc>Adds a cookie to your current session.</shortdoc>
</kw>
<kw name="Add Location Strategy" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1148">
<arguments repr="strategy_name: str, strategy_keyword: str, persist: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="strategy_name: str">
<name>strategy_name</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="strategy_keyword: str">
<name>strategy_keyword</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="persist: bool = False">
<name>persist</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<doc>Adds a custom location strategy.

See `Custom locators` for information on how to create and use
custom strategies. `Remove Location Strategy` can be used to
remove a registered strategy.

Location strategies are automatically removed after leaving the
current scope by default. Setting ``persist`` to a true value (see
`Boolean arguments`) will cause the location strategy to stay
registered throughout the life of the test.</doc>
<shortdoc>Adds a custom location strategy.</shortdoc>
</kw>
<kw name="Alert Should Be Present" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\alert.py" lineno="52">
<arguments repr="text: str = , action: str = ACCEPT, timeout: timedelta | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="text: str = ">
<name>text</name>
<type name="str" typedoc="string"/>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action: str = ACCEPT">
<name>action</name>
<type name="str" typedoc="string"/>
<default>ACCEPT</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Verifies that an alert is present and by default, accepts it.

Fails if no alert is present. If ``text`` is a non-empty string,
then it is used to verify alert's message. The alert is accepted
by default, but that behavior can be controlled by using the
``action`` argument same way as with `Handle Alert`.

``timeout`` specifies how long to wait for the alert to appear.
If it is not given, the global default `timeout` is used instead.

``action`` and ``timeout`` arguments are new in SeleniumLibrary 3.0.
In earlier versions, the alert was always accepted and a timeout was
hardcoded to one second.</doc>
<shortdoc>Verifies that an alert is present and by default, accepts it.</shortdoc>
</kw>
<kw name="Alert Should Not Be Present" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\alert.py" lineno="79">
<arguments repr="action: str = ACCEPT, timeout: timedelta | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action: str = ACCEPT">
<name>action</name>
<type name="str" typedoc="string"/>
<default>ACCEPT</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Verifies that no alert is present.

If the alert actually exists, the ``action`` argument determines
how it should be handled. By default, the alert is accepted, but
it can be also dismissed or left open the same way as with the
`Handle Alert` keyword.

``timeout`` specifies how long to wait for the alert to appear.
By default, is not waited for the alert at all, but a custom time can
be given if alert may be delayed. See the `time format` section
for information about the syntax.

New in SeleniumLibrary 3.0.</doc>
<shortdoc>Verifies that no alert is present.</shortdoc>
</kw>
<kw name="Assign Id To Element" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="227">
<arguments repr="locator: WebElement | str, id: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="id: str">
<name>id</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Assigns a temporary ``id`` to the element specified by ``locator``.

This is mainly useful if the locator is complicated and/or slow XPath
expression and it is needed multiple times. Identifier expires when
the page is reloaded.

See the `Locating elements` section for details about the locator
syntax.

Example:
| `Assign ID to Element` | //ul[@class='example' and ./li[contains(., 'Stuff')]] | my id |
| `Page Should Contain Element` | my id |</doc>
<shortdoc>Assigns a temporary ``id`` to the element specified by ``locator``.</shortdoc>
</kw>
<kw name="Attach Chrome Browser" lineno="1091">
<arguments repr="port: int, alias: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="port: int">
<name>port</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="alias: str | None = None">
<name>alias</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<returntype name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="int" typedoc="integer"/>
</returntype>
<doc>Attach to an existing instance of Chrome browser.

Requires that the browser was started with the command line
option ``--remote-debugging-port=&lt;port&gt;``, where port is any
4-digit number not being used by other applications.

*Note.* The first Chrome instance on the system needs to be
started with this command line option or this won't have an effect.

That port can then be used to connect using this keyword.

Example:

| Attach Chrome Browser | port=9222 |</doc>
<shortdoc>Attach to an existing instance of Chrome browser.</shortdoc>
</kw>
<kw name="Capture Element Screenshot" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\screenshot.py" lineno="132">
<arguments repr="locator: WebElement | str, filename: str = selenium-element-screenshot-{index}.png">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="filename: str = selenium-element-screenshot-{index}.png">
<name>filename</name>
<type name="str" typedoc="string"/>
<default>selenium-element-screenshot-{index}.png</default>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Captures a screenshot from the element identified by ``locator`` and embeds it into log file.

See `Capture Page Screenshot` for details about ``filename`` argument.
See the `Locating elements` section for details about the locator
syntax.

An absolute path to the created element screenshot is returned.

Support for capturing the screenshot from an element has limited support
among browser vendors. Please check the browser vendor driver documentation
does the browser support capturing a screenshot from an element.

New in SeleniumLibrary 3.3. Support for EMBED is new in SeleniumLibrary 4.2.

Examples:
| `Capture Element Screenshot` | id:image_id |                                |
| `Capture Element Screenshot` | id:image_id | ${OUTPUTDIR}/id_image_id-1.png |
| `Capture Element Screenshot` | id:image_id | EMBED                          |</doc>
<shortdoc>Captures a screenshot from the element identified by ``locator`` and embeds it into log file.</shortdoc>
</kw>
<kw name="Capture Page Screenshot" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\screenshot.py" lineno="70">
<arguments repr="filename: str = selenium-screenshot-{index}.png">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="filename: str = selenium-screenshot-{index}.png">
<name>filename</name>
<type name="str" typedoc="string"/>
<default>selenium-screenshot-{index}.png</default>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Takes a screenshot of the current page and embeds it into a log file.

``filename`` argument specifies the name of the file to write the
screenshot into. The directory where screenshots are saved can be
set when `importing` the library or by using the `Set Screenshot
Directory` keyword. If the directory is not configured, screenshots
are saved to the same directory where Robot Framework's log file is
written.

If ``filename`` equals to EMBED (case insensitive), then screenshot
is embedded as Base64 image to the log.html. In this case file is not
created in the filesystem.

Starting from SeleniumLibrary 1.8, if ``filename`` contains marker
``{index}``, it will be automatically replaced with an unique running
index, preventing files to be overwritten. Indices start from 1,
and how they are represented can be customized using Python's
[https://docs.python.org/3/library/string.html#format-string-syntax|
format string syntax].

An absolute path to the created screenshot file is returned or if
``filename``  equals to EMBED, word `EMBED` is returned.

Support for EMBED is new in SeleniumLibrary 4.2

Examples:
| `Capture Page Screenshot` |                                        |
| `File Should Exist`       | ${OUTPUTDIR}/selenium-screenshot-1.png |
| ${path} =                 | `Capture Page Screenshot`              |
| `File Should Exist`       | ${OUTPUTDIR}/selenium-screenshot-2.png |
| `File Should Exist`       | ${path}                                |
| `Capture Page Screenshot` | custom_name.png                        |
| `File Should Exist`       | ${OUTPUTDIR}/custom_name.png           |
| `Capture Page Screenshot` | custom_with_index_{index}.png          |
| `File Should Exist`       | ${OUTPUTDIR}/custom_with_index_1.png   |
| `Capture Page Screenshot` | formatted_index_{index:03}.png         |
| `File Should Exist`       | ${OUTPUTDIR}/formatted_index_001.png   |
| `Capture Page Screenshot` | EMBED                                  |
| `File Should Not Exist`   | EMBED                                  |</doc>
<shortdoc>Takes a screenshot of the current page and embeds it into a log file.</shortdoc>
</kw>
<kw name="Checkbox Should Be Selected" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="44">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Verifies checkbox ``locator`` is selected/checked.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies checkbox ``locator`` is selected/checked.</shortdoc>
</kw>
<kw name="Checkbox Should Not Be Selected" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="58">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Verifies checkbox ``locator`` is not selected/checked.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies checkbox ``locator`` is not selected/checked.</shortdoc>
</kw>
<kw name="Choose File" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="216">
<arguments repr="locator: WebElement | str, file_path: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="file_path: str">
<name>file_path</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Inputs the ``file_path`` into the file input field ``locator``.

This keyword is most often used to input files into upload forms.
The keyword does not check ``file_path`` is the file or folder
available on the machine where tests are executed. If the ``file_path``
points at a file and when using Selenium Grid, Selenium will
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload#selenium.webdriver.remote.command.Command.UPLOAD_FILE|magically],
transfer the file from the machine where the tests are executed
to the Selenium Grid node where the browser is running.
Then Selenium will send the file path, from the nodes file
system, to the browser.

That ``file_path`` is not checked, is new in SeleniumLibrary 4.0.

Example:
| `Choose File` | my_upload_field | ${CURDIR}/trades.csv |</doc>
<shortdoc>Inputs the ``file_path`` into the file input field ``locator``.</shortdoc>
</kw>
<kw name="Clear All Highlights" lineno="2108">
<arguments repr="">
</arguments>
<doc>Remove all highlighting made by ``Highlight Elements``.</doc>
<shortdoc>Remove all highlighting made by ``Highlight Elements``.</shortdoc>
</kw>
<kw name="Clear Element Text" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="561">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Clears the value of the text-input-element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Clears the value of the text-input-element identified by ``locator``.</shortdoc>
</kw>
<kw name="Click Button" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="584">
<arguments repr="locator: WebElement | str, modifier: bool | str = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="modifier: bool | str = False">
<name>modifier</name>
<type name="Union" union="true">
<type name="bool" typedoc="boolean"/>
<type name="str" typedoc="string"/>
</type>
<default>False</default>
</arg>
</arguments>
<doc>Clicks the button identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, buttons are
searched using ``id``, ``name``, and ``value``.

See the `Click Element` keyword for details about the
``modifier`` argument.

The ``modifier`` argument is new in SeleniumLibrary 3.3</doc>
<shortdoc>Clicks the button identified by ``locator``.</shortdoc>
</kw>
<kw name="Click Button When Visible" lineno="1211">
<arguments repr="locator: WebElement | ShadowRoot | str, modifier: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="modifier: str | None = None">
<name>modifier</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Click button identified by ``locator``, once it becomes visible.

``locator`` element locator

``modifier`` press given keys while clicking the element, e.g. CTRL

Example:

| Click Button When Visible  | //button[@class="mybutton"] |</doc>
<shortdoc>Click button identified by ``locator``, once it becomes visible.</shortdoc>
</kw>
<kw name="Click Element" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="654">
<arguments repr="locator: WebElement | str, modifier: bool | str = False, action_chain: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="modifier: bool | str = False">
<name>modifier</name>
<type name="Union" union="true">
<type name="bool" typedoc="boolean"/>
<type name="str" typedoc="string"/>
</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action_chain: bool = False">
<name>action_chain</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<doc>Click the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.

The ``modifier`` argument can be used to pass
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys|Selenium Keys]
when clicking the element. The `+` can be used as a separator
for different Selenium Keys. The `CTRL` is internally translated to
the `CONTROL` key. The ``modifier`` is space and case insensitive, example
"alt" and " aLt " are supported formats to
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT|ALT key]
. If ``modifier`` does not match to Selenium Keys, keyword fails.

If ``action_chain`` argument is true, see `Boolean arguments` for more
details on how to set boolean argument, then keyword uses ActionChain
based click instead of the &lt;web_element&gt;.click() function. If both
``action_chain`` and ``modifier`` are defined, the click will be
performed using ``modifier`` and ``action_chain`` will be ignored.

Example:
| Click Element | id:button |                   | # Would click element without any modifiers.               |
| Click Element | id:button | CTRL              | # Would click element with CTLR key pressed down.          |
| Click Element | id:button | CTRL+ALT          | # Would click element with CTLR and ALT keys pressed down. |
| Click Element | id:button | action_chain=True | # Clicks the button using an Selenium  ActionChains        |

The ``modifier`` argument is new in SeleniumLibrary 3.2
The ``action_chain`` argument is new in SeleniumLibrary 4.1</doc>
<shortdoc>Click the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Click Element At Coordinates" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="722">
<arguments repr="locator: WebElement | str, xoffset: int, yoffset: int">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xoffset: int">
<name>xoffset</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="yoffset: int">
<name>yoffset</name>
<type name="int" typedoc="integer"/>
</arg>
</arguments>
<doc>Click the element ``locator`` at ``xoffset/yoffset``.

The Cursor is moved and the center of the element and x/y coordinates are
calculated from that point.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Click the element ``locator`` at ``xoffset/yoffset``.</shortdoc>
</kw>
<kw name="Click Element If Visible" lineno="1231">
<arguments repr="locator: WebElement | ShadowRoot | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Click element if it is visible

``locator`` element locator

Example:

| Click Element If Visible | //button[@class="mybutton"] |</doc>
<shortdoc>Click element if it is visible</shortdoc>
</kw>
<kw name="Click Element When Clickable" lineno="2233">
<arguments repr="locator: WebElement | ShadowRoot | str, timeout: str | int | timedelta | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: str | int | timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="int" typedoc="integer"/>
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits for and clicks an element until is fully ready to be clicked.

If a normal click doesn't work, then JavaScript-oriented workarounds are tried
as a fallback mechanism.

Parameter ``locator`` targets the element to be clicked.
Parameter ``timeout`` optionally configures a custom duration to wait for the
element to become clickable, until it gives up.

Example:

| Click Element When Clickable | example |</doc>
<shortdoc>Waits for and clicks an element until is fully ready to be clicked.</shortdoc>
</kw>
<kw name="Click Element When Visible" lineno="1187">
<arguments repr="locator: WebElement | ShadowRoot | str, modifier: str | None = None, action_chain: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="modifier: str | None = None">
<name>modifier</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action_chain: bool = False">
<name>action_chain</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<doc>Click element identified by ``locator``, once it becomes visible.

``locator`` element locator

``modifier`` press given keys while clicking the element, e.g. CTRL

``action_chain`` store action in Selenium ActionChain queue

Example:

| Click Element When Visible | q |
| Click Element When Visible | id:button | CTRL+ALT |
| Click Element When Visible | action_chain=True |</doc>
<shortdoc>Click element identified by ``locator``, once it becomes visible.</shortdoc>
</kw>
<kw name="Click Image" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="608">
<arguments repr="locator: WebElement | str, modifier: bool | str = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="modifier: bool | str = False">
<name>modifier</name>
<type name="Union" union="true">
<type name="bool" typedoc="boolean"/>
<type name="str" typedoc="string"/>
</type>
<default>False</default>
</arg>
</arguments>
<doc>Clicks an image identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, images are searched
using ``id``, ``name``, ``src`` and ``alt``.

See the `Click Element` keyword for details about the
``modifier`` argument.

The ``modifier`` argument is new in SeleniumLibrary 3.3</doc>
<shortdoc>Clicks an image identified by ``locator``.</shortdoc>
</kw>
<kw name="Click Link" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="633">
<arguments repr="locator: WebElement | str, modifier: bool | str = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="modifier: bool | str = False">
<name>modifier</name>
<type name="Union" union="true">
<type name="bool" typedoc="boolean"/>
<type name="str" typedoc="string"/>
</type>
<default>False</default>
</arg>
</arguments>
<doc>Clicks a link identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, links are searched
using ``id``, ``name``, ``href`` and the link text.

See the `Click Element` keyword for details about the
``modifier`` argument.

The ``modifier`` argument is new in SeleniumLibrary 3.3</doc>
<shortdoc>Clicks a link identified by ``locator``.</shortdoc>
</kw>
<kw name="Close All Browsers" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="40">
<arguments repr="">
</arguments>
<doc>Closes all open browsers and resets the browser cache.

After this keyword, new indexes returned from `Open Browser` keyword
are reset to 1.

This keyword should be used in test or suite teardown to make sure
all browsers are closed.</doc>
<shortdoc>Closes all open browsers and resets the browser cache.</shortdoc>
</kw>
<kw name="Close Browser" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="53">
<arguments repr="">
</arguments>
<doc>Closes the current browser.</doc>
<shortdoc>Closes the current browser.</shortdoc>
</kw>
<kw name="Close Window" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="125">
<arguments repr="">
</arguments>
<doc>Closes currently opened and selected browser window/tab.</doc>
<shortdoc>Closes currently opened and selected browser window/tab.</shortdoc>
</kw>
<kw name="Cover Element" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="511">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Will cover elements identified by ``locator`` with a blue div without breaking page layout.

See the `Locating elements` section for details about the locator
syntax.

New in SeleniumLibrary 3.3.0

Example:
|`Cover Element` | css:div#container |</doc>
<shortdoc>Will cover elements identified by ``locator`` with a blue div without breaking page layout.</shortdoc>
</kw>
<kw name="Create Webdriver" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="277">
<arguments repr="driver_name: str, alias: str | None = None, kwargs: dict | None = None, **init_kwargs">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="driver_name: str">
<name>driver_name</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="alias: str | None = None">
<name>alias</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="kwargs: dict | None = None">
<name>kwargs</name>
<type name="Union" union="true">
<type name="dict" typedoc="dictionary"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**init_kwargs">
<name>init_kwargs</name>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Creates an instance of Selenium WebDriver.

Like `Open Browser`, but allows passing arguments to the created
WebDriver instance directly. This keyword should only be used if
the functionality provided by `Open Browser` is not adequate.

``driver_name`` must be a WebDriver implementation name like Firefox,
Chrome, Ie, Edge, Safari, or Remote.

The initialized WebDriver can be configured either with a Python
dictionary ``kwargs`` or by using keyword arguments ``**init_kwargs``.
These arguments are passed directly to WebDriver without any
processing. See [https://seleniumhq.github.io/selenium/docs/api/py/api.html|
Selenium API documentation] for details about the supported arguments.

Examples:
| # Use proxy with Firefox   |                |                              |                                      |
| ${proxy}=                  | `Evaluate`     | selenium.webdriver.Proxy()   | modules=selenium, selenium.webdriver |
| ${proxy.http_proxy}=       | `Set Variable` | localhost:8888               |                                      |
| `Create Webdriver`         | Firefox        | proxy=${proxy}               |                                      |

Returns the index of this browser instance which can be used later to
switch back to it. Index starts from 1 and is reset back to it when
`Close All Browsers` keyword is used. See `Switch Browser` for an
example.</doc>
<shortdoc>Creates an instance of Selenium WebDriver.</shortdoc>
</kw>
<kw name="Current Frame Should Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\frames.py" lineno="53">
<arguments repr="text: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies that the current frame contains ``text``.

See `Page Should Contain` for an explanation about the ``loglevel``
argument.

Prior to SeleniumLibrary 3.0 this keyword was named
`Current Frame Contains`.</doc>
<shortdoc>Verifies that the current frame contains ``text``.</shortdoc>
</kw>
<kw name="Current Frame Should Not Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\frames.py" lineno="70">
<arguments repr="text: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies that the current frame does not contain ``text``.

See `Page Should Contain` for an explanation about the ``loglevel``
argument.</doc>
<shortdoc>Verifies that the current frame does not contain ``text``.</shortdoc>
</kw>
<kw name="Delete All Cookies" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\cookie.py" lineno="57">
<arguments repr="">
</arguments>
<doc>Deletes all cookies.</doc>
<shortdoc>Deletes all cookies.</shortdoc>
</kw>
<kw name="Delete Cookie" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\cookie.py" lineno="62">
<arguments repr="name">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name">
<name>name</name>
</arg>
</arguments>
<doc>Deletes the cookie matching ``name``.

If the cookie is not found, nothing happens.</doc>
<shortdoc>Deletes the cookie matching ``name``.</shortdoc>
</kw>
<kw name="Does Alert Contain" lineno="1373">
<arguments repr="text: str | None = None, timeout: str | int | timedelta | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="text: str | None = None">
<name>text</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: str | int | timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="int" typedoc="integer"/>
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does alert contain text.

``text`` check if alert includes text, will raise ValueError is text
does not exist

Example:

| ${res} | Does Alert Contain | alert message |</doc>
<shortdoc>Does alert contain text.</shortdoc>
</kw>
<kw name="Does Alert Not Contain" lineno="1392">
<arguments repr="text: str | None = None, timeout: str | int | timedelta | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="text: str | None = None">
<name>text</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: str | int | timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="int" typedoc="integer"/>
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does alert not contain text.

``text`` check that alert does not include text, will raise ValueError if text
does exist

Example:

| ${res} | Does Alert Not Contain | unexpected message |</doc>
<shortdoc>Does alert not contain text.</shortdoc>
</kw>
<kw name="Does Element Contain" lineno="1444">
<arguments repr="locator: WebElement | ShadowRoot | str, expected: str, ignore_case: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does element contain expected text

``locator`` element locator

``expected`` expected element text

``ignore_case`` should check be case insensitive, default `False`

Example:

| ${res} | Does Element Contain | id:spec | specification complete | ignore_case=True |</doc>
<shortdoc>Does element contain expected text</shortdoc>
</kw>
<kw name="Does Frame Contain" lineno="1428">
<arguments repr="locator: WebElement | ShadowRoot | str, text: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does frame contain expected text

``locator`` locator of the frame to check

``text`` does frame contain this text

Example:

| ${res} | Does Frame Contain | id:myframe | secret |</doc>
<shortdoc>Does frame contain expected text</shortdoc>
</kw>
<kw name="Does Location Contain" lineno="1536">
<arguments repr="expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does current URL contain expected

``expected`` URL should contain this

Example:

| Open Available Browser | https://robocorp.com |
| ${res} | Does Location Contain | robocorp |</doc>
<shortdoc>Does current URL contain expected</shortdoc>
</kw>
<kw name="Does Page Contain" lineno="1551">
<arguments repr="text: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does page contain expected text

``text`` page should contain this

Example:

| Open Available Browser | https://google.com |
| ${res} | Does Page Contain | Gmail |</doc>
<shortdoc>Does page contain expected text</shortdoc>
</kw>
<kw name="Does Page Contain Button" lineno="1566">
<arguments repr="locator: WebElement | ShadowRoot | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does page contain expected button

``locator`` element locator

Example:

| ${res} | Does Page Contain Button | search-button |</doc>
<shortdoc>Does page contain expected button</shortdoc>
</kw>
<kw name="Does Page Contain Checkbox" lineno="1580">
<arguments repr="locator: WebElement | ShadowRoot | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does page contain expected checkbox

``locator`` element locator

Example:

| ${res} | Does Page Contain Checkbox | random-selection |</doc>
<shortdoc>Does page contain expected checkbox</shortdoc>
</kw>
<kw name="Does Page Contain Element" lineno="1594">
<arguments repr="locator: WebElement | ShadowRoot | str, count: int | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="count: int | None = None">
<name>count</name>
<type name="Union" union="true">
<type name="int" typedoc="integer"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does page contain expected element

``locator`` element locator

``count`` how many times element is expected to appear on page
by default one or more

Example:

| ${res} | Does Page Contain Element | textarea |
| ${res} | Does Page Contain Element | button | count=4 |</doc>
<shortdoc>Does page contain expected element</shortdoc>
</kw>
<kw name="Does Page Contain Image" lineno="1612">
<arguments repr="locator: WebElement | ShadowRoot | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does page contain expected image

``locator`` element locator

Example:

| Open Available Browser | https://google.com |
| ${res} | Does Page Contain Image | Google |</doc>
<shortdoc>Does page contain expected image</shortdoc>
</kw>
<kw name="Does Page Contain Link" lineno="1627">
<arguments repr="locator: WebElement | ShadowRoot | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does page contain expected link

``locator`` element locator

Example:

| ${res} | Does Page Contain Link | id:submit |</doc>
<shortdoc>Does page contain expected link</shortdoc>
</kw>
<kw name="Does Page Contain List" lineno="1641">
<arguments repr="locator: WebElement | ShadowRoot | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does page contain expected list

``locator`` element locator

Example:

| ${res} | Does Page Contain List | class:selections |</doc>
<shortdoc>Does page contain expected list</shortdoc>
</kw>
<kw name="Does Page Contain Radio Button" lineno="1655">
<arguments repr="locator: WebElement | ShadowRoot | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does page contain expected radio button

``locator`` element locator

Example:

| ${res} | Does Page Contain Radio Button | male |</doc>
<shortdoc>Does page contain expected radio button</shortdoc>
</kw>
<kw name="Does Page Contain Textfield" lineno="1669">
<arguments repr="locator: WebElement | ShadowRoot | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does page contain expected textfield

``locator`` element locator

Example:

| ${res} | Does Page Contain Textfield | id:address |</doc>
<shortdoc>Does page contain expected textfield</shortdoc>
</kw>
<kw name="Does Table Cell Contain" lineno="1716">
<arguments repr="locator: WebElement | ShadowRoot | str, row: int, column: int, expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row: int">
<name>row</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="column: int">
<name>column</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does table cell contain expected text

``locator`` element locator for the table

``row`` row index starting from 1 (beginning) or -1 (from the end)

``column`` column index starting from 1 (beginning) or -1 (from the end)

``expected`` expected text in table row

Example:

| ${res} | Does Table Cell Contain | //table | 1 | 1 | Company |</doc>
<shortdoc>Does table cell contain expected text</shortdoc>
</kw>
<kw name="Does Table Column Contain" lineno="1738">
<arguments repr="locator: WebElement | ShadowRoot | str, column: int, expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="column: int">
<name>column</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does table column contain expected text

``locator`` element locator for the table

``column`` column index starting from 1 (beginning) or -1 (from the end)

``expected`` expected text in table column

Example:

| ${res} | Does Table Column Contain | //table | 1 | Nokia |</doc>
<shortdoc>Does table column contain expected text</shortdoc>
</kw>
<kw name="Does Table Contain" lineno="1808">
<arguments repr="locator: WebElement | ShadowRoot | str, expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does table contain expected text

``locator`` element locator

``expected`` expected text in table

Example:

| ${res} | Does Table Contain | //table | February |</doc>
<shortdoc>Does table contain expected text</shortdoc>
</kw>
<kw name="Does Table Footer Contain" lineno="1776">
<arguments repr="locator: WebElement | ShadowRoot | str, expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does table footer contain expected text

``locator`` element locator for the table

``expected`` expected text in table footer

Example:

| ${res} | Does Table Footer Contain | //table | Sum |</doc>
<shortdoc>Does table footer contain expected text</shortdoc>
</kw>
<kw name="Does Table Header Contain" lineno="1792">
<arguments repr="locator: WebElement | ShadowRoot | str, expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does table header contain expected text

``locator`` element locator for the table

``expected`` expected text in table header

Example:

| ${res} | Does Table Header Contain | //table | Month |</doc>
<shortdoc>Does table header contain expected text</shortdoc>
</kw>
<kw name="Does Table Row Contain" lineno="1758">
<arguments repr="locator: WebElement | ShadowRoot | str, row: int, expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row: int">
<name>row</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does table row contain expected text

``locator`` element locator for the table

``row`` row index starting from 1 (beginning) or -1 (from the end)

``expected`` expected text in table row

Example:

| ${res} | Does Table Row Contain | //table | 1 | Company |</doc>
<shortdoc>Does table row contain expected text</shortdoc>
</kw>
<kw name="Does Textarea Contain" lineno="1840">
<arguments repr="locator: WebElement | ShadowRoot | str, expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does textarea contain expected text

``locator`` element locator

``expected`` expected text in textarea

Example:

| ${res} | Does Textarea Contain | //textarea | sincerely |</doc>
<shortdoc>Does textarea contain expected text</shortdoc>
</kw>
<kw name="Does Textfield Contain" lineno="1856">
<arguments repr="locator: WebElement | ShadowRoot | str, expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Does textfield contain expected text

``locator`` element locator

``expected`` expected text in textfield

Example:

| ${res} | Does Textfield Contain | id:lname | Last |</doc>
<shortdoc>Does textfield contain expected text</shortdoc>
</kw>
<kw name="Double Click Element" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="744">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Double clicks the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Double clicks the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Drag And Drop" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="780">
<arguments repr="locator: WebElement | str, target: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="target: WebElement | str">
<name>target</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Drags the element identified by ``locator`` into the ``target`` element.

The ``locator`` argument is the locator of the dragged element
and the ``target`` is the locator of the target. See the
`Locating elements` section for details about the locator syntax.

Example:
| `Drag And Drop` | css:div#element | css:div.target |</doc>
<shortdoc>Drags the element identified by ``locator`` into the ``target`` element.</shortdoc>
</kw>
<kw name="Drag And Drop By Offset" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="798">
<arguments repr="locator: WebElement | str, xoffset: int, yoffset: int">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xoffset: int">
<name>xoffset</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="yoffset: int">
<name>yoffset</name>
<type name="int" typedoc="integer"/>
</arg>
</arguments>
<doc>Drags the element identified with ``locator`` by ``xoffset/yoffset``.

See the `Locating elements` section for details about the locator
syntax.

The element will be moved by ``xoffset`` and ``yoffset``, each of which
is a negative or positive number specifying the offset.

Example:
| `Drag And Drop By Offset` | myElem | 50 | -35 | # Move myElem 50px right and 35px down |</doc>
<shortdoc>Drags the element identified with ``locator`` by ``xoffset/yoffset``.</shortdoc>
</kw>
<kw name="Element Attribute Value Should Be" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="451">
<arguments repr="locator: WebElement | str, attribute: str, expected: None | str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="attribute: str">
<name>attribute</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: None | str">
<name>expected</name>
<type name="Union" union="true">
<type name="None" typedoc="None"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Verifies element identified by ``locator`` contains expected attribute value.

See the `Locating elements` section for details about the locator
syntax.

Example:
`Element Attribute Value Should Be` | css:img | href | value

New in SeleniumLibrary 3.2.</doc>
<shortdoc>Verifies element identified by ``locator`` contains expected attribute value.</shortdoc>
</kw>
<kw name="Element Should Be Disabled" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="246">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Verifies that element identified by ``locator`` is disabled.

This keyword considers also elements that are read-only to be
disabled.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies that element identified by ``locator`` is disabled.</shortdoc>
</kw>
<kw name="Element Should Be Enabled" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="259">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Verifies that element identified by ``locator`` is enabled.

This keyword considers also elements that are read-only to be
disabled.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies that element identified by ``locator`` is enabled.</shortdoc>
</kw>
<kw name="Element Should Be Focused" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="272">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Verifies that element identified by ``locator`` is focused.

See the `Locating elements` section for details about the locator
syntax.

New in SeleniumLibrary 3.0.</doc>
<shortdoc>Verifies that element identified by ``locator`` is focused.</shortdoc>
</kw>
<kw name="Element Should Be Visible" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="289">
<arguments repr="locator: WebElement | str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Verifies that the element identified by ``locator`` is visible.

Herein, visible means that the element is logically visible, not
optically visible in the current browser viewport. For example,
an element that carries ``display:none`` is not logically visible,
so using this keyword on that element would fail.

See the `Locating elements` section for details about the locator
syntax.

The ``message`` argument can be used to override the default error
message.</doc>
<shortdoc>Verifies that the element identified by ``locator`` is visible.</shortdoc>
</kw>
<kw name="Element Should Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="54">
<arguments repr="locator: WebElement | str, expected: None | str, message: str | None = None, ignore_case: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: None | str">
<name>expected</name>
<type name="Union" union="true">
<type name="None" typedoc="None"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<doc>Verifies that element ``locator`` contains text ``expected``.

See the `Locating elements` section for details about the locator
syntax.

The ``message`` argument can be used to override the default error
message.

The ``ignore_case`` argument can be set to True to compare case
insensitive, default is False. New in SeleniumLibrary 3.1.

``ignore_case`` argument is new in SeleniumLibrary 3.1.

Use `Element Text Should Be` if you want to match the exact text,
not a substring.</doc>
<shortdoc>Verifies that element ``locator`` contains text ``expected``.</shortdoc>
</kw>
<kw name="Element Should Not Be Visible" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="312">
<arguments repr="locator: WebElement | str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Verifies that the element identified by ``locator`` is NOT visible.

Passes if the element does not exists. See `Element Should Be Visible`
for more information about visibility and supported arguments.</doc>
<shortdoc>Verifies that the element identified by ``locator`` is NOT visible.</shortdoc>
</kw>
<kw name="Element Should Not Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="92">
<arguments repr="locator: WebElement | str, expected: None | str, message: str | None = None, ignore_case: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: None | str">
<name>expected</name>
<type name="Union" union="true">
<type name="None" typedoc="None"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<doc>Verifies that element ``locator`` does not contain text ``expected``.

See the `Locating elements` section for details about the locator
syntax.

The ``message`` argument can be used to override the default error
message.

The ``ignore_case`` argument can be set to True to compare case
insensitive, default is False.

``ignore_case`` argument new in SeleniumLibrary 3.1.</doc>
<shortdoc>Verifies that element ``locator`` does not contain text ``expected``.</shortdoc>
</kw>
<kw name="Element Text Should Be" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="331">
<arguments repr="locator: WebElement | str, expected: None | str, message: str | None = None, ignore_case: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: None | str">
<name>expected</name>
<type name="Union" union="true">
<type name="None" typedoc="None"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<doc>Verifies that element ``locator`` contains exact the text ``expected``.

See the `Locating elements` section for details about the locator
syntax.

The ``message`` argument can be used to override the default error
message.

The ``ignore_case`` argument can be set to True to compare case
insensitive, default is False.

``ignore_case`` argument is new in SeleniumLibrary 3.1.

Use `Element Should Contain` if a substring match is desired.</doc>
<shortdoc>Verifies that element ``locator`` contains exact the text ``expected``.</shortdoc>
</kw>
<kw name="Element Text Should Not Be" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="367">
<arguments repr="locator: WebElement | str, not_expected: None | str, message: str | None = None, ignore_case: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="not_expected: None | str">
<name>not_expected</name>
<type name="Union" union="true">
<type name="None" typedoc="None"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<doc>Verifies that element ``locator`` does not contain exact the text ``not_expected``.

See the `Locating elements` section for details about the locator
syntax.

The ``message`` argument can be used to override the default error
message.

The ``ignore_case`` argument can be set to True to compare case
insensitive, default is False.

New in SeleniumLibrary 3.1.1</doc>
<shortdoc>Verifies that element ``locator`` does not contain exact the text ``not_expected``.</shortdoc>
</kw>
<kw name="Execute Async Javascript" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\javascript.py" lineno="76">
<arguments repr="*code: Any">
<arg kind="VAR_POSITIONAL" required="false" repr="*code: Any">
<name>code</name>
<type name="Any" typedoc="Any"/>
</arg>
</arguments>
<returntype name="Any" typedoc="Any"/>
<doc>Executes asynchronous JavaScript code with possible arguments.

Similar to `Execute Javascript` except that scripts executed with
this keyword must explicitly signal they are finished by invoking the
provided callback. This callback is always injected into the executed
function as the last argument.

Scripts must complete within the script timeout or this keyword will
fail. See the `Timeout` section for more information.

Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script|
arguments] as part of ``code`` argument. See `Execute Javascript` for
more details.

Examples:
| `Execute Async JavaScript` | var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000); |
| `Execute Async JavaScript` | ${CURDIR}/async_js_to_execute.js |
| ${result} = | `Execute Async JavaScript`                      |
| ...         | var callback = arguments[arguments.length - 1]; |
| ...         | function answer(){callback("text");};           |
| ...         | window.setTimeout(answer, 2000);                |
| `Should Be Equal` | ${result} | text |</doc>
<shortdoc>Executes asynchronous JavaScript code with possible arguments.</shortdoc>
</kw>
<kw name="Execute Cdp" lineno="2173">
<arguments repr="command, parameters">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="command">
<name>command</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="parameters">
<name>parameters</name>
</arg>
</arguments>
<doc>Executes Chromium DevTools Protocol commands

Works only with Chromium-based browsers!

For more information, available commands and parameters, see:
https://chromedevtools.github.io/devtools-protocol/

``command`` command to execute as string

``parameters`` parameters for command as a dictionary

Example:

| Open Chrome Browser | about:blank | headless=${True} |
| &amp;{params} | Create Dictionary | userAgent=Chrome/83.0.4103.53 |
| Execute CDP | Network.setUserAgentOverride | ${params} |
| Go To | https://robocorp.com |</doc>
<shortdoc>Executes Chromium DevTools Protocol commands</shortdoc>
</kw>
<kw name="Execute Javascript" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\javascript.py" lineno="33">
<arguments repr="*code: Any">
<arg kind="VAR_POSITIONAL" required="false" repr="*code: Any">
<name>code</name>
<type name="Any" typedoc="Any"/>
</arg>
</arguments>
<returntype name="Any" typedoc="Any"/>
<doc>Executes the given JavaScript code with possible arguments.

``code`` may be divided into multiple cells in the test data and
``code`` may contain multiple lines of code and arguments. In that case,
the JavaScript code parts are concatenated together without adding
spaces and optional arguments are separated from ``code``.

If ``code`` is a path to an existing file, the JavaScript
to execute will be read from that file. Forward slashes work as
a path separator on all operating systems.

The JavaScript executes in the context of the currently selected
frame or window as the body of an anonymous function. Use ``window``
to refer to the window of your application and ``document`` to refer
to the document object of the current frame or window, e.g.
``document.getElementById('example')``.

This keyword returns whatever the executed JavaScript code returns.
Return values are converted to the appropriate Python types.

Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script|
arguments] as part of ``code`` argument. The JavaScript code and
arguments must be separated with `JAVASCRIPT` and `ARGUMENTS` markers
and must be used exactly with this format. If the Javascript code is
first, then the `JAVASCRIPT` marker is optional. The order of
`JAVASCRIPT` and `ARGUMENTS` markers can be swapped, but if `ARGUMENTS`
is the first marker, then `JAVASCRIPT` marker is mandatory. It is only
allowed to use `JAVASCRIPT` and `ARGUMENTS` markers only one time in the
``code`` argument.

Examples:
| `Execute JavaScript` | window.myFunc('arg1', 'arg2') |
| `Execute JavaScript` | ${CURDIR}/js_to_execute.js    |
| `Execute JavaScript` | alert(arguments[0]); | ARGUMENTS | 123 |
| `Execute JavaScript` | ARGUMENTS | 123 | JAVASCRIPT | alert(arguments[0]); |</doc>
<shortdoc>Executes the given JavaScript code with possible arguments.</shortdoc>
</kw>
<kw name="Frame Should Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\frames.py" lineno="84">
<arguments repr="locator: WebElement | str, text: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies that frame identified by ``locator`` contains ``text``.

See the `Locating elements` section for details about the locator
syntax.

See `Page Should Contain` for an explanation about the ``loglevel``
argument.</doc>
<shortdoc>Verifies that frame identified by ``locator`` contains ``text``.</shortdoc>
</kw>
<kw name="Get Action Chain Delay" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="656">
<arguments repr="">
</arguments>
<doc>Gets the currently stored value for chain_delay_value in timestr format.</doc>
<shortdoc>Gets the currently stored value for chain_delay_value in timestr format.</shortdoc>
</kw>
<kw name="Get All Links" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1027">
<arguments repr="">
</arguments>
<returntype name="List" typedoc="list">
<type name="str" typedoc="string"/>
</returntype>
<doc>Returns a list containing ids of all links found in current page.

If a link has no id, an empty string will be in the list instead.</doc>
<shortdoc>Returns a list containing ids of all links found in current page.</shortdoc>
</kw>
<kw name="Get Browser Aliases" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="388">
<arguments repr="">
</arguments>
<returntype name="List" typedoc="list">
<type name="str" typedoc="string"/>
</returntype>
<doc>Returns aliases of all active browser that has an alias as NormalizedDict.
The dictionary contains the aliases as keys and the index as value.
This can be accessed as dictionary ``${aliases.key}`` or as list ``@{aliases}[0]``.

Example:
| `Open Browser` | https://example.com   | alias=BrowserA | |
| `Open Browser` | https://example.com   | alias=BrowserB | |
| &amp;{aliases}     | `Get Browser Aliases` |                | # &amp;{aliases} = { BrowserA=1|BrowserB=2 } |
| `Log`          | ${aliases.BrowserA}   |                | # logs ``1`` |
| FOR            | ${alias}              | IN             | @{aliases} |
|                | `Log`                 | ${alias}       | # logs ``BrowserA`` and ``BrowserB`` |
| END            |                       |                | |

See `Switch Browser` for more information and examples.

New in SeleniumLibrary 4.0</doc>
<shortdoc>Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary ``${aliases.key}`` or as list ``@{aliases}[0]``.</shortdoc>
</kw>
<kw name="Get Browser Capabilities" lineno="1975">
<arguments repr="">
</arguments>
<returntype name="dict" typedoc="dictionary"/>
<doc>Get dictionary of browser properties

Example:

| ${caps}= | Get Browser Capabilities |</doc>
<shortdoc>Get dictionary of browser properties</shortdoc>
</kw>
<kw name="Get Browser Ids" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="371">
<arguments repr="">
</arguments>
<returntype name="List" typedoc="list">
<type name="str" typedoc="string"/>
</returntype>
<doc>Returns index of all active browser as list.

Example:
| @{browser_ids}= | Get Browser Ids   |                   |                |
| FOR             | ${id}             | IN                | @{browser_ids} |
|                 | @{window_titles}= | Get Window Titles | browser=${id}  |
|                 | Log               | Browser ${id} has these windows: ${window_titles} | |
| END             |                   |                   |                |

See `Switch Browser` for more information and examples.

New in SeleniumLibrary 4.0</doc>
<shortdoc>Returns index of all active browser as list.</shortdoc>
</kw>
<kw name="Get Cookie" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\cookie.py" lineno="97">
<arguments repr="name: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name: str">
<name>name</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="CookieInformation"/>
<doc>Returns information of cookie with ``name`` as an object.

If no cookie is found with ``name``, keyword fails. The cookie object
contains details about the cookie. Attributes available in the object
are documented in the table below.

| = Attribute = |             = Explanation =                                |
| name          | The name of a cookie.                                      |
| value         | Value of the cookie.                                       |
| path          | Indicates a URL path, for example ``/``.                   |
| domain        | The domain, the cookie is visible to.                      |
| secure        | When true, the cookie is only used with HTTPS connections. |
| httpOnly      | When true, the cookie is not accessible via JavaScript.    |
| expiry        | Python datetime object indicating when the cookie expires. |
| extra         | Possible attributes outside of the WebDriver specification |

See the
[https://w3c.github.io/webdriver/#cookies|WebDriver specification]
for details about the cookie information.
Notice that ``expiry`` is specified as a
[https://docs.python.org/3/library/datetime.html#datetime.datetime|datetime object],
not as seconds since Unix Epoch like WebDriver natively does.

In some cases, example when running a browser in the cloud, it is possible that
the cookie contains other attributes than is defined in the
[https://w3c.github.io/webdriver/#cookies|WebDriver specification].
These other attributes are available in an ``extra`` attribute in the cookie
object and it contains a dictionary of the other attributes. The ``extra``
attribute is new in SeleniumLibrary 4.0.

Example:
| `Add Cookie`      | foo             | bar |
| ${cookie} =       | `Get Cookie`    | foo |
| `Should Be Equal` | ${cookie.name}  | foo |
| `Should Be Equal` | ${cookie.value} | bar |
| `Should Be True`  | ${cookie.expiry.year} &gt; 2017 |

New in SeleniumLibrary 3.0.</doc>
<shortdoc>Returns information of cookie with ``name`` as an object.</shortdoc>
</kw>
<kw name="Get Cookies" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\cookie.py" lineno="70">
<arguments repr="as_dict: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="as_dict: bool = False">
<name>as_dict</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<returntype name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="dict" typedoc="dictionary"/>
</returntype>
<doc>Returns all cookies of the current page.

If ``as_dict`` argument evaluates as false, see `Boolean arguments`
for more details, then cookie information is returned as
a single string in format ``name1=value1; name2=value2; name3=value3``.
When ``as_dict`` argument evaluates as true, cookie information
is returned as Robot Framework dictionary format. The string format
can be used, for example, for logging purposes or in headers when
sending HTTP requests. The dictionary format is helpful when
the result can be passed to requests library's Create Session
keyword's optional cookies parameter.

The `` as_dict`` argument is new in SeleniumLibrary 3.3</doc>
<shortdoc>Returns all cookies of the current page.</shortdoc>
</kw>
<kw name="Get Dom Attribute" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="419">
<arguments repr="locator: WebElement | str, attribute: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="attribute: str">
<name>attribute</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Returns the value of ``attribute`` from the element ``locator``. `Get DOM Attribute` keyword
only returns attributes declared within the element's HTML markup.  If the requested attribute
is not there, the keyword returns ${None}.

See the `Locating elements` section for details about the locator
syntax.

Example:
| ${id}= | `Get DOM Attribute` | css:h1 | id |</doc>
<shortdoc>Returns the value of ``attribute`` from the element ``locator``. `Get DOM Attribute` keyword only returns attributes declared within the element's HTML markup.  If the requested attribute is not there, the keyword returns ${None}.</shortdoc>
</kw>
<kw name="Get Element Attribute" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="401">
<arguments repr="locator: WebElement | str, attribute: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="attribute: str">
<name>attribute</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Returns the value of ``attribute`` from the element ``locator``.

See the `Locating elements` section for details about the locator
syntax.

Example:
| ${id}= | `Get Element Attribute` | css:h1 | id |

Passing attribute name as part of the ``locator`` was removed
in SeleniumLibrary 3.2. The explicit ``attribute`` argument
should be used instead.</doc>
<shortdoc>Returns the value of ``attribute`` from the element ``locator``.</shortdoc>
</kw>
<kw name="Get Element Count" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1132">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="int" typedoc="integer"/>
<doc>Returns the number of elements matching ``locator``.

If you wish to assert the number of matching elements, use
`Page Should Contain Element` with ``limit`` argument. Keyword will
always return an integer.

Example:
| ${count} =       | `Get Element Count` | name:div_name  |
| `Should Be True` | ${count} &gt; 2        |                |

New in SeleniumLibrary 3.0.</doc>
<shortdoc>Returns the number of elements matching ``locator``.</shortdoc>
</kw>
<kw name="Get Element Size" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="496">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="Tuple" typedoc="tuple">
<type name="int" typedoc="integer"/>
<type name="int" typedoc="integer"/>
</returntype>
<doc>Returns width and height of the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.

Both width and height are returned as integers.

Example:
| ${width} | ${height} = | `Get Element Size` | css:div#container |</doc>
<shortdoc>Returns width and height of the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Get Element Status" lineno="1918">
<arguments repr="locator: WebElement | ShadowRoot | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="dict" typedoc="dictionary"/>
<doc>Return dictionary containing element status of:

    - visible
    - enabled
    - disabled
    - focused

``locator`` element locator

Example:

| &amp;{res}  | Get Element Status | class:special |
| Log     | ${res.visible} |
| Log     | ${res.enabled} |
| Log     | ${res.disabled} |
| Log     | ${res.focused} |</doc>
<shortdoc>Return dictionary containing element status of:</shortdoc>
</kw>
<kw name="Get Horizontal Position" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="482">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="int" typedoc="integer"/>
<doc>Returns the horizontal position of the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.

The position is returned in pixels off the left side of the page,
as an integer.

See also `Get Vertical Position`.</doc>
<shortdoc>Returns the horizontal position of the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Get List Items" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="27">
<arguments repr="locator: WebElement | str, values: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="values: bool = False">
<name>values</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<returntype name="List" typedoc="list">
<type name="str" typedoc="string"/>
</returntype>
<doc>Returns all labels or values of selection list ``locator``.

See the `Locating elements` section for details about the locator
syntax.

Returns visible labels by default, but values can be returned by
setting the ``values`` argument to a true value (see `Boolean
arguments`).

Example:
| ${labels} = | `Get List Items` | mylist              |             |
| ${values} = | `Get List Items` | css:#example select | values=True |

Support to return values is new in SeleniumLibrary 3.0.</doc>
<shortdoc>Returns all labels or values of selection list ``locator``.</shortdoc>
</kw>
<kw name="Get Location" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="427">
<arguments repr="">
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Returns the current browser window URL.</doc>
<shortdoc>Returns the current browser window URL.</shortdoc>
</kw>
<kw name="Get Locations" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="166">
<arguments repr="browser: str = CURRENT">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = CURRENT">
<name>browser</name>
<type name="str" typedoc="string"/>
<default>CURRENT</default>
</arg>
</arguments>
<returntype name="List" typedoc="list">
<type name="str" typedoc="string"/>
</returntype>
<doc>Returns and logs URLs of all windows of the selected browser.

*Browser Scope:*

The ``browser`` argument specifies the browser that shall return
its windows information.

- ``browser`` can be ``index_or_alias`` like in `Switch Browser`.

- If ``browser`` is ``CURRENT`` (default, case-insensitive)
  the currently active browser is selected.

- If ``browser`` is ``ALL`` (case-insensitive)
  the window information of all windows of all opened browsers are returned.</doc>
<shortdoc>Returns and logs URLs of all windows of the selected browser.</shortdoc>
</kw>
<kw name="Get Property" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="436">
<arguments repr="locator: WebElement | str, property: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="property: str">
<name>property</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Returns the value of ``property`` from the element ``locator``.

See the `Locating elements` section for details about the locator
syntax.

Example:
| ${text_length}= | `Get Property` | css:h1 | text_length |</doc>
<shortdoc>Returns the value of ``property`` from the element ``locator``.</shortdoc>
</kw>
<kw name="Get Selected List Label" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="52">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Returns the label of selected option from selection list ``locator``.

If there are multiple selected options, the label of the first option
is returned.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Returns the label of selected option from selection list ``locator``.</shortdoc>
</kw>
<kw name="Get Selected List Labels" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="65">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="List" typedoc="list">
<type name="str" typedoc="string"/>
</returntype>
<doc>Returns labels of selected options from selection list ``locator``.

Starting from SeleniumLibrary 3.0, returns an empty list if there
are no selections. In earlier versions, this caused an error.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Returns labels of selected options from selection list ``locator``.</shortdoc>
</kw>
<kw name="Get Selected List Value" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="78">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Returns the value of selected option from selection list ``locator``.

If there are multiple selected options, the value of the first option
is returned.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Returns the value of selected option from selection list ``locator``.</shortdoc>
</kw>
<kw name="Get Selected List Values" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="91">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="List" typedoc="list">
<type name="str" typedoc="string"/>
</returntype>
<doc>Returns values of selected options from selection list ``locator``.

Starting from SeleniumLibrary 3.0, returns an empty list if there
are no selections. In earlier versions, this caused an error.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Returns values of selected options from selection list ``locator``.</shortdoc>
</kw>
<kw name="Get Selenium Implicit Wait" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="549">
<arguments repr="">
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Gets the implicit wait value used by Selenium.

The value is returned as a human-readable string like ``1 second``.

See the `Implicit wait` section above for more information.</doc>
<shortdoc>Gets the implicit wait value used by Selenium.</shortdoc>
</kw>
<kw name="Get Selenium Page Load Timeout" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="559">
<arguments repr="">
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Gets the time to wait for a page load to complete
before raising a timeout exception.

The value is returned as a human-readable string like ``1 second``.

See the `Page load` section above for more information.

New in SeleniumLibrary 6.1</doc>
<shortdoc>Gets the time to wait for a page load to complete before raising a timeout exception.</shortdoc>
</kw>
<kw name="Get Selenium Speed" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="529">
<arguments repr="">
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Gets the delay that is waited after each Selenium command.

The value is returned as a human-readable string like ``1 second``.

See the `Selenium Speed` section above for more information.</doc>
<shortdoc>Gets the delay that is waited after each Selenium command.</shortdoc>
</kw>
<kw name="Get Selenium Timeout" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="539">
<arguments repr="">
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Gets the timeout that is used by various keywords.

The value is returned as a human-readable string like ``1 second``.

See the `Timeout` section above for more information.</doc>
<shortdoc>Gets the timeout that is used by various keywords.</shortdoc>
</kw>
<kw name="Get Session Id" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="409">
<arguments repr="">
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Returns the currently active browser session id.

New in SeleniumLibrary 3.2</doc>
<shortdoc>Returns the currently active browser session id.</shortdoc>
</kw>
<kw name="Get Source" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="417">
<arguments repr="">
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Returns the entire HTML source of the current page or frame.</doc>
<shortdoc>Returns the entire HTML source of the current page or frame.</shortdoc>
</kw>
<kw name="Get Table Cell" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="26">
<arguments repr="locator: WebElement | str, row: int, column: int, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row: int">
<name>row</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="column: int">
<name>column</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Returns contents of a table cell.

The table is located using the ``locator`` argument and its cell
found using ``row`` and ``column``. See the `Locating elements`
section for details about the locator syntax.

Both row and column indexes start from 1, and header and footer
rows are included in the count. It is possible to refer to rows
and columns from the end by using negative indexes so that -1
is the last row/column, -2 is the second last, and so on.

All ``&lt;th&gt;`` and ``&lt;td&gt;`` elements anywhere in the table are
considered to be cells.

See `Page Should Contain` for an explanation about the ``loglevel``
argument.</doc>
<shortdoc>Returns contents of a table cell.</shortdoc>
</kw>
<kw name="Get Testability Status" lineno="1945">
<arguments repr="">
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Get SeleniumTestability plugin status</doc>
<shortdoc>Get SeleniumTestability plugin status</shortdoc>
</kw>
<kw name="Get Text" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="552">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Returns the text value of the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Returns the text value of the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Get Title" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="422">
<arguments repr="">
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Returns the title of the current page.</doc>
<shortdoc>Returns the title of the current page.</shortdoc>
</kw>
<kw name="Get Value" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="543">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Returns the value attribute of the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Returns the value attribute of the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Get Vertical Position" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="570">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="int" typedoc="integer"/>
<doc>Returns the vertical position of the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.

The position is returned in pixels off the top of the page,
as an integer.

See also `Get Horizontal Position`.</doc>
<shortdoc>Returns the vertical position of the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Get WebElement" lineno="2267">
<arguments repr="locator: WebElement | ShadowRoot | str, parent: WebElement | ShadowRoot | None = None, shadow: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="parent: WebElement | ShadowRoot | None = None">
<name>parent</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="shadow: bool = False">
<name>shadow</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<returntype name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
</returntype>
<doc>Returns the first ``Element`` matching the given ``locator``.

With the ``parent`` parameter you can optionally specify a parent to start the
search from. Set ``shadow`` to ``True`` if you're targeting and expecting a
shadow root in return. Read more on the shadow root:
https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Returns the first ``Element`` matching the given ``locator``.</shortdoc>
</kw>
<kw name="Get WebElements" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="41">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="List" typedoc="list">
<type name="WebElement"/>
</returntype>
<doc>Returns a list of WebElement objects matching the ``locator``.

See the `Locating elements` section for details about the locator
syntax.

Starting from SeleniumLibrary 3.0, the keyword returns an empty
list if there are no matching elements. In previous releases, the
keyword failed in this case.</doc>
<shortdoc>Returns a list of WebElement objects matching the ``locator``.</shortdoc>
</kw>
<kw name="Get Window Handles" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="130">
<arguments repr="browser: str = CURRENT">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = CURRENT">
<name>browser</name>
<type name="str" typedoc="string"/>
<default>CURRENT</default>
</arg>
</arguments>
<returntype name="List" typedoc="list">
<type name="str" typedoc="string"/>
</returntype>
<doc>Returns all child window handles of the selected browser as a list.

Can be used as a list of windows to exclude with `Select Window`.

How to select the ``browser`` scope of this keyword, see `Get Locations`.

Prior to SeleniumLibrary 3.0, this keyword was named `List Windows`.</doc>
<shortdoc>Returns all child window handles of the selected browser as a list.</shortdoc>
</kw>
<kw name="Get Window Identifiers" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="142">
<arguments repr="browser: str = CURRENT">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = CURRENT">
<name>browser</name>
<type name="str" typedoc="string"/>
<default>CURRENT</default>
</arg>
</arguments>
<returntype name="List" typedoc="list"/>
<doc>Returns and logs id attributes of all windows of the selected browser.

How to select the ``browser`` scope of this keyword, see `Get Locations`.</doc>
<shortdoc>Returns and logs id attributes of all windows of the selected browser.</shortdoc>
</kw>
<kw name="Get Window Names" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="150">
<arguments repr="browser: str = CURRENT">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = CURRENT">
<name>browser</name>
<type name="str" typedoc="string"/>
<default>CURRENT</default>
</arg>
</arguments>
<returntype name="List" typedoc="list">
<type name="str" typedoc="string"/>
</returntype>
<doc>Returns and logs names of all windows of the selected browser.

How to select the ``browser`` scope of this keyword, see `Get Locations`.</doc>
<shortdoc>Returns and logs names of all windows of the selected browser.</shortdoc>
</kw>
<kw name="Get Window Position" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="261">
<arguments repr="">
</arguments>
<returntype name="Tuple" typedoc="tuple">
<type name="int" typedoc="integer"/>
<type name="int" typedoc="integer"/>
</returntype>
<doc>Returns current window position.

The position is relative to the top left corner of the screen. Returned
values are integers. See also `Set Window Position`.

Example:
| ${x} | ${y}= | `Get Window Position` |</doc>
<shortdoc>Returns current window position.</shortdoc>
</kw>
<kw name="Get Window Size" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="195">
<arguments repr="inner: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="inner: bool = False">
<name>inner</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<returntype name="Tuple" typedoc="tuple">
<type name="float" typedoc="float"/>
<type name="float" typedoc="float"/>
</returntype>
<doc>Returns current window width and height as integers.

See also `Set Window Size`.

If ``inner`` parameter is set to True, keyword returns
HTML DOM window.innerWidth and window.innerHeight properties.
See `Boolean arguments` for more details on how to set boolean
arguments. The ``inner`` is new in SeleniumLibrary 4.0.

Example:
| ${width} | ${height}= | `Get Window Size` |      |
| ${width} | ${height}= | `Get Window Size` | True |</doc>
<shortdoc>Returns current window width and height as integers.</shortdoc>
</kw>
<kw name="Get Window Titles" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="158">
<arguments repr="browser: str = CURRENT">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = CURRENT">
<name>browser</name>
<type name="str" typedoc="string"/>
<default>CURRENT</default>
</arg>
</arguments>
<returntype name="List" typedoc="list">
<type name="str" typedoc="string"/>
</returntype>
<doc>Returns and logs titles of all windows of the selected browser.

How to select the ``browser`` scope of this keyword, see `Get Locations`.</doc>
<shortdoc>Returns and logs titles of all windows of the selected browser.</shortdoc>
</kw>
<kw name="Go Back" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="513">
<arguments repr="">
</arguments>
<doc>Simulates the user clicking the back button on their browser.</doc>
<shortdoc>Simulates the user clicking the back button on their browser.</shortdoc>
</kw>
<kw name="Go To" lineno="128">
<arguments repr="url: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url: str">
<name>url</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Navigates the current browser window to the provided ``url``.</doc>
<shortdoc>Navigates the current browser window to the provided ``url``.</shortdoc>
</kw>
<kw name="Handle Alert" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\alert.py" lineno="104">
<arguments repr="action: str = ACCEPT, timeout: timedelta | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action: str = ACCEPT">
<name>action</name>
<type name="str" typedoc="string"/>
<default>ACCEPT</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Handles the current alert and returns its message.

By default, the alert is accepted, but this can be controlled
with the ``action`` argument that supports the following
case-insensitive values:

- ``ACCEPT``: Accept the alert i.e. press ``Ok``. Default.
- ``DISMISS``: Dismiss the alert i.e. press ``Cancel``.
- ``LEAVE``: Leave the alert open.

The ``timeout`` argument specifies how long to wait for the alert
to appear. If it is not given, the global default `timeout` is used
instead.

Examples:
| Handle Alert |                |       | # Accept alert.  |
| Handle Alert | action=DISMISS |       | # Dismiss alert. |
| Handle Alert | timeout=10 s   |       | # Use custom timeout and accept alert.  |
| Handle Alert | DISMISS        | 1 min | # Use custom timeout and dismiss alert. |
| ${message} = | Handle Alert   |       | # Accept alert and get its message.     |
| ${message} = | Handle Alert   | LEAVE | # Leave alert open and get its message. |

New in SeleniumLibrary 3.0.</doc>
<shortdoc>Handles the current alert and returns its message.</shortdoc>
</kw>
<kw name="Highlight Elements" lineno="2057">
<arguments repr="locator: WebElement | ShadowRoot | str, width: str = 2px, style: str = dotted, color: str = blue">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="width: str = 2px">
<name>width</name>
<type name="str" typedoc="string"/>
<default>2px</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="style: str = dotted">
<name>style</name>
<type name="str" typedoc="string"/>
<default>dotted</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="color: str = blue">
<name>color</name>
<type name="str" typedoc="string"/>
<default>blue</default>
</arg>
</arguments>
<doc>Highlight all matching elements by locator.

Highlighting is done by adding a colored outline
around the elements with CSS styling.

``locator``  element locator
``width``    highlight outline width
``style``    highlight outline style
``color``    highlight outline color

Example:

| Highlight Elements | xpath://h2 |</doc>
<shortdoc>Highlight all matching elements by locator.</shortdoc>
</kw>
<kw name="Input Password" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="242">
<arguments repr="locator: WebElement | str, password: str, clear: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="password: str">
<name>password</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="clear: bool = True">
<name>clear</name>
<type name="bool" typedoc="boolean"/>
<default>True</default>
</arg>
</arguments>
<doc>Types the given password into the text field identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax. See `Input Text` for ``clear`` argument details.

Difference compared to `Input Text` is that this keyword does not
log the given password on the INFO level. Notice that if you use
the keyword like

| Input Password | password_field | password |

the password is shown as a normal keyword argument. A way to avoid
that is using variables like

| Input Password | password_field | ${PASSWORD} |

Please notice that Robot Framework logs all arguments using
the TRACE level and tests must not be executed using level below
DEBUG if the password should not be logged in any format.

The `clear` argument is new in SeleniumLibrary 4.0. Hiding password
logging from Selenium logs is new in SeleniumLibrary 4.2.</doc>
<shortdoc>Types the given password into the text field identified by ``locator``.</shortdoc>
</kw>
<kw name="Input Text" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="272">
<arguments repr="locator: WebElement | str, text: str, clear: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="clear: bool = True">
<name>clear</name>
<type name="bool" typedoc="boolean"/>
<default>True</default>
</arg>
</arguments>
<doc>Types the given ``text`` into the text field identified by ``locator``.

When ``clear`` is true, the input element is cleared before
the text is typed into the element. When false, the previous text
is not cleared from the element. Use `Input Password` if you
do not want the given ``text`` to be logged.

If [https://github.com/SeleniumHQ/selenium/wiki/Grid2|Selenium Grid]
is used and the ``text`` argument points to a file in the file system,
then this keyword prevents the Selenium to transfer the file to the
Selenium Grid hub. Instead, this keyword will send the ``text`` string
as is to the element. If a file should be transferred to the hub and
upload should be performed, please use `Choose File` keyword.

See the `Locating elements` section for details about the locator
syntax. See the `Boolean arguments` section how Boolean values are
handled.

Disabling the file upload the Selenium Grid node and the `clear`
argument are new in SeleniumLibrary 4.0</doc>
<shortdoc>Types the given ``text`` into the text field identified by ``locator``.</shortdoc>
</kw>
<kw name="Input Text Into Alert" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\alert.py" lineno="34">
<arguments repr="text: str, action: str = ACCEPT, timeout: timedelta | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action: str = ACCEPT">
<name>action</name>
<type name="str" typedoc="string"/>
<default>ACCEPT</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Types the given ``text`` into an input field in an alert.

The alert is accepted by default, but that behavior can be controlled
by using the ``action`` argument same way as with `Handle Alert`.

``timeout`` specifies how long to wait for the alert to appear.
If it is not given, the global default `timeout` is used instead.

New in SeleniumLibrary 3.0.</doc>
<shortdoc>Types the given ``text`` into an input field in an alert.</shortdoc>
</kw>
<kw name="Input Text When Element Is Visible" lineno="1245">
<arguments repr="locator: WebElement | ShadowRoot | str, text: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Input text into locator after it has become visible.

``locator`` element locator

``text`` insert text to locator

Example:

| Input Text When Element Is Visible | //input[@id="freetext"]  | my feedback |</doc>
<shortdoc>Input text into locator after it has become visible.</shortdoc>
</kw>
<kw name="Is Alert Present" lineno="1353">
<arguments repr="text: str | None = None, action: str = ACCEPT">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="text: str | None = None">
<name>text</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="action: str = ACCEPT">
<name>action</name>
<type name="str" typedoc="string"/>
<default>ACCEPT</default>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is alert box present, which can be identified with text
and action can also be done which by default is ACCEPT.

Other possible actions are DISMISS and LEAVE.

``text`` check if alert text is matching to this, if `None`
will check if alert is present at all

``action`` possible action if alert is present, default ACCEPT

Example:

| ${res} | Is Alert Present | alert message |</doc>
<shortdoc>Is alert box present, which can be identified with text and action can also be done which by default is ACCEPT.</shortdoc>
</kw>
<kw name="Is Checkbox Selected" lineno="1414">
<arguments repr="locator: WebElement | ShadowRoot | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is checkbox selected

``locator`` element locator

Example:

| ${res} |  Is Checkbox Selected  | id:taxes-paid |</doc>
<shortdoc>Is checkbox selected</shortdoc>
</kw>
<kw name="Is Element Attribute Equal To" lineno="1333">
<arguments repr="locator: WebElement | ShadowRoot | str, attribute: str, expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="attribute: str">
<name>attribute</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is element attribute equal to expected value

``locator`` element locator

``attribute`` element attribute to check for

``expected`` is attribute value equal to this

Example:

| ${res} | Is Element Attribute Equal To | h1 | id | main |</doc>
<shortdoc>Is element attribute equal to expected value</shortdoc>
</kw>
<kw name="Is Element Disabled" lineno="1297">
<arguments repr="locator: WebElement | ShadowRoot | str, missing_ok: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="missing_ok: bool = True">
<name>missing_ok</name>
<type name="bool" typedoc="boolean"/>
<default>True</default>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is element disabled

``locator`` element locator
``missing_ok`` default True, set to False if keyword should
Fail if element does not exist

Example:

| ${res} | Is Element Disabled | //input[@type="submit"] |</doc>
<shortdoc>Is element disabled</shortdoc>
</kw>
<kw name="Is Element Enabled" lineno="1261">
<arguments repr="locator: WebElement | ShadowRoot | str, missing_ok: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="missing_ok: bool = True">
<name>missing_ok</name>
<type name="bool" typedoc="boolean"/>
<default>True</default>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is element enabled

``locator`` element locator
``missing_ok`` default True, set to False if keyword should
Fail if element does not exist

Example:

| ${res} | Is Element Enabled | input.field1 |</doc>
<shortdoc>Is element enabled</shortdoc>
</kw>
<kw name="Is Element Focused" lineno="1315">
<arguments repr="locator: WebElement | ShadowRoot | str, missing_ok: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="missing_ok: bool = True">
<name>missing_ok</name>
<type name="bool" typedoc="boolean"/>
<default>True</default>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is element focused

``locator`` element locator
``missing_ok`` default True, set to False if keyword should
Fail if element does not exist

Example:

| ${res} | Is Element Focused | //input[@id="freetext"] |</doc>
<shortdoc>Is element focused</shortdoc>
</kw>
<kw name="Is Element Text" lineno="1468">
<arguments repr="locator: WebElement | ShadowRoot | str, expected: str, ignore_case: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is element text expected

``locator`` element locator

``expected`` expected element text

``ignore_case`` should check be case insensitive, default `False`

Example:

| ${res} | Is Element Text | id:name | john doe |
| ${res} | Is Element Text | id:name | john doe | ignore_case=True |</doc>
<shortdoc>Is element text expected</shortdoc>
</kw>
<kw name="Is Element Visible" lineno="1279">
<arguments repr="locator: WebElement | ShadowRoot | str, missing_ok: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="missing_ok: bool = True">
<name>missing_ok</name>
<type name="bool" typedoc="boolean"/>
<default>True</default>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is element visible

``locator`` element locator
``missing_ok`` default True, set to False if keyword should
Fail if element does not exist

Example:

| ${res} | Is Element Visible | id:confirmation |</doc>
<shortdoc>Is element visible</shortdoc>
</kw>
<kw name="Is List Selected" lineno="1508">
<arguments repr="locator: WebElement | ShadowRoot | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is any option selected in the

``locator`` element locator

Example:

| ${res} | Is List Selected | id:cars |</doc>
<shortdoc>Is any option selected in the</shortdoc>
</kw>
<kw name="Is List Selection" lineno="1492">
<arguments repr="locator: WebElement | ShadowRoot | str, *expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is list selected with expected values

``locator`` element locator

``expected`` expected selected options

Example:

| ${res} | Is List Selection | id:cars | Ford |</doc>
<shortdoc>Is list selected with expected values</shortdoc>
</kw>
<kw name="Is Location" lineno="1523">
<arguments repr="url: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url: str">
<name>url</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is current URL expected url

``url`` expected current URL

Example:

| Open Available Browser | https://www.robocorp.com |
| ${res} | Is Location | https://www.robocorp.com |</doc>
<shortdoc>Is current URL expected url</shortdoc>
</kw>
<kw name="Is Radio Button Selected" lineno="1699">
<arguments repr="group_name: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="group_name: str">
<name>group_name</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is any radio button selected in the button group

``group_name`` radio button group name

Example:

| ${res} | Is Radio Button Selected | group_name=gender |</doc>
<shortdoc>Is any radio button selected in the button group</shortdoc>
</kw>
<kw name="Is Radio Button Set To" lineno="1683">
<arguments repr="group_name: str, value: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="group_name: str">
<name>group_name</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: str">
<name>value</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is radio button group set to expected value

``group_name`` radio button group name

``value`` expected value

Example:

| ${res} | Is Radio Button Set To | group_name=gender | value=female |</doc>
<shortdoc>Is radio button group set to expected value</shortdoc>
</kw>
<kw name="Is Textarea Value" lineno="1824">
<arguments repr="locator: WebElement | ShadowRoot | str, expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is textarea matching expected value

``locator`` element locator

``expected`` expected textarea value

Example:

| ${res} | Is Textarea Value | //textarea | Yours sincerely |</doc>
<shortdoc>Is textarea matching expected value</shortdoc>
</kw>
<kw name="Is Textfield Value" lineno="1872">
<arguments repr="locator: WebElement | ShadowRoot | str, expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is textfield value expected

``locator`` element locator

``expected`` expected textfield value

Example:

| ${res} | Is Textfield Value | id:lname | Lastname |</doc>
<shortdoc>Is textfield value expected</shortdoc>
</kw>
<kw name="Is Title" lineno="1888">
<arguments repr="title: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="title: str">
<name>title</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="bool" typedoc="boolean"/>
<doc>Is page title expected

``title`` expected title value

Example:

| ${res} | Is Title | Webpage title text |</doc>
<shortdoc>Is page title expected</shortdoc>
</kw>
<kw name="List Selection Should Be" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="104">
<arguments repr="locator: WebElement | str, *expected: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Verifies selection list ``locator`` has ``expected`` options selected.

It is possible to give expected options both as visible labels and
as values. Starting from SeleniumLibrary 3.0, mixing labels and
values is not possible. Order of the selected options is not
validated.

If no expected options are given, validates that the list has
no selections. A more explicit alternative is using `List Should
Have No Selections`.

See the `Locating elements` section for details about the locator
syntax.

Examples:
| `List Selection Should Be` | gender    | Female          |        |
| `List Selection Should Be` | interests | Test Automation | Python |</doc>
<shortdoc>Verifies selection list ``locator`` has ``expected`` options selected.</shortdoc>
</kw>
<kw name="List Should Have No Selections" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="141">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Verifies selection list ``locator`` has no options selected.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies selection list ``locator`` has no options selected.</shortdoc>
</kw>
<kw name="Location Should Be" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="432">
<arguments repr="url: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url: str">
<name>url</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Verifies that the current URL is exactly ``url``.

The ``url`` argument contains the exact url that should exist in browser.

The ``message`` argument can be used to override the default error
message.

``message`` argument is new in SeleniumLibrary 3.2.0.</doc>
<shortdoc>Verifies that the current URL is exactly ``url``.</shortdoc>
</kw>
<kw name="Location Should Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="450">
<arguments repr="expected: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Verifies that the current URL contains ``expected``.

The ``expected`` argument contains the expected value in url.

The ``message`` argument can be used to override the default error
message.

``message`` argument is new in SeleniumLibrary 3.2.0.</doc>
<shortdoc>Verifies that the current URL contains ``expected``.</shortdoc>
</kw>
<kw name="Log Location" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="471">
<arguments repr="">
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Logs and returns the current browser window URL.</doc>
<shortdoc>Logs and returns the current browser window URL.</shortdoc>
</kw>
<kw name="Log Source" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="478">
<arguments repr="loglevel: str = INFO">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = INFO">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>INFO</default>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Logs and returns the HTML source of the current page or frame.

The ``loglevel`` argument defines the used log level. Valid log
levels are ``WARN``, ``INFO`` (default), ``DEBUG``, ``TRACE``
and ``NONE`` (no logging).</doc>
<shortdoc>Logs and returns the HTML source of the current page or frame.</shortdoc>
</kw>
<kw name="Log Title" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="490">
<arguments repr="">
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Logs and returns the title of the current page.</doc>
<shortdoc>Logs and returns the title of the current page.</shortdoc>
</kw>
<kw name="Maximize Browser Window" lineno="172">
<arguments repr="*args, force: bool = False, **kwargs">
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
<arg kind="NAMED_ONLY" required="false" repr="force: bool = False">
<name>force</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**kwargs">
<name>kwargs</name>
</arg>
</arguments>
<doc>Maximizes current browser window.

The window won't be maximized in headless mode since there's no way to know the
screen size to set the window size to in the absence of an UI. Use the
``Set Window Size`` keyword with a specific side or set the `force` param to
`True` if you still want to enforce this undefined behaviour.</doc>
<shortdoc>Maximizes current browser window.</shortdoc>
</kw>
<kw name="Minimize Browser Window" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="190">
<arguments repr="">
</arguments>
<doc>Minimizes current browser window.</doc>
<shortdoc>Minimizes current browser window.</shortdoc>
</kw>
<kw name="Mouse Down" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="818">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Simulates pressing the left mouse button on the element ``locator``.

See the `Locating elements` section for details about the locator
syntax.

The element is pressed without releasing the mouse button.

See also the more specific keywords `Mouse Down On Image` and
`Mouse Down On Link`.</doc>
<shortdoc>Simulates pressing the left mouse button on the element ``locator``.</shortdoc>
</kw>
<kw name="Mouse Down On Image" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1084">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Simulates a mouse down event on an image identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, images are searched
using ``id``, ``name``, ``src`` and ``alt``.</doc>
<shortdoc>Simulates a mouse down event on an image identified by ``locator``.</shortdoc>
</kw>
<kw name="Mouse Down On Link" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1036">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Simulates a mouse down event on a link identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, links are searched
using ``id``, ``name``, ``href`` and the link text.</doc>
<shortdoc>Simulates a mouse down event on a link identified by ``locator``.</shortdoc>
</kw>
<kw name="Mouse Out" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="835">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Simulates moving the mouse away from the element ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Simulates moving the mouse away from the element ``locator``.</shortdoc>
</kw>
<kw name="Mouse Over" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="852">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Simulates hovering the mouse over the element ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Simulates hovering the mouse over the element ``locator``.</shortdoc>
</kw>
<kw name="Mouse Up" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="864">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Simulates releasing the left mouse button on the element ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Simulates releasing the left mouse button on the element ``locator``.</shortdoc>
</kw>
<kw name="Open Available Browser" lineno="350">
<arguments repr="url: str | None = None, use_profile: bool = False, headless: bool | str = AUTO, maximized: bool = False, browser_selection: Any = AUTO, alias: str | None = None, profile_name: str | None = None, profile_path: str | None = None, preferences: dict | None = None, proxy: str | None = None, user_agent: str | None = None, download: Any = AUTO, options: ArgOptions | str | Dict[str, str | List | Dict] | None = None, port: int | None = None, sandbox: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="url: str | None = None">
<name>url</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="use_profile: bool = False">
<name>use_profile</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="headless: bool | str = AUTO">
<name>headless</name>
<type name="Union" union="true">
<type name="bool" typedoc="boolean"/>
<type name="str" typedoc="string"/>
</type>
<default>AUTO</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="maximized: bool = False">
<name>maximized</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser_selection: Any = AUTO">
<name>browser_selection</name>
<type name="Any" typedoc="Any"/>
<default>AUTO</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="alias: str | None = None">
<name>alias</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="profile_name: str | None = None">
<name>profile_name</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="profile_path: str | None = None">
<name>profile_path</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="preferences: dict | None = None">
<name>preferences</name>
<type name="Union" union="true">
<type name="dict" typedoc="dictionary"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="proxy: str | None = None">
<name>proxy</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="user_agent: str | None = None">
<name>user_agent</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="download: Any = AUTO">
<name>download</name>
<type name="Any" typedoc="Any"/>
<default>AUTO</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="options: ArgOptions | str | Dict[str, str | List | Dict] | None = None">
<name>options</name>
<type name="Union" union="true">
<type name="ArgOptions"/>
<type name="str" typedoc="string"/>
<type name="Dict" typedoc="dictionary">
<type name="str" typedoc="string"/>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="List" typedoc="list"/>
<type name="Dict" typedoc="dictionary"/>
</type>
</type>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="port: int | None = None">
<name>port</name>
<type name="Union" union="true">
<type name="int" typedoc="integer"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sandbox: bool = False">
<name>sandbox</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<returntype name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="int" typedoc="integer"/>
</returntype>
<doc>Attempts to open a browser on the user's device from a set of
supported browsers. Automatically downloads a corresponding webdriver
if none is already installed.

Currently supported browsers: Chrome, Firefox, Edge, ChromiumEdge, Safari, Ie

Optionally can be given a ``url`` as the first argument,
to open the browser directly to the given page.

Returns either a generated index or a custom ``alias`` for the
browser instance. The returned value can be used to refer to that
specific browser instance in other keywords.

If the browser should start in a maximized window, this can be
enabled with the argument ``maximized``, but is disabled by default.

For certain applications it might also be required to force a
certain user-agent string for Selenium, which can be overridden
with the ``user_agent`` argument.

WebDriver creation can be customized with ``options``. This accepts a class
instance (e.g. ``ChromeOptions``), a string like
`add_argument("--incognito");set_capability("acceptInsecureCerts", True)` or
even a simple dictionary like:
`{"arguments": ["--incognito"], "capabilities": {"acceptInsecureCerts": True}}`

A custom ``port`` can be provided to start the browser webdriver without a
randomly picked one. Make sure you provide every time a unique system-available
local port if you plan to have multiple browsers being controlled in parallel.

For incompatible web apps designed to work in Internet Explorer only, Edge can
run in IE mode by simply setting `ie` in the ``browser_selection`` param.
Robot example: https://github.com/robocorp/example-ie-mode-edge

The ``sandbox`` argument can be used to enable the sandbox mode for the browser.
By default browser is opened in `--no-sandbox` mode, but this started to cause
issues on Chromium version 124. The `--no-sandbox` flag is set by default to
preserve the older behavior.

Example:

| Open Available Browser | https://www.robocorp.com |
| ${index}= | Open Available Browser | ${URL} | browser_selection=opera,firefox |
| Open Available Browser | ${URL} | headless=${True} | alias=HeadlessBrowser |
| Open Available Browser | ${URL} | options=add_argument("user-data-dir=path/to/data");add_argument("--incognito") |
| Open Available Browser | ${URL} | port=${8888} |

== Browser order ==

The default order of supported browsers is based on the operating system
and is as follows:

| Platform    | Default order                         |
| ``Windows`` | Chrome, Firefox, Edge         |
| ``Linux``   | Chrome, Firefox, Edge         |
| ``Darwin``  | Chrome, Firefox, Edge, Safari |

The order can be overridden with a custom list by using the argument
``browser_selection``. The argument can be either a comma-separated
string or a list object.

Example:

| Open Available Browser | ${URL} | browser_selection=ie |

== Webdriver download ==

The library can (if requested) automatically download webdrivers
for all the supported browsers. This can be controlled with the argument
``download``.

If the value is ``False``, it will only attempt to start
webdrivers found from the system PATH.

If the value is ``True``, it will download a webdriver that matches
the current browser.

By default the argument has the value ``AUTO``, which means it
first attempts to use webdrivers found in PATH and if that fails
forces a webdriver download.

== Opening process ==

1. Parse list of preferred browser order. If not given, use values
   from above table.

2. Loop through listed browsers:

    a. Set the webdriver options for the browser.

    b. Download webdriver (if requested).

    c. Attempt to launch the webdriver and stop the loop if successful.

3. Return index/alias if webdriver was created, or raise an exception
   if no browsers were successfully opened.

== Headless mode ==

If required, the browser can also run `headless`, which means that
it does not create a visible window. Generally a headless browser is
slightly faster, but might not support all features a normal browser does.

One typical use-case for headless mode is in cloud containers,
where there is no display available. It also prevents manual interaction
with the browser, which can be either a benefit or a drawback depending on
the context.

It can be explicitly enabled or disabled with the argument ``headless``.
By default, it will be disabled, unless it detects that it is running
in a Linux environment without a display, e.g. a container or if the
`RPA_HEADLESS_MODE` env var is set to a number different than `0`.

== Chromium options ==

Some features are currently available only for Chromium-based browsers.
This includes using an existing user profile. By default Selenium
uses a new profile for each session, but it can use an existing
one by enabling the ``use_profile`` argument.

If a custom profile is stored somewhere outside of the default location,
the path to the profiles directory and the name of the profile can
be controlled with ``profile_path`` and ``profile_name`` respectively. Keep in
mind that the ``profile_path`` for the Chrome browser for e.g. ends usually
with "Chrome", "User Data" or "google-chrome" (based on platform) and the
``profile_name`` is a directory relative to ``profile_path``, usually named
"Profile 1", "Profile 2" etc. (and not as your visible name in the Chrome
browser). Similar behavior is observed with Edge as well.

Example:

| Open Available Browser | https://www.robocorp.com | use_profile=${True} |
| Open Available Browser | https://www.robocorp.com | use_profile=${True} | profile_name=Default |
| Open Available Browser | https://www.robocorp.com | use_profile=${True} | profile_name=Profile 2 |
| Open Available Browser | https://www.robocorp.com | use_profile=${True} | profile_name=Profile 1 | profile_path=path/to/custom/user_data_dir |

Profile preferences can be further overridden with the ``preferences``
argument by giving a dictionary of key/value pairs.

Chromium-based browsers can additionally connect through a ``proxy``, which
should be given as either a local or remote address.</doc>
<shortdoc>Attempts to open a browser on the user's device from a set of supported browsers. Automatically downloads a corresponding webdriver if none is already installed.</shortdoc>
</kw>
<kw name="Open Browser" lineno="135">
<arguments repr="url: str | None = None, browser: str = firefox, alias: str | None = None, remote_url: bool | str = False, desired_capabilities: dict | None | str = None, ff_profile_dir: FirefoxProfile | str | None = None, options: ArgOptions | str | Dict[str, str | List | Dict] | None = None, service_log_path: str | None = None, executable_path: str | None = None, service: Any | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="url: str | None = None">
<name>url</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = firefox">
<name>browser</name>
<type name="str" typedoc="string"/>
<default>firefox</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="alias: str | None = None">
<name>alias</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="remote_url: bool | str = False">
<name>remote_url</name>
<type name="Union" union="true">
<type name="bool" typedoc="boolean"/>
<type name="str" typedoc="string"/>
</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="desired_capabilities: dict | None | str = None">
<name>desired_capabilities</name>
<type name="Union" union="true">
<type name="dict" typedoc="dictionary"/>
<type name="None" typedoc="None"/>
<type name="str" typedoc="string"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ff_profile_dir: FirefoxProfile | str | None = None">
<name>ff_profile_dir</name>
<type name="Union" union="true">
<type name="FirefoxProfile"/>
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="options: ArgOptions | str | Dict[str, str | List | Dict] | None = None">
<name>options</name>
<type name="Union" union="true">
<type name="ArgOptions"/>
<type name="str" typedoc="string"/>
<type name="Dict" typedoc="dictionary">
<type name="str" typedoc="string"/>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="List" typedoc="list"/>
<type name="Dict" typedoc="dictionary"/>
</type>
</type>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="service_log_path: str | None = None">
<name>service_log_path</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="executable_path: str | None = None">
<name>executable_path</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="service: Any | None = None">
<name>service</name>
<type name="Union" union="true">
<type name="Any" typedoc="Any"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Opens a new browser instance to the optional ``url``.

The ``browser`` argument specifies which browser to use. The
supported browsers are listed in the table below. The browser names
are case-insensitive and some browsers have multiple supported names.

|    = Browser =    |        = Name(s) =       |
| Firefox           | firefox, ff              |
| Google Chrome     | googlechrome, chrome, gc |
| Headless Firefox  | headlessfirefox          |
| Headless Chrome   | headlesschrome           |
| Internet Explorer | internetexplorer, ie     |
| Edge              | edge                     |
| Safari            | safari                   |

To be able to actually use one of these browsers, you need to have
a matching Selenium browser driver available. See the
[https://github.com/robotframework/SeleniumLibrary#browser-drivers|
project documentation] for more details.

After opening the browser, it is possible to use optional
``url`` to navigate the browser to the desired address.

Examples:
| `Open Browser` | http://example.com | Chrome  |                                         |
| `Open Browser` | http://example.com | Firefox | alias=Firefox                           |
| `Open Browser` | http://example.com | Edge    | remote_url=http://127.0.0.1:4444/wd/hub |
| `Open Browser` | about:blank        |         |                                         |
| `Open Browser` | browser=Chrome     |         |                                         |

Optional ``alias`` is an alias given for this browser instance and
it can be used for switching between browsers. When same ``alias``
is given with two `Open Browser` keywords, the first keyword will
open a new browser, but the second one will switch to the already
opened browser and will not open a new browser. The ``alias``
definition overrules ``browser`` definition. When same ``alias``
is used but a different ``browser`` is defined, then switch to
a browser with same alias is done and new browser is not opened.
An alternative approach for switching is using an index returned
by this keyword. These indices start from 1, are incremented when new
browsers are opened, and reset back to 1 when `Close All Browsers`
is called. See `Switch Browser` for more information and examples.

Alias examples:
| ${1_index} =    | `Open Browser` | http://example.com | Chrome  | alias=Chrome     | # Opens new browser because alias is new.         |
| ${2_index} =    | `Open Browser` | http://example.com | Firefox |                  | # Opens new browser because alias is not defined. |
| ${3_index} =    | `Open Browser` | http://example.com | Chrome  | alias=Chrome     | # Switches to the browser with Chrome alias.      |
| ${4_index} =    | `Open Browser` | http://example.com | Chrome  | alias=${1_index} | # Switches to the browser with Chrome alias.      |
| Should Be Equal | ${1_index}     | ${3_index}         |         |                  |                                                   |
| Should Be Equal | ${1_index}     | ${4_index}         |         |                  |                                                   |
| Should Be Equal | ${2_index}     | ${2}               |         |                  |                                                   |

Optional ``remote_url`` is the URL for a
[https://github.com/SeleniumHQ/selenium/wiki/Grid2|Selenium Grid].

Optional ``desired_capabilities`` is deprecated and will be removed
in the next release. Capabilities of each individual browser is now
done through options or services. Please refer to those arguments
for configuring specific browsers.

Optional ``ff_profile_dir`` is the path to the Firefox profile
directory if you wish to overwrite the default profile Selenium
uses. The ``ff_profile_dir`` can also be an instance of the
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html|selenium.webdriver.FirefoxProfile]
. As a third option, it is possible to use `FirefoxProfile` methods
and attributes to define the profile using methods and attributes
in the same way as with ``options`` argument. Example: It is possible
to use FirefoxProfile `set_preference` to define different
profile settings. See ``options`` argument documentation in below
how to handle backslash escaping.

Example for FirefoxProfile
| `Open Browser` | http://example.com | Firefox | ff_profile_dir=/path/to/profile                                                  | # Using profile from disk.                       |
| `Open Browser` | http://example.com | Firefox | ff_profile_dir=${FirefoxProfile_instance}                                        | # Using instance of FirefoxProfile.              |
| `Open Browser` | http://example.com | Firefox | ff_profile_dir=set_preference("key", "value");set_preference("other", "setting") | # Defining profile using FirefoxProfile mehtods. |

Optional ``options`` argument allows defining browser specific
Selenium options. Example for Chrome, the ``options`` argument
allows defining the following
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options|methods and attributes]
and for Firefox these
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox#selenium.webdriver.firefox.options.Options|methods and attributes]
are available. Selenium options are also supported, when ``remote_url``
argument is used.

The SeleniumLibrary ``options`` argument accepts Selenium
options in two different formats: as a string and as Python object
which is an instance of the Selenium options class.

The string format uses a Python like syntax to define Selenium options
methods or attributes.

Example when using
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options|Chrome options]
method:
| `Open Browser` | http://example.com | Chrome | options=add_argument("--disable-popup-blocking"); add_argument("--ignore-certificate-errors") | # Sting format.                    |
| `Open Browser` | None               | Chrome | options=binary_location="/path/to/binary";add_argument("remote-debugging-port=port")          | # Start Chomium-based application. |
| `Open Browser` | None               | Chrome | options=binary_location=r"C:\\path\\to\\binary"                                         | # Windows OS path escaping.        |

``options`` argument also supports receiving the Selenium
options as Python class instance.

See the `Browser and Driver options` section for more details on how to use
the either the string format or Python object syntax with the ``options`` argument.

Optional ``service_log_path`` will be deprecated in the next release. Please
use the browser specific ``service`` attribute instead. The ``service_log_path``
argument defines the name of the file where to write the browser driver logs.
If the ``service_log_path``  argument contains a marker ``{index}``, it
will be automatically replaced with unique running
index preventing files to be overwritten. Indices start's from 1,
and how they are represented can be customized using Python's
[https://docs.python.org/3/library/string.html#format-string-syntax|
format string syntax].

Optional ``executable_path``  will be deprecated in the next release. Please
use the `executable_path` and, if needed, `port` attribute on the ``service``
argument instead. The ``executable_path`` argument defines the path to the driver
executable, example to a chromedriver or a geckodriver. If not defined
it is assumed the executable is in the
[https://en.wikipedia.org/wiki/PATH_(variable)|$PATH].

Optional ``service`` argument allows for managing the local drivers
as well as setting some browser specific settings like logging. Service
classes are not supported when ``remote_url`` argument is used. See the
`Browser and Driver options` section for more details on how to use
the ``service`` argument.

If the provided configuration options are not enough, it is possible
to use `Create Webdriver` to customize browser initialization even
more.

The ``service`` argument is new in SeleniumLibrary 6.4.</doc>
<shortdoc>Opens a new browser instance to the optional ``url``.</shortdoc>
</kw>
<kw name="Open Chrome Browser" lineno="1057">
<arguments repr="url: str, use_profile: bool = False, headless: bool | str = AUTO, maximized: bool = False, alias: str | None = None, profile_name: str | None = None, profile_path: str | None = None, preferences: dict | None = None, proxy: str | None = None, user_agent: str | None = None, sandbox: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url: str">
<name>url</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="use_profile: bool = False">
<name>use_profile</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="headless: bool | str = AUTO">
<name>headless</name>
<type name="Union" union="true">
<type name="bool" typedoc="boolean"/>
<type name="str" typedoc="string"/>
</type>
<default>AUTO</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="maximized: bool = False">
<name>maximized</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="alias: str | None = None">
<name>alias</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="profile_name: str | None = None">
<name>profile_name</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="profile_path: str | None = None">
<name>profile_path</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="preferences: dict | None = None">
<name>preferences</name>
<type name="Union" union="true">
<type name="dict" typedoc="dictionary"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="proxy: str | None = None">
<name>proxy</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="user_agent: str | None = None">
<name>user_agent</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="sandbox: bool = False">
<name>sandbox</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<returntype name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="int" typedoc="integer"/>
</returntype>
<doc>Opens a Chrome browser.

See ``Open Available Browser`` for a full descriptions of the arguments.</doc>
<shortdoc>Opens a Chrome browser.</shortdoc>
</kw>
<kw name="Open Context Menu" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="875">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Opens the context menu on the element identified by ``locator``.</doc>
<shortdoc>Opens the context menu on the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Open Headless Chrome Browser" lineno="1120">
<arguments repr="url: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url: str">
<name>url</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<returntype name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="int" typedoc="integer"/>
</returntype>
<doc>Opens the Chrome browser in headless mode.

``url`` URL to open

Example:

| ${idx} = | Open Headless Chrome Browser | https://www.google.com |</doc>
<shortdoc>Opens the Chrome browser in headless mode.</shortdoc>
</kw>
<kw name="Open User Browser" lineno="1950">
<arguments repr="url: str, tab=True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url: str">
<name>url</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="tab=True">
<name>tab</name>
<default>True</default>
</arg>
</arguments>
<doc>Opens an URL with te user's default browser.

The browser opened with this keyword is not accessible
with Selenium. To interact with the opened browser it is
possible to use ``RPA.Desktop`` or ``RPA.Windows`` library keywords.

The keyword `Attach Chrome Browser` can be used to
access an already open browser with Selenium keywords.

Read more: https://robocorp.com/portal/tutorial/how-to-attach-to-running-chrome-browser

``url`` URL to open
``tab`` defines is url is opened in a tab (defaults to ``True``) or
        in new window (if set to ``False``)

Example:

| Open User Browser  | https://www.google.com?q=rpa |
| Open User Browser  | https://www.google.com?q=rpa | tab=${False} |</doc>
<shortdoc>Opens an URL with te user's default browser.</shortdoc>
</kw>
<kw name="Page Should Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="127">
<arguments repr="text: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies that current page contains ``text``.

If this keyword fails, it automatically logs the page source
using the log level specified with the optional ``loglevel``
argument. Valid log levels are ``TRACE`` (default), ``DEBUG``,
``INFO``, ``WARN``, and ``NONE``. If the log level is ``NONE``
or below the current active log level the source will not be logged.

!! WARNING !! If you have an iframe selected, `Page Should Contain`
will reset the frame reference back to the main frame. This is due
to the fact that is searches for the ``text`` in all frames. To locate
an element in an iframe after calling `Page Should Contian` one needs
to (re)select the frame.</doc>
<shortdoc>Verifies that current page contains ``text``.</shortdoc>
</kw>
<kw name="Page Should Contain Button" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="430">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies button ``locator`` is found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, buttons are
searched using ``id``, ``name``, and ``value``.</doc>
<shortdoc>Verifies button ``locator`` is found from current page.</shortdoc>
</kw>
<kw name="Page Should Contain Checkbox" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="70">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies checkbox ``locator`` is found from the current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies checkbox ``locator`` is found from the current page.</shortdoc>
</kw>
<kw name="Page Should Contain Element" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="150">
<arguments repr="locator: WebElement | str | List[WebElement | str], message: str | None = None, loglevel: str = TRACE, limit: int | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str | List[WebElement | str]">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
<type name="List" typedoc="list">
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</type>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="limit: int | None = None">
<name>limit</name>
<type name="Union" union="true">
<type name="int" typedoc="integer"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Verifies that element ``locator`` is found on the current page.

See the `Locating elements` section for details about the locator
syntax.

The ``message`` argument can be used to override the default error
message.

The ``limit`` argument can used to define how many elements the
page should contain. When ``limit`` is ``None`` (default) page can
contain one or more elements. When limit is a number, page must
contain same number of elements.

See `Page Should Contain` for an explanation about the ``loglevel``
argument.

Examples assumes that locator matches to two elements.
| `Page Should Contain Element` | div_name | limit=1    | # Keyword fails.                  |
| `Page Should Contain Element` | div_name | limit=2    | # Keyword passes.                 |
| `Page Should Contain Element` | div_name | limit=none | # None is considered one or more. |
| `Page Should Contain Element` | div_name |            | # Same as above.                  |

The ``limit`` argument is new in SeleniumLibrary 3.0.</doc>
<shortdoc>Verifies that element ``locator`` is found on the current page.</shortdoc>
</kw>
<kw name="Page Should Contain Image" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1096">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies image identified by ``locator`` is found from current page.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, images are searched
using ``id``, ``name``, ``src`` and ``alt``.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.</doc>
<shortdoc>Verifies image identified by ``locator`` is found from current page.</shortdoc>
</kw>
<kw name="Page Should Contain Link" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1048">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies link identified by ``locator`` is found from current page.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, links are searched
using ``id``, ``name``, ``href`` and the link text.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.</doc>
<shortdoc>Verifies link identified by ``locator`` is found from current page.</shortdoc>
</kw>
<kw name="Page Should Contain List" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="159">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies selection list ``locator`` is found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies selection list ``locator`` is found from current page.</shortdoc>
</kw>
<kw name="Page Should Contain Radio Button" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="132">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies radio button ``locator`` is found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, radio buttons are
searched using ``id``, ``name`` and ``value``.</doc>
<shortdoc>Verifies radio button ``locator`` is found from current page.</shortdoc>
</kw>
<kw name="Page Should Contain Textfield" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="300">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies text field ``locator`` is found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies text field ``locator`` is found from current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="198">
<arguments repr="text: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies the current page does not contain ``text``.

See `Page Should Contain` for an explanation about the ``loglevel``
argument.</doc>
<shortdoc>Verifies the current page does not contain ``text``.</shortdoc>
</kw>
<kw name="Page Should Not Contain Button" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="451">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies button ``locator`` is not found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, buttons are
searched using ``id``, ``name``, and ``value``.</doc>
<shortdoc>Verifies button ``locator`` is not found from current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain Checkbox" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="87">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies checkbox ``locator`` is not found from the current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies checkbox ``locator`` is not found from the current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain Element" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="210">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies that element ``locator`` is not found on the current page.

See the `Locating elements` section for details about the locator
syntax.

See `Page Should Contain` for an explanation about ``message`` and
``loglevel`` arguments.</doc>
<shortdoc>Verifies that element ``locator`` is not found on the current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain Image" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1114">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies image identified by ``locator`` is not found from current page.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, images are searched
using ``id``, ``name``, ``src`` and ``alt``.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.</doc>
<shortdoc>Verifies image identified by ``locator`` is not found from current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain Link" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1066">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies link identified by ``locator`` is not found from current page.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, links are searched
using ``id``, ``name``, ``href`` and the link text.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.</doc>
<shortdoc>Verifies link identified by ``locator`` is not found from current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain List" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="176">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies selection list ``locator`` is not found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies selection list ``locator`` is not found from current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain Radio Button" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="150">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies radio button ``locator`` is not found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, radio buttons are
searched using ``id``, ``name`` and ``value``.</doc>
<shortdoc>Verifies radio button ``locator`` is not found from current page.</shortdoc>
</kw>
<kw name="Page Should Not Contain Textfield" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="317">
<arguments repr="locator: WebElement | str, message: str | None = None, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies text field ``locator`` is not found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies text field ``locator`` is not found from current page.</shortdoc>
</kw>
<kw name="Press Key" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="907">
<arguments repr="locator: WebElement | str, key: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="key: str">
<name>key</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Simulates user pressing key on element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.

``key`` is either a single character, a string, or a numerical ASCII
code of the key lead by '\'.

Examples:
| `Press Key` | text_field   | q     |
| `Press Key` | text_field   | abcde |
| `Press Key` | login_button | \13  | # ASCII code for enter key |

`Press Key` and `Press Keys` differ in the methods to simulate key
presses. `Press Key` uses the WebDriver `SEND_KEYS_TO_ELEMENT` command
using the selenium send_keys method. Although one is not recommended
over the other if `Press Key` does not work we recommend trying
`Press Keys`.</doc>
<shortdoc>Simulates user pressing key on element identified by ``locator``.</shortdoc>
</kw>
<kw name="Press Keys" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="933">
<arguments repr="locator: WebElement | None | str = None, *keys: str">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="locator: WebElement | None | str = None">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="None" typedoc="None"/>
<type name="str" typedoc="string"/>
</type>
<default>None</default>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*keys: str">
<name>keys</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Simulates the user pressing key(s) to an element or on the active browser.

If ``locator`` evaluates as false, see `Boolean arguments` for more
details, then the ``keys`` are sent to the currently active browser.
Otherwise element is searched and ``keys`` are send to the element
identified by the ``locator``. In later case, keyword fails if element
is not found. See the `Locating elements` section for details about
the locator syntax.

``keys`` arguments can contain one or many strings, but it can not
be empty. ``keys`` can also be a combination of
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html|Selenium Keys]
and strings or a single Selenium Key. If Selenium Key is combined
with strings, Selenium key and strings must be separated by the
`+` character, like in `CONTROL+c`. Selenium Keys
are space and case sensitive and Selenium Keys are not parsed
inside of the string. Example AALTO, would send string `AALTO`
and `ALT` not parsed inside of the string. But `A+ALT+O` would
found Selenium ALT key from the ``keys`` argument. It also possible
to press many Selenium Keys down at the same time, example
'ALT+ARROW_DOWN`.

If Selenium Keys are detected in the ``keys`` argument, keyword
will press the Selenium Key down, send the strings and
 then release the Selenium Key. If keyword needs to send a Selenium
Key as a string, then each character must be separated with
`+` character, example `E+N+D`.

`CTRL` is alias for
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.CONTROL|Selenium CONTROL]
and ESC is alias for
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ESCAPE|Selenium ESCAPE]

New in SeleniumLibrary 3.3

Examples:
| `Press Keys` | text_field | AAAAA          |            | # Sends string "AAAAA" to element.                                                |
| `Press Keys` | None       | BBBBB          |            | # Sends string "BBBBB" to currently active browser.                               |
| `Press Keys` | text_field | E+N+D          |            | # Sends string "END" to element.                                                  |
| `Press Keys` | text_field | XXX            | YY         | # Sends strings "XXX" and "YY" to element.                                        |
| `Press Keys` | text_field | XXX+YY         |            | # Same as above.                                                                  |
| `Press Keys` | text_field | ALT+ARROW_DOWN |            | # Pressing "ALT" key down, then pressing ARROW_DOWN and then releasing both keys. |
| `Press Keys` | text_field | ALT            | ARROW_DOWN | # Pressing "ALT" key and then pressing ARROW_DOWN.                                |
| `Press Keys` | text_field | CTRL+c         |            | # Pressing CTRL key down, sends string "c" and then releases CTRL key.            |
| `Press Keys` | button     | RETURN         |            | # Pressing "ENTER" key to element.                                                |

`Press Key` and `Press Keys` differ in the methods to simulate key
presses. `Press Keys` uses the Selenium/WebDriver Actions.
`Press Keys` also has a more extensive syntax for describing keys,
key combinations, and key actions. Although one is not recommended
over the other if `Press Keys` does not work we recommend trying
`Press Key`.</doc>
<shortdoc>Simulates the user pressing key(s) to an element or on the active browser.</shortdoc>
</kw>
<kw name="Print Page As Pdf" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\screenshot.py" lineno="243">
<arguments repr="filename: str = selenium-page-{index}.pdf, background: bool | None = None, margin_bottom: float | None = None, margin_left: float | None = None, margin_right: float | None = None, margin_top: float | None = None, orientation: str | None = None, page_height: float | None = None, page_ranges: list | None = None, page_width: float | None = None, scale: float | None = None, shrink_to_fit: bool | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="filename: str = selenium-page-{index}.pdf">
<name>filename</name>
<type name="str" typedoc="string"/>
<default>selenium-page-{index}.pdf</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="background: bool | None = None">
<name>background</name>
<type name="Union" union="true">
<type name="bool" typedoc="boolean"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="margin_bottom: float | None = None">
<name>margin_bottom</name>
<type name="Union" union="true">
<type name="float" typedoc="float"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="margin_left: float | None = None">
<name>margin_left</name>
<type name="Union" union="true">
<type name="float" typedoc="float"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="margin_right: float | None = None">
<name>margin_right</name>
<type name="Union" union="true">
<type name="float" typedoc="float"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="margin_top: float | None = None">
<name>margin_top</name>
<type name="Union" union="true">
<type name="float" typedoc="float"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="orientation: str | None = None">
<name>orientation</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="page_height: float | None = None">
<name>page_height</name>
<type name="Union" union="true">
<type name="float" typedoc="float"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="page_ranges: list | None = None">
<name>page_ranges</name>
<type name="Union" union="true">
<type name="list" typedoc="list"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="page_width: float | None = None">
<name>page_width</name>
<type name="Union" union="true">
<type name="float" typedoc="float"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="scale: float | None = None">
<name>scale</name>
<type name="Union" union="true">
<type name="float" typedoc="float"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="shrink_to_fit: bool | None = None">
<name>shrink_to_fit</name>
<type name="Union" union="true">
<type name="bool" typedoc="boolean"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Print the current page as a PDF

``page_ranges`` defaults to `['-']` or "all" pages. ``page_ranges`` takes a list of
strings indicating the ranges.

The page size defaults to 21.59 for ``page_width`` and 27.94 for ``page_height``.
This is the equivalent size of US-Letter. The assumed units on these parameters
is centimeters.

The default margin for top, left, bottom, right is `1`. The assumed units on
these parameters is centimeters.

The default ``orientation`` is `portrait`. ``orientation`` can be either `portrait`
or `landscape`.

The default ``scale`` is `1`. ``scale`` must be greater than or equal to `0.1` and
less than or equal to `2`.

``background`` and ``scale_to_fit`` can be either `${True}` or `${False}`..

If all print options are None then a pdf will fail to print silently.</doc>
<shortdoc>Print the current page as a PDF</shortdoc>
</kw>
<kw name="Print To Pdf" lineno="2124">
<arguments repr="output_path: str | None = None, params: dict | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="output_path: str | None = None">
<name>output_path</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="params: dict | None = None">
<name>params</name>
<type name="Union" union="true">
<type name="dict" typedoc="dictionary"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Print the current page to a PDF document using Chrome's DevTools.

Attention: With some older browsers, this may work in *headless* mode only!
For a list of supported parameters see:
https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-printToPDF
Returns the output PDF file path.

Parameter ``output_path`` specifies the file path for the generated PDF
document. By default, it is saved to the output folder with the default name
of `out.pdf`.
Parameter ``params`` specify parameters for the browser printing method. By
default, it uses the following values:
```
{
    "landscape": False,
    "displayHeaderFooter": False,
    "printBackground": True,
    "preferCSSPageSize": True,
}
```</doc>
<shortdoc>Print the current page to a PDF document using Chrome's DevTools.</shortdoc>
</kw>
<kw name="Radio Button Should Be Set To" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="168">
<arguments repr="group_name: str, value: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="group_name: str">
<name>group_name</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: str">
<name>value</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Verifies radio button group ``group_name`` is set to ``value``.

``group_name`` is the ``name`` of the radio button group.</doc>
<shortdoc>Verifies radio button group ``group_name`` is set to ``value``.</shortdoc>
</kw>
<kw name="Radio Button Should Not Be Selected" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="183">
<arguments repr="group_name: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="group_name: str">
<name>group_name</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Verifies radio button group ``group_name`` has no selection.

``group_name`` is the ``name`` of the radio button group.</doc>
<shortdoc>Verifies radio button group ``group_name`` has no selection.</shortdoc>
</kw>
<kw name="Register Keyword To Run On Failure" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\runonfailure.py" lineno="23">
<arguments repr="keyword: str | None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="keyword: str | None">
<name>keyword</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Sets the keyword to execute, when a SeleniumLibrary keyword fails.

``keyword`` is the name of a keyword that will be executed if a
SeleniumLibrary keyword fails. It is possible to use any available
keyword, including user keywords or keywords from other libraries,
but the keyword must not take any arguments.

The initial keyword to use is set when `importing` the library, and
the keyword that is used by default is `Capture Page Screenshot`.
Taking a screenshot when something failed is a very useful
feature, but notice that it can slow down the execution.

It is possible to use string ``NOTHING`` or ``NONE``,
case-insensitively, as well as Python ``None`` to disable this
feature altogether.

This keyword returns the name of the previously registered
failure keyword or Python ``None`` if this functionality was
previously disabled. The return value can be always used to
restore the original value later.

Example:
| `Register Keyword To Run On Failure`  | Log Source |
| ${previous kw}= | `Register Keyword To Run On Failure`  | NONE |
| `Register Keyword To Run On Failure`  | ${previous kw} |

Changes in SeleniumLibrary 3.0:
- Possible to use string ``NONE`` or Python ``None`` to disable the
  functionality.
- Return Python ``None`` when the functionality was disabled earlier.
  In previous versions special value ``No Keyword`` was returned and
  it could not be used to restore the original state.</doc>
<shortdoc>Sets the keyword to execute, when a SeleniumLibrary keyword fails.</shortdoc>
</kw>
<kw name="Reload Page" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="524">
<arguments repr="">
</arguments>
<doc>Simulates user reloading page.</doc>
<shortdoc>Simulates user reloading page.</shortdoc>
</kw>
<kw name="Remove Location Strategy" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1165">
<arguments repr="strategy_name: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="strategy_name: str">
<name>strategy_name</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Removes a previously added custom location strategy.

See `Custom locators` for information on how to create and use
custom strategies.</doc>
<shortdoc>Removes a previously added custom location strategy.</shortdoc>
</kw>
<kw name="Screenshot" lineno="1132">
<arguments repr="locator: WebElement | ShadowRoot | str | None = None, filename: str | None = ">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="locator: WebElement | ShadowRoot | str | None = None">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="filename: str | None = ">
<name>filename</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default/>
</arg>
</arguments>
<returntype name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</returntype>
<doc>Capture page and/or element screenshot.

``locator`` if defined, take element screenshot, if not takes page screenshot

``filename`` filename for the screenshot, by default creates file `screenshot-&lt;timestamp&gt;-(element|page).png`
if set to `None` then file is not saved at all

Example:

| Screenshot | locator=//img[@alt="Google"] | filename=locator.png              | # element screenshot, defined filename            |
| Screenshot | filename=page.png            |                                   | # page screenshot, defined filename               |
| Screenshot | filename=${NONE}             |                                   | # page screenshot, NO file will be created        |
| Screenshot |                              |                                   | # page screenshot, default filename               |
| Screenshot | locator=//img[@alt="Google"] |                                   | # element screenshot, default filename            |
| Screenshot | locator=//img[@alt="Google"] | filename=${CURDIR}/subdir/loc.png | # element screenshot, create dirs if not existing |</doc>
<shortdoc>Capture page and/or element screenshot.</shortdoc>
</kw>
<kw name="Scroll Element Into View" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="768">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Scrolls the element identified by ``locator`` into view.

See the `Locating elements` section for details about the locator
syntax.

New in SeleniumLibrary 3.2.0</doc>
<shortdoc>Scrolls the element identified by ``locator`` into view.</shortdoc>
</kw>
<kw name="Select All From List" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="193">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Selects all options from multi-selection list ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Selects all options from multi-selection list ``locator``.</shortdoc>
</kw>
<kw name="Select Checkbox" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="104">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Selects the checkbox identified by ``locator``.

Does nothing if checkbox is already selected.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Selects the checkbox identified by ``locator``.</shortdoc>
</kw>
<kw name="Select Frame" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\frames.py" lineno="25">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Sets frame identified by ``locator`` as the current frame.

See the `Locating elements` section for details about the locator
syntax.

Works both with frames and iframes. Use `Unselect Frame` to cancel
the frame selection and return to the main frame.

Example:
| `Select Frame`   | top-frame | # Select frame with id or name 'top-frame'   |
| `Click Link`     | example   | # Click link 'example' in the selected frame |
| `Unselect Frame` |           | # Back to main frame.                        |
| `Select Frame`   | //iframe[@name='xxx'] | # Select frame using xpath       |</doc>
<shortdoc>Sets frame identified by ``locator`` as the current frame.</shortdoc>
</kw>
<kw name="Select From List By Index" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="209">
<arguments repr="locator: WebElement | str, *indexes: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*indexes: str">
<name>indexes</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Selects options from selection list ``locator`` by ``indexes``.

Indexes of list options start from 0.

If more than one option is given for a single-selection list,
the last value will be selected. With multi-selection lists all
specified options are selected, but possible old selections are
not cleared.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Selects options from selection list ``locator`` by ``indexes``.</shortdoc>
</kw>
<kw name="Select From List By Label" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="256">
<arguments repr="locator: WebElement | str, *labels: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*labels: str">
<name>labels</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Selects options from selection list ``locator`` by ``labels``.

If more than one option is given for a single-selection list,
the last value will be selected. With multi-selection lists all
specified options are selected, but possible old selections are
not cleared.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Selects options from selection list ``locator`` by ``labels``.</shortdoc>
</kw>
<kw name="Select From List By Value" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="234">
<arguments repr="locator: WebElement | str, *values: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*values: str">
<name>values</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Selects options from selection list ``locator`` by ``values``.

If more than one option is given for a single-selection list,
the last value will be selected. With multi-selection lists all
specified options are selected, but possible old selections are
not cleared.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Selects options from selection list ``locator`` by ``values``.</shortdoc>
</kw>
<kw name="Select Radio Button" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="198">
<arguments repr="group_name: str, value: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="group_name: str">
<name>group_name</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: str">
<name>value</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Sets the radio button group ``group_name`` to ``value``.

The radio button to be selected is located by two arguments:
- ``group_name`` is the name of the radio button group.
- ``value`` is the ``id`` or ``value`` attribute of the actual
  radio button.

Examples:
| `Select Radio Button` | size    | XL    |
| `Select Radio Button` | contact | email |</doc>
<shortdoc>Sets the radio button group ``group_name`` to ``value``.</shortdoc>
</kw>
<kw name="Set Action Chain Delay" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="640">
<arguments repr="value: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: timedelta">
<name>value</name>
<type name="timedelta" typedoc="timedelta"/>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Sets the duration of delay in ActionChains() used by SeleniumLibrary.

The value can be given as a number that is considered to be
seconds or as a human-readable string like ``1 second``.

Value is always stored as milliseconds internally.

The previous value is returned and can be used to restore
the original value later if needed.</doc>
<shortdoc>Sets the duration of delay in ActionChains() used by SeleniumLibrary.</shortdoc>
</kw>
<kw name="Set Browser Implicit Wait" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="662">
<arguments repr="value: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: timedelta">
<name>value</name>
<type name="timedelta" typedoc="timedelta"/>
</arg>
</arguments>
<doc>Sets the implicit wait value used by Selenium.

Same as `Set Selenium Implicit Wait` but only affects the current
browser.</doc>
<shortdoc>Sets the implicit wait value used by Selenium.</shortdoc>
</kw>
<kw name="Set Default Url Scheme" lineno="119">
<arguments repr="scheme: str | None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="scheme: str | None">
<name>scheme</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
</arg>
</arguments>
<doc>Sets the default `scheme` used for URLs without a defined
value, such as `http` or `https`.

The feature is disabled if the value is set to `None`.</doc>
<shortdoc>Sets the default `scheme` used for URLs without a defined value, such as `http` or `https`.</shortdoc>
</kw>
<kw name="Set Download Directory" lineno="1986">
<arguments repr="directory: str | None = None, download_pdf: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="directory: str | None = None">
<name>directory</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="download_pdf: bool = True">
<name>download_pdf</name>
<type name="bool" typedoc="boolean"/>
<default>True</default>
</arg>
</arguments>
<doc>Set a custom browser download directory.

This has to be called before opening the browser and it works with the
following keywords:

- ``Open Available Browser``
- ``Open Chrome Browser``
- ``Open Headless Chrome Browser``

Supported browsers: Chrome, Edge, Firefox.

If the downloading doesn't work (file is not found on disk), try using the
browser in non-headless (headful) mode when opening it. (``headless=${False}``)

Parameter ``directory`` sets a path for downloads, defaults to ``None``, which
means that this setting is removed and the default location will be used.
Parameter ``download_pdf`` will download a PDF file instead of previewing it
within browser's internal viewer when this is set to ``True``. (enabled by
default)

Example:

| `Set Download Directory` | ${OUTPUT_DIR}           |
| Open Available Browser   | https://cdn.robocorp.com/legal/Robocorp-EULA-v1.0.pdf |
| @{files} =               | List Files In Directory | ${OUTPUT_DIR}               |
| Log List                 |  ${files}               |</doc>
<shortdoc>Set a custom browser download directory.</shortdoc>
</kw>
<kw name="Set Element Attribute" lineno="2212">
<arguments repr="locator: WebElement | ShadowRoot | str, attribute: str, value: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="attribute: str">
<name>attribute</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: str">
<name>value</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Sets a ``value`` for the ``attribute`` in the element ``locator``.

See the `Locating elements` section for details about the locator
syntax.

Example:

| Set Element Attribute | css:h1 | class | active |</doc>
<shortdoc>Sets a ``value`` for the ``attribute`` in the element ``locator``.</shortdoc>
</kw>
<kw name="Set Focus To Element" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="756">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Sets the focus to the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.

Prior to SeleniumLibrary 3.0 this keyword was named `Focus`.</doc>
<shortdoc>Sets the focus to the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Set Screenshot Directory" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\screenshot.py" lineno="35">
<arguments repr="path: None | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="path: None | str">
<name>path</name>
<type name="Union" union="true">
<type name="None" typedoc="None"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Sets the directory for captured screenshots.

``path`` argument specifies the absolute path to a directory where
the screenshots should be written to. If the directory does not
exist, it will be created. The directory can also be set when
`importing` the library. If it is not configured anywhere,
screenshots are saved to the same directory where Robot Framework's
log file is written.

If ``path`` equals to EMBED (case insensitive) and
`Capture Page Screenshot` or `capture Element Screenshot` keywords
filename argument is not changed from the default value, then
the page or element screenshot is embedded as Base64 image to
the log.html.

The previous value is returned and can be used to restore
the original value later if needed.

Returning the previous value is new in SeleniumLibrary 3.0.
The persist argument was removed in SeleniumLibrary 3.2 and
EMBED is new in SeleniumLibrary 4.2.</doc>
<shortdoc>Sets the directory for captured screenshots.</shortdoc>
</kw>
<kw name="Set Selenium Implicit Wait" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="614">
<arguments repr="value: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: timedelta">
<name>value</name>
<type name="timedelta" typedoc="timedelta"/>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Sets the implicit wait value used by Selenium.

The value can be given as a number that is considered to be
seconds or as a human-readable string like ``1 second``.
The previous value is returned and can be used to restore
the original value later if needed.

This keyword sets the implicit wait for all opened browsers.
Use `Set Browser Implicit Wait` to set it only to the current
browser.

See the `Implicit wait` section above for more information.

Example:
| ${orig wait} = | `Set Selenium Implicit Wait` | 10 seconds |
| `Perform AJAX call that is slow` |
| `Set Selenium Implicit Wait` | ${orig wait} |</doc>
<shortdoc>Sets the implicit wait value used by Selenium.</shortdoc>
</kw>
<kw name="Set Selenium Page Load Timeout" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="671">
<arguments repr="value: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: timedelta">
<name>value</name>
<type name="timedelta" typedoc="timedelta"/>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Sets the page load timeout value used by Selenium.

The value can be given as a number that is considered to be
seconds or as a human-readable string like ``1 second``.
The previous value is returned and can be used to restore
the original value later if needed.

In contrast to `Set Selenium Timeout` and `Set Selenium Implicit Wait`,
this keywords sets the time for the Webdriver to wait until the page
is loaded before raising a timeout exception.

See the `Page load` section above for more information.

Example:
| ${orig page load timeout} = | `Set Selenium Page Load Timeout` | 30 seconds |
| `Open page that loads slowly` |
| `Set Selenium Page Load Timeout` | ${orig page load timeout} |

New in SeleniumLibrary 6.1</doc>
<shortdoc>Sets the page load timeout value used by Selenium.</shortdoc>
</kw>
<kw name="Set Selenium Speed" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="572">
<arguments repr="value: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: timedelta">
<name>value</name>
<type name="timedelta" typedoc="timedelta"/>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Sets the delay that is waited after each Selenium command.

The value can be given as a number that is considered to be
seconds or as a human-readable string like ``1 second``.
The previous value is returned and can be used to restore
the original value later if needed.

See the `Selenium Speed` section above for more information.

Example:
| `Set Selenium Speed` | 0.5 seconds |</doc>
<shortdoc>Sets the delay that is waited after each Selenium command.</shortdoc>
</kw>
<kw name="Set Selenium Timeout" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="592">
<arguments repr="value: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value: timedelta">
<name>value</name>
<type name="timedelta" typedoc="timedelta"/>
</arg>
</arguments>
<returntype name="str" typedoc="string"/>
<doc>Sets the timeout that is used by various keywords.

The value can be given as a number that is considered to be
seconds or as a human-readable string like ``1 second``.
The previous value is returned and can be used to restore
the original value later if needed.

See the `Timeout` section above for more information.

Example:
| ${orig timeout} = | `Set Selenium Timeout` | 15 seconds |
| `Open page that loads slowly` |
| `Set Selenium Timeout` | ${orig timeout} |</doc>
<shortdoc>Sets the timeout that is used by various keywords.</shortdoc>
</kw>
<kw name="Set Window Position" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="274">
<arguments repr="x: int, y: int">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="x: int">
<name>x</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="y: int">
<name>y</name>
<type name="int" typedoc="integer"/>
</arg>
</arguments>
<doc>Sets window position using ``x`` and ``y`` coordinates.

The position is relative to the top left corner of the screen,
but some browsers exclude possible task bar set by the operating
system from the calculation. The actual position may thus be
different with different browsers.

Values can be given using strings containing numbers or by using
actual numbers. See also `Get Window Position`.

Example:
| `Set Window Position` | 100 | 200 |</doc>
<shortdoc>Sets window position using ``x`` and ``y`` coordinates.</shortdoc>
</kw>
<kw name="Set Window Size" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="217">
<arguments repr="width: int, height: int, inner: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="width: int">
<name>width</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="height: int">
<name>height</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="inner: bool = False">
<name>inner</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
</arguments>
<doc>Sets current windows size to given ``width`` and ``height``.

Values can be given using strings containing numbers or by using
actual numbers. See also `Get Window Size`.

Browsers have a limit on their minimum size. Trying to set them
smaller will cause the actual size to be bigger than the requested
size.

If ``inner`` parameter is set to True, keyword sets the necessary
window width and height to have the desired HTML DOM _window.innerWidth_
and _window.innerHeight_. See `Boolean arguments` for more details on how to set boolean
arguments.

The ``inner`` argument is new since SeleniumLibrary 4.0.

This ``inner`` argument does not support Frames. If a frame is selected,
switch to default before running this.

Example:
| `Set Window Size` | 800 | 600 |      |
| `Set Window Size` | 800 | 600 | True |</doc>
<shortdoc>Sets current windows size to given ``width`` and ``height``.</shortdoc>
</kw>
<kw name="Simulate Event" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="882">
<arguments repr="locator: WebElement | str, event: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="event: str">
<name>event</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Simulates ``event`` on the element identified by ``locator``.

This keyword is useful if element has ``OnEvent`` handler that
needs to be explicitly invoked.

See the `Locating elements` section for details about the locator
syntax.

Prior to SeleniumLibrary 3.0 this keyword was named `Simulate`.</doc>
<shortdoc>Simulates ``event`` on the element identified by ``locator``.</shortdoc>
</kw>
<kw name="Submit Form" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="29">
<arguments repr="locator: WebElement | None | str = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="locator: WebElement | None | str = None">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="None" typedoc="None"/>
<type name="str" typedoc="string"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Submits a form identified by ``locator``.

If ``locator`` is not given, first form on the page is submitted.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Submits a form identified by ``locator``.</shortdoc>
</kw>
<kw name="Switch Browser" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="334">
<arguments repr="index_or_alias: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="index_or_alias: str">
<name>index_or_alias</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Switches between active browsers using ``index_or_alias``.

Indices are returned by the `Open Browser` keyword and aliases can
be given to it explicitly. Indices start from 1.

Example:
| `Open Browser`        | http://google.com | ff       |
| `Location Should Be`  | http://google.com |          |
| `Open Browser`        | http://yahoo.com  | ie       | alias=second |
| `Location Should Be`  | http://yahoo.com  |          |
| `Switch Browser`      | 1                 | # index  |
| `Page Should Contain` | I'm feeling lucky |          |
| `Switch Browser`      | second            | # alias  |
| `Page Should Contain` | More Yahoo!       |          |
| `Close All Browsers`  |                   |          |

Above example expects that there was no other open browsers when
opening the first one because it used index ``1`` when switching to
it later. If you are not sure about that, you can store the index
into a variable as below.

| ${index} =         | `Open Browser` | http://google.com |
| # Do something ... |                |                   |
| `Switch Browser`   | ${index}       |                   |</doc>
<shortdoc>Switches between active browsers using ``index_or_alias``.</shortdoc>
</kw>
<kw name="Switch Window" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="33">
<arguments repr="locator: list | str = MAIN, timeout: str | None = None, browser: str = CURRENT">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="locator: list | str = MAIN">
<name>locator</name>
<type name="Union" union="true">
<type name="list" typedoc="list"/>
<type name="str" typedoc="string"/>
</type>
<default>MAIN</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: str | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="browser: str = CURRENT">
<name>browser</name>
<type name="str" typedoc="string"/>
<default>CURRENT</default>
</arg>
</arguments>
<doc>Switches to browser window matching ``locator``.

If the window is found, all subsequent commands use the selected
window, until this keyword is used again. If the window is not
found, this keyword fails. The previous windows handle is returned
and can be used to switch back to it later.

Notice that alerts should be handled with
`Handle Alert` or other alert related keywords.

The ``locator`` can be specified using different strategies somewhat
similarly as when `locating elements` on pages.

- By default, the ``locator`` is matched against window handle, name,
  title, and URL. Matching is done in that order and the first
  matching window is selected.

- The ``locator`` can specify an explicit strategy by using the format
  ``strategy:value`` (recommended) or ``strategy=value``. Supported
  strategies are ``name``, ``title``, and ``url``. These matches windows
  using their name, title, or URL, respectively. Additionally, ``default``
  can be used to explicitly use the default strategy explained above.

- If the ``locator`` is ``NEW`` (case-insensitive), the latest
  opened window is selected. It is an error if this is the same
  as the current window.

- If the ``locator`` is ``MAIN`` (default, case-insensitive),
  the main window is selected.

- If the ``locator`` is ``CURRENT`` (case-insensitive), nothing is
  done. This effectively just returns the current window handle.

- If the ``locator`` is not a string, it is expected to be a list
  of window handles _to exclude_. Such a list of excluded windows
  can be got from `Get Window Handles` before doing an action that
  opens a new window.

The ``timeout`` is used to specify how long keyword will poll to select
the new window. The ``timeout`` is new in SeleniumLibrary 3.2.

Example:
| `Click Link`      | popup1      |      | # Open new window |
| `Switch Window`   | example     |      | # Select window using default strategy |
| `Title Should Be` | Pop-up 1    |      |
| `Click Button`    | popup2      |      | # Open another window |
| ${handle} = | `Switch Window`   | NEW  | # Select latest opened window |
| `Title Should Be` | Pop-up 2    |      |
| `Switch Window`   | ${handle}   |      | # Select window using handle |
| `Title Should Be` | Pop-up 1    |      |
| `Switch Window`   | MAIN        |      | # Select the main window |
| `Title Should Be` | Main        |      |
| ${excludes} = | `Get Window Handles` | | # Get list of current windows |
| `Click Link`      | popup3      |      | # Open one more window |
| `Switch Window`   | ${excludes} |      | # Select window using excludes |
| `Title Should Be` | Pop-up 3    |      |

The ``browser`` argument allows with ``index_or_alias`` to implicitly switch to
a specific browser when switching to a window. See `Switch Browser`

- If the ``browser`` is ``CURRENT`` (case-insensitive), no other browser is
  selected.

*NOTE:*

- The ``strategy:value`` syntax is only supported by SeleniumLibrary
  3.0 and newer.
- Prior to SeleniumLibrary 3.0 matching windows by name, title
  and URL was case-insensitive.
- Earlier versions supported aliases ``None``, ``null`` and the
  empty string for selecting the main window, and alias ``self``
  for selecting the current window. Support for these aliases was
  removed in SeleniumLibrary 3.2.</doc>
<shortdoc>Switches to browser window matching ``locator``.</shortdoc>
</kw>
<kw name="Table Cell Should Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="90">
<arguments repr="locator: WebElement | str, row: int, column: int, expected: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row: int">
<name>row</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="column: int">
<name>column</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies table cell contains text ``expected``.

See `Get Table Cell` that this keyword uses internally for
an explanation about accepted arguments.</doc>
<shortdoc>Verifies table cell contains text ``expected``.</shortdoc>
</kw>
<kw name="Table Column Should Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="113">
<arguments repr="locator: WebElement | str, column: int, expected: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="column: int">
<name>column</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies table column contains text ``expected``.

The table is located using the ``locator`` argument and its column
found using ``column``. See the `Locating elements` section for
details about the locator syntax.

Column indexes start from 1. It is possible to refer to columns
from the end by using negative indexes so that -1 is the last column,
-2 is the second last, and so on.

If a table contains cells that span multiple columns, those merged
cells count as a single column.

See `Page Should Contain Element` for an explanation about the
``loglevel`` argument.</doc>
<shortdoc>Verifies table column contains text ``expected``.</shortdoc>
</kw>
<kw name="Table Footer Should Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="144">
<arguments repr="locator: WebElement | str, expected: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies table footer contains text ``expected``.

Any ``&lt;td&gt;`` element inside ``&lt;tfoot&gt;`` element is considered to
be part of the footer.

The table is located using the ``locator`` argument. See the
`Locating elements` section for details about the locator syntax.

See `Page Should Contain Element` for an explanation about the
``loglevel`` argument.</doc>
<shortdoc>Verifies table footer contains text ``expected``.</shortdoc>
</kw>
<kw name="Table Header Should Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="169">
<arguments repr="locator: WebElement | str, expected: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies table header contains text ``expected``.

Any ``&lt;th&gt;`` element anywhere in the table is considered to be
part of the header.

The table is located using the ``locator`` argument. See the
`Locating elements` section for details about the locator syntax.

See `Page Should Contain Element` for an explanation about the
``loglevel`` argument.</doc>
<shortdoc>Verifies table header contains text ``expected``.</shortdoc>
</kw>
<kw name="Table Row Should Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="194">
<arguments repr="locator: WebElement | str, row: int, expected: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row: int">
<name>row</name>
<type name="int" typedoc="integer"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies that table row contains text ``expected``.

The table is located using the ``locator`` argument and its column
found using ``column``. See the `Locating elements` section for
details about the locator syntax.

Row indexes start from 1. It is possible to refer to rows
from the end by using negative indexes so that -1 is the last row,
-2 is the second last, and so on.

If a table contains cells that span multiple rows, a match
only occurs for the uppermost row of those merged cells.

See `Page Should Contain Element` for an explanation about the
``loglevel`` argument.</doc>
<shortdoc>Verifies that table row contains text ``expected``.</shortdoc>
</kw>
<kw name="Table Should Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="225">
<arguments repr="locator: WebElement | str, expected: str, loglevel: str = TRACE">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel: str = TRACE">
<name>loglevel</name>
<type name="str" typedoc="string"/>
<default>TRACE</default>
</arg>
</arguments>
<doc>Verifies table contains text ``expected``.

The table is located using the ``locator`` argument. See the
`Locating elements` section for details about the locator syntax.

See `Page Should Contain Element` for an explanation about the
``loglevel`` argument.</doc>
<shortdoc>Verifies table contains text ``expected``.</shortdoc>
</kw>
<kw name="Textarea Should Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="382">
<arguments repr="locator: WebElement | str, expected: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Verifies text area ``locator`` contains text ``expected``.

``message`` can be used to override default error message.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies text area ``locator`` contains text ``expected``.</shortdoc>
</kw>
<kw name="Textarea Value Should Be" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="406">
<arguments repr="locator: WebElement | str, expected: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Verifies text area ``locator`` has exactly text ``expected``.

``message`` can be used to override default error message.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies text area ``locator`` has exactly text ``expected``.</shortdoc>
</kw>
<kw name="Textfield Should Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="334">
<arguments repr="locator: WebElement | str, expected: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Verifies text field ``locator`` contains text ``expected``.

``message`` can be used to override the default error message.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies text field ``locator`` contains text ``expected``.</shortdoc>
</kw>
<kw name="Textfield Value Should Be" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="358">
<arguments repr="locator: WebElement | str, expected: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Verifies text field ``locator`` has exactly text ``expected``.

``message`` can be used to override default error message.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Verifies text field ``locator`` has exactly text ``expected``.</shortdoc>
</kw>
<kw name="Title Should Be" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="497">
<arguments repr="title: str, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="title: str">
<name>title</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Verifies that the current page title equals ``title``.

The ``message`` argument can be used to override the default error
message.

``message`` argument is new in SeleniumLibrary 3.1.</doc>
<shortdoc>Verifies that the current page title equals ``title``.</shortdoc>
</kw>
<kw name="Unselect All From List" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="278">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Unselects all options from multi-selection list ``locator``.

See the `Locating elements` section for details about the locator
syntax.

New in SeleniumLibrary 3.0.</doc>
<shortdoc>Unselects all options from multi-selection list ``locator``.</shortdoc>
</kw>
<kw name="Unselect Checkbox" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="118">
<arguments repr="locator: WebElement | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
</arguments>
<doc>Removes the selection of checkbox identified by ``locator``.

Does nothing if the checkbox is not selected.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Removes the selection of checkbox identified by ``locator``.</shortdoc>
</kw>
<kw name="Unselect Frame" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\frames.py" lineno="45">
<arguments repr="">
</arguments>
<doc>Sets the main frame as the current frame.

In practice cancels the previous `Select Frame` call.</doc>
<shortdoc>Sets the main frame as the current frame.</shortdoc>
</kw>
<kw name="Unselect From List By Index" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="295">
<arguments repr="locator: WebElement | str, *indexes: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*indexes: str">
<name>indexes</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Unselects options from selection list ``locator`` by ``indexes``.

Indexes of list options start from 0. This keyword works only with
multi-selection lists.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Unselects options from selection list ``locator`` by ``indexes``.</shortdoc>
</kw>
<kw name="Unselect From List By Label" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="347">
<arguments repr="locator: WebElement | str, *labels: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*labels: str">
<name>labels</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Unselects options from selection list ``locator`` by ``labels``.

This keyword works only with multi-selection lists.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Unselects options from selection list ``locator`` by ``labels``.</shortdoc>
</kw>
<kw name="Unselect From List By Value" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="322">
<arguments repr="locator: WebElement | str, *values: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*values: str">
<name>values</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Unselects options from selection list ``locator`` by ``values``.

This keyword works only with multi-selection lists.

See the `Locating elements` section for details about the locator
syntax.</doc>
<shortdoc>Unselects options from selection list ``locator`` by ``values``.</shortdoc>
</kw>
<kw name="Wait And Click Button" lineno="1211">
<arguments repr="locator: WebElement | ShadowRoot | str, modifier: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | ShadowRoot | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="ShadowRoot"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="modifier: str | None = None">
<name>modifier</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Click button identified by ``locator``, once it becomes visible.

``locator`` element locator

``modifier`` press given keys while clicking the element, e.g. CTRL

Example:

| Click Button When Visible  | //button[@class="mybutton"] |</doc>
<shortdoc>Click button identified by ``locator``, once it becomes visible.</shortdoc>
</kw>
<kw name="Wait For Condition" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="31">
<arguments repr="condition: str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="condition: str">
<name>condition</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until ``condition`` is true or ``timeout`` expires.

The condition can be arbitrary JavaScript expression but it
must return a value to be evaluated. See `Execute JavaScript` for
information about accessing content on pages.

Fails if the timeout expires before the condition becomes true. See
the `Timeouts` section for more information about using timeouts
and their default value.

``error`` can be used to override the default error message.

Examples:
| `Wait For Condition` | return document.title == "New Title" |
| `Wait For Condition` | return jQuery.active == 0            |
| `Wait For Condition` | style = document.querySelector('h1').style; return style.background == "red" &amp;&amp; style.color == "white" |</doc>
<shortdoc>Waits until ``condition`` is true or ``timeout`` expires.</shortdoc>
</kw>
<kw name="Wait For Expected Condition" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\expectedconditions.py" lineno="24">
<arguments repr="condition: &lt;module 'string' from 'C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\string.py'&gt;, *args, timeout: float | None = 10">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="condition: &lt;module 'string' from 'C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\string.py'&gt;">
<name>condition</name>
<type name="&lt;module 'string' from 'C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\string.py'&gt;"/>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
<arg kind="NAMED_ONLY" required="false" repr="timeout: float | None = 10">
<name>timeout</name>
<type name="Union" union="true">
<type name="float" typedoc="float"/>
<type name="None" typedoc="None"/>
</type>
<default>10</default>
</arg>
</arguments>
<doc>Waits until ``condition`` is true or ``timeout`` expires.

The condition must be one of selenium's expected condition which
can be found within the selenium
[https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions|Python API]
documentation. The expected condition can written as snake_case
(ex title_is) or it can be space delimited (ex Title Is). Some
conditions require additional arguments or ``args`` which should
be passed along after the expected condition.

Fails if the timeout expires before the condition becomes true.
The default value is 10 seconds.

Examples:
| `Wait For Expected Condition` | alert_is_present |
| `Wait For Expected Condition` |  Title Is  | New Title |

If the expected condition expects a locator then one can pass
as arguments a tuple containing the selenium locator strategies
and the locator.

Example of expected condition expecting locator:
| ${byElem}= |  Evaluate  ("id","added_btn")
| `Wait For Expected Condition` | Presence Of Element Located | ${byElem}</doc>
<shortdoc>Waits until ``condition`` is true or ``timeout`` expires.</shortdoc>
</kw>
<kw name="Wait Until Element Contains" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="373">
<arguments repr="locator: WebElement | str, text: str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until the element ``locator`` contains ``text``.

Fails if ``timeout`` expires before the text appears. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.</doc>
<shortdoc>Waits until the element ``locator`` contains ``text``.</shortdoc>
</kw>
<kw name="Wait Until Element Does Not Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="397">
<arguments repr="locator: WebElement | str, text: str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until the element ``locator`` does not contain ``text``.

Fails if ``timeout`` expires before the text disappears. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.</doc>
<shortdoc>Waits until the element ``locator`` does not contain ``text``.</shortdoc>
</kw>
<kw name="Wait Until Element Is Enabled" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="345">
<arguments repr="locator: WebElement | str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until the element ``locator`` is enabled.

Element is considered enabled if it is not disabled nor read-only.

Fails if ``timeout`` expires before the element is enabled. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.

Considering read-only elements to be disabled is a new feature
in SeleniumLibrary 3.0.</doc>
<shortdoc>Waits until the element ``locator`` is enabled.</shortdoc>
</kw>
<kw name="Wait Until Element Is Not Visible" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="322">
<arguments repr="locator: WebElement | str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until the element ``locator`` is not visible.

Fails if ``timeout`` expires before the element is not visible. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.</doc>
<shortdoc>Waits until the element ``locator`` is not visible.</shortdoc>
</kw>
<kw name="Wait Until Element Is Visible" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="299">
<arguments repr="locator: WebElement | str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until the element ``locator`` is visible.

Fails if ``timeout`` expires before the element is visible. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.</doc>
<shortdoc>Waits until the element ``locator`` is visible.</shortdoc>
</kw>
<kw name="Wait Until Location Contains" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="123">
<arguments repr="expected: str, timeout: timedelta | None = None, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until the current URL contains ``expected``.

The ``expected`` argument contains the expected value in url.

Fails if ``timeout`` expires before the location contains. See
the `Timeouts` section for more information about using timeouts
and their default value.

The ``message`` argument can be used to override the default error
message.

New in SeleniumLibrary 4.0</doc>
<shortdoc>Waits until the current URL contains ``expected``.</shortdoc>
</kw>
<kw name="Wait Until Location Does Not Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="151">
<arguments repr="location: str, timeout: timedelta | None = None, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="location: str">
<name>location</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until the current URL does not contains ``location``.

The ``location`` argument contains value not expected in url.

Fails if ``timeout`` expires before the location not contains. See
the `Timeouts` section for more information about using timeouts
and their default value.

The ``message`` argument can be used to override the default error
message.

New in SeleniumLibrary 4.3</doc>
<shortdoc>Waits until the current URL does not contains ``location``.</shortdoc>
</kw>
<kw name="Wait Until Location Is" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="66">
<arguments repr="expected: str, timeout: timedelta | None = None, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected: str">
<name>expected</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until the current URL is ``expected``.

The ``expected`` argument is the expected value in url.

Fails if ``timeout`` expires before the location is. See
the `Timeouts` section for more information about using timeouts
and their default value.

The ``message`` argument can be used to override the default error
message.

New in SeleniumLibrary 4.0</doc>
<shortdoc>Waits until the current URL is ``expected``.</shortdoc>
</kw>
<kw name="Wait Until Location Is Not" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="95">
<arguments repr="location: str, timeout: timedelta | None = None, message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="location: str">
<name>location</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until the current URL is not ``location``.

The ``location`` argument is the unexpected value in url.

Fails if ``timeout`` expires before the location is not. See
the `Timeouts` section for more information about using timeouts
and their default value.

The ``message`` argument can be used to override the default error
message.

New in SeleniumLibrary 4.3</doc>
<shortdoc>Waits until the current URL is not ``location``.</shortdoc>
</kw>
<kw name="Wait Until Page Contains" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="179">
<arguments repr="text: str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until ``text`` appears on the current page.

Fails if ``timeout`` expires before the text appears. See
the `Timeouts` section for more information about using timeouts
and their default value.

``error`` can be used to override the default error message.</doc>
<shortdoc>Waits until ``text`` appears on the current page.</shortdoc>
</kw>
<kw name="Wait Until Page Contains Element" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="223">
<arguments repr="locator: WebElement | str, timeout: timedelta | None = None, error: str | None = None, limit: int | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="limit: int | None = None">
<name>limit</name>
<type name="Union" union="true">
<type name="int" typedoc="integer"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until the element ``locator`` appears on the current page.

Fails if ``timeout`` expires before the element appears. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.

The ``limit`` argument can used to define how many elements the
page should contain. When ``limit`` is `None` (default) page can
contain one or more elements. When limit is a number, page must
contain same number of elements.

``limit`` is new in SeleniumLibrary 4.4</doc>
<shortdoc>Waits until the element ``locator`` appears on the current page.</shortdoc>
</kw>
<kw name="Wait Until Page Does Not Contain" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="201">
<arguments repr="text: str, timeout: timedelta | None = None, error: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until ``text`` disappears from the current page.

Fails if ``timeout`` expires before the text disappears. See
the `Timeouts` section for more information about using timeouts
and their default value.

``error`` can be used to override the default error message.</doc>
<shortdoc>Waits until ``text`` disappears from the current page.</shortdoc>
</kw>
<kw name="Wait Until Page Does Not Contain Element" source="c:\ProgramData\Jenkins\.jenkins\workspace\Robot\RobotFramework\.venv\lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="261">
<arguments repr="locator: WebElement | str, timeout: timedelta | None = None, error: str | None = None, limit: int | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator: WebElement | str">
<name>locator</name>
<type name="Union" union="true">
<type name="WebElement"/>
<type name="str" typedoc="string"/>
</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta | None = None">
<name>timeout</name>
<type name="Union" union="true">
<type name="timedelta" typedoc="timedelta"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error: str | None = None">
<name>error</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="limit: int | None = None">
<name>limit</name>
<type name="Union" union="true">
<type name="int" typedoc="integer"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>Waits until the element ``locator`` disappears from the current page.

Fails if ``timeout`` expires before the element disappears. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.

The ``limit`` argument can used to define how many elements the
page should not contain. When ``limit`` is `None` (default) page can`t
contain any elements. When limit is a number, page must not
contain same number of elements.

``limit`` is new in SeleniumLibrary 4.4</doc>
<shortdoc>Waits until the element ``locator`` disappears from the current page.</shortdoc>
</kw>
</keywords>
<typedocs>
<type name="Any" type="Standard">
<doc>Any value is accepted. No conversion is done.
</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>Execute Async Javascript</usage>
<usage>Execute Javascript</usage>
<usage>Open Available Browser</usage>
<usage>Open Browser</usage>
</usages>
</type>
<type name="boolean" type="Standard">
<doc>Strings ``TRUE``, ``YES``, ``ON`` and ``1`` are converted to Boolean ``True``,
the empty string as well as strings ``FALSE``, ``NO``, ``OFF`` and ``0``
are converted to Boolean ``False``, and the string ``NONE`` is converted
to the Python ``None`` object. Other strings and other accepted values are
passed as-is, allowing keywords to handle them specially if
needed. All string comparisons are case-insensitive.

Examples: ``TRUE`` (converted to ``True``), ``off`` (converted to ``False``),
``example`` (used as-is)
</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
<type>None</type>
</accepts>
<usages>
<usage>Add Cookie</usage>
<usage>Add Location Strategy</usage>
<usage>Click Button</usage>
<usage>Click Element</usage>
<usage>Click Element When Visible</usage>
<usage>Click Image</usage>
<usage>Click Link</usage>
<usage>Does Alert Contain</usage>
<usage>Does Alert Not Contain</usage>
<usage>Does Element Contain</usage>
<usage>Does Frame Contain</usage>
<usage>Does Location Contain</usage>
<usage>Does Page Contain</usage>
<usage>Does Page Contain Button</usage>
<usage>Does Page Contain Checkbox</usage>
<usage>Does Page Contain Element</usage>
<usage>Does Page Contain Image</usage>
<usage>Does Page Contain Link</usage>
<usage>Does Page Contain List</usage>
<usage>Does Page Contain Radio Button</usage>
<usage>Does Page Contain Textfield</usage>
<usage>Does Table Cell Contain</usage>
<usage>Does Table Column Contain</usage>
<usage>Does Table Contain</usage>
<usage>Does Table Footer Contain</usage>
<usage>Does Table Header Contain</usage>
<usage>Does Table Row Contain</usage>
<usage>Does Textarea Contain</usage>
<usage>Does Textfield Contain</usage>
<usage>Element Should Contain</usage>
<usage>Element Should Not Contain</usage>
<usage>Element Text Should Be</usage>
<usage>Element Text Should Not Be</usage>
<usage>Get Cookies</usage>
<usage>Get List Items</usage>
<usage>Get Testability Status</usage>
<usage>Get WebElement</usage>
<usage>Get Window Size</usage>
<usage>Input Password</usage>
<usage>Input Text</usage>
<usage>Is Alert Present</usage>
<usage>Is Checkbox Selected</usage>
<usage>Is Element Attribute Equal To</usage>
<usage>Is Element Disabled</usage>
<usage>Is Element Enabled</usage>
<usage>Is Element Focused</usage>
<usage>Is Element Text</usage>
<usage>Is Element Visible</usage>
<usage>Is List Selected</usage>
<usage>Is List Selection</usage>
<usage>Is Location</usage>
<usage>Is Radio Button Selected</usage>
<usage>Is Radio Button Set To</usage>
<usage>Is Textarea Value</usage>
<usage>Is Textfield Value</usage>
<usage>Is Title</usage>
<usage>Maximize Browser Window</usage>
<usage>Open Available Browser</usage>
<usage>Open Browser</usage>
<usage>Open Chrome Browser</usage>
<usage>Print Page As Pdf</usage>
<usage>Set Download Directory</usage>
<usage>Set Window Size</usage>
</usages>
</type>
<type name="dictionary" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#dict|dictionary]
literals. They are converted to actual dictionaries using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
dictionaries and other containers.

If the type has nested types like ``dict[str, int]``, items are converted
to those types automatically. This in new in Robot Framework 6.0.

Examples: ``{'a': 1, 'b': 2}``, ``{'key': 1, 'nested': {'key': 2}}``
</doc>
<accepts>
<type>string</type>
<type>Mapping</type>
</accepts>
<usages>
<usage>Create Webdriver</usage>
<usage>Get Browser Capabilities</usage>
<usage>Get Cookies</usage>
<usage>Get Element Status</usage>
<usage>Open Available Browser</usage>
<usage>Open Browser</usage>
<usage>Open Chrome Browser</usage>
<usage>Print To Pdf</usage>
</usages>
</type>
<type name="float" type="Standard">
<doc>Conversion is done using Python's
[https://docs.python.org/library/functions.html#float|float] built-in function.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``3.14``, ``2.9979e8``, ``10 000.000 01``
</doc>
<accepts>
<type>string</type>
<type>Real</type>
</accepts>
<usages>
<usage>Get Window Size</usage>
<usage>Print Page As Pdf</usage>
<usage>Wait For Expected Condition</usage>
</usages>
</type>
<type name="integer" type="Standard">
<doc>Conversion is done using Python's [https://docs.python.org/library/functions.html#int|int]
built-in function. Floating point
numbers are accepted only if they can be represented as integers exactly.
For example, ``1.0`` is accepted and ``1.1`` is not.

Starting from RF 4.1, it is possible to use hexadecimal, octal and binary
numbers by prefixing values with ``0x``, ``0o`` and ``0b``, respectively.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``42``, ``-1``, ``0b1010``, ``10 000 000``, ``0xBAD_C0FFEE``
</doc>
<accepts>
<type>string</type>
<type>float</type>
</accepts>
<usages>
<usage>Attach Chrome Browser</usage>
<usage>Click Element At Coordinates</usage>
<usage>Click Element When Clickable</usage>
<usage>Does Alert Contain</usage>
<usage>Does Alert Not Contain</usage>
<usage>Does Page Contain Element</usage>
<usage>Does Table Cell Contain</usage>
<usage>Does Table Column Contain</usage>
<usage>Does Table Row Contain</usage>
<usage>Drag And Drop By Offset</usage>
<usage>Get Element Count</usage>
<usage>Get Element Size</usage>
<usage>Get Horizontal Position</usage>
<usage>Get Table Cell</usage>
<usage>Get Vertical Position</usage>
<usage>Get Window Position</usage>
<usage>Open Available Browser</usage>
<usage>Open Chrome Browser</usage>
<usage>Open Headless Chrome Browser</usage>
<usage>Page Should Contain Element</usage>
<usage>Set Window Position</usage>
<usage>Set Window Size</usage>
<usage>Table Cell Should Contain</usage>
<usage>Table Column Should Contain</usage>
<usage>Table Row Should Contain</usage>
<usage>Wait Until Page Contains Element</usage>
<usage>Wait Until Page Does Not Contain Element</usage>
</usages>
</type>
<type name="list" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#list|list]
literals. They are converted to actual lists using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
lists and other containers.

If the type has nested types like ``list[int]``, items are converted
to those types automatically. This in new in Robot Framework 6.0.

Examples: ``['one', 'two']``, ``[('one', 1), ('two', 2)]``
</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>Get All Links</usage>
<usage>Get Browser Aliases</usage>
<usage>Get Browser Ids</usage>
<usage>Get List Items</usage>
<usage>Get Locations</usage>
<usage>Get Selected List Labels</usage>
<usage>Get Selected List Values</usage>
<usage>Get WebElements</usage>
<usage>Get Window Handles</usage>
<usage>Get Window Identifiers</usage>
<usage>Get Window Names</usage>
<usage>Get Window Titles</usage>
<usage>Open Available Browser</usage>
<usage>Open Browser</usage>
<usage>Page Should Contain Element</usage>
<usage>Print Page As Pdf</usage>
<usage>Switch Window</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Add Cookie</usage>
<usage>Alert Should Be Present</usage>
<usage>Alert Should Not Be Present</usage>
<usage>Attach Chrome Browser</usage>
<usage>Click Button When Visible</usage>
<usage>Click Element When Clickable</usage>
<usage>Click Element When Visible</usage>
<usage>Create Webdriver</usage>
<usage>Does Alert Contain</usage>
<usage>Does Alert Not Contain</usage>
<usage>Does Page Contain Element</usage>
<usage>Element Attribute Value Should Be</usage>
<usage>Element Should Be Visible</usage>
<usage>Element Should Contain</usage>
<usage>Element Should Not Be Visible</usage>
<usage>Element Should Not Contain</usage>
<usage>Element Text Should Be</usage>
<usage>Element Text Should Not Be</usage>
<usage>Get WebElement</usage>
<usage>Handle Alert</usage>
<usage>Input Text Into Alert</usage>
<usage>Is Alert Present</usage>
<usage>Location Should Be</usage>
<usage>Location Should Contain</usage>
<usage>Open Available Browser</usage>
<usage>Open Browser</usage>
<usage>Open Chrome Browser</usage>
<usage>Page Should Contain Button</usage>
<usage>Page Should Contain Checkbox</usage>
<usage>Page Should Contain Element</usage>
<usage>Page Should Contain Image</usage>
<usage>Page Should Contain Link</usage>
<usage>Page Should Contain List</usage>
<usage>Page Should Contain Radio Button</usage>
<usage>Page Should Contain Textfield</usage>
<usage>Page Should Not Contain Button</usage>
<usage>Page Should Not Contain Checkbox</usage>
<usage>Page Should Not Contain Element</usage>
<usage>Page Should Not Contain Image</usage>
<usage>Page Should Not Contain Link</usage>
<usage>Page Should Not Contain List</usage>
<usage>Page Should Not Contain Radio Button</usage>
<usage>Page Should Not Contain Textfield</usage>
<usage>Press Keys</usage>
<usage>Print Page As Pdf</usage>
<usage>Print To Pdf</usage>
<usage>Register Keyword To Run On Failure</usage>
<usage>Screenshot</usage>
<usage>Set Default Url Scheme</usage>
<usage>Set Download Directory</usage>
<usage>Set Screenshot Directory</usage>
<usage>Submit Form</usage>
<usage>Switch Window</usage>
<usage>Textarea Should Contain</usage>
<usage>Textarea Value Should Be</usage>
<usage>Textfield Should Contain</usage>
<usage>Textfield Value Should Be</usage>
<usage>Title Should Be</usage>
<usage>Wait And Click Button</usage>
<usage>Wait For Condition</usage>
<usage>Wait For Expected Condition</usage>
<usage>Wait Until Element Contains</usage>
<usage>Wait Until Element Does Not Contain</usage>
<usage>Wait Until Element Is Enabled</usage>
<usage>Wait Until Element Is Not Visible</usage>
<usage>Wait Until Element Is Visible</usage>
<usage>Wait Until Location Contains</usage>
<usage>Wait Until Location Does Not Contain</usage>
<usage>Wait Until Location Is</usage>
<usage>Wait Until Location Is Not</usage>
<usage>Wait Until Page Contains</usage>
<usage>Wait Until Page Contains Element</usage>
<usage>Wait Until Page Does Not Contain</usage>
<usage>Wait Until Page Does Not Contain Element</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>Add Cookie</usage>
<usage>Add Location Strategy</usage>
<usage>Alert Should Be Present</usage>
<usage>Alert Should Not Be Present</usage>
<usage>Assign Id To Element</usage>
<usage>Attach Chrome Browser</usage>
<usage>Capture Element Screenshot</usage>
<usage>Capture Page Screenshot</usage>
<usage>Checkbox Should Be Selected</usage>
<usage>Checkbox Should Not Be Selected</usage>
<usage>Choose File</usage>
<usage>Clear Element Text</usage>
<usage>Click Button</usage>
<usage>Click Button When Visible</usage>
<usage>Click Element</usage>
<usage>Click Element At Coordinates</usage>
<usage>Click Element If Visible</usage>
<usage>Click Element When Clickable</usage>
<usage>Click Element When Visible</usage>
<usage>Click Image</usage>
<usage>Click Link</usage>
<usage>Cover Element</usage>
<usage>Create Webdriver</usage>
<usage>Current Frame Should Contain</usage>
<usage>Current Frame Should Not Contain</usage>
<usage>Does Alert Contain</usage>
<usage>Does Alert Not Contain</usage>
<usage>Does Element Contain</usage>
<usage>Does Frame Contain</usage>
<usage>Does Location Contain</usage>
<usage>Does Page Contain</usage>
<usage>Does Page Contain Button</usage>
<usage>Does Page Contain Checkbox</usage>
<usage>Does Page Contain Element</usage>
<usage>Does Page Contain Image</usage>
<usage>Does Page Contain Link</usage>
<usage>Does Page Contain List</usage>
<usage>Does Page Contain Radio Button</usage>
<usage>Does Page Contain Textfield</usage>
<usage>Does Table Cell Contain</usage>
<usage>Does Table Column Contain</usage>
<usage>Does Table Contain</usage>
<usage>Does Table Footer Contain</usage>
<usage>Does Table Header Contain</usage>
<usage>Does Table Row Contain</usage>
<usage>Does Textarea Contain</usage>
<usage>Does Textfield Contain</usage>
<usage>Double Click Element</usage>
<usage>Drag And Drop</usage>
<usage>Drag And Drop By Offset</usage>
<usage>Element Attribute Value Should Be</usage>
<usage>Element Should Be Disabled</usage>
<usage>Element Should Be Enabled</usage>
<usage>Element Should Be Focused</usage>
<usage>Element Should Be Visible</usage>
<usage>Element Should Contain</usage>
<usage>Element Should Not Be Visible</usage>
<usage>Element Should Not Contain</usage>
<usage>Element Text Should Be</usage>
<usage>Element Text Should Not Be</usage>
<usage>Frame Should Contain</usage>
<usage>Get All Links</usage>
<usage>Get Browser Aliases</usage>
<usage>Get Browser Ids</usage>
<usage>Get Cookie</usage>
<usage>Get Cookies</usage>
<usage>Get Dom Attribute</usage>
<usage>Get Element Attribute</usage>
<usage>Get Element Count</usage>
<usage>Get Element Size</usage>
<usage>Get Element Status</usage>
<usage>Get Horizontal Position</usage>
<usage>Get List Items</usage>
<usage>Get Location</usage>
<usage>Get Locations</usage>
<usage>Get Property</usage>
<usage>Get Selected List Label</usage>
<usage>Get Selected List Labels</usage>
<usage>Get Selected List Value</usage>
<usage>Get Selected List Values</usage>
<usage>Get Selenium Implicit Wait</usage>
<usage>Get Selenium Page Load Timeout</usage>
<usage>Get Selenium Speed</usage>
<usage>Get Selenium Timeout</usage>
<usage>Get Session Id</usage>
<usage>Get Source</usage>
<usage>Get Table Cell</usage>
<usage>Get Text</usage>
<usage>Get Title</usage>
<usage>Get Value</usage>
<usage>Get Vertical Position</usage>
<usage>Get WebElement</usage>
<usage>Get WebElements</usage>
<usage>Get Window Handles</usage>
<usage>Get Window Identifiers</usage>
<usage>Get Window Names</usage>
<usage>Get Window Titles</usage>
<usage>Go To</usage>
<usage>Handle Alert</usage>
<usage>Highlight Elements</usage>
<usage>Input Password</usage>
<usage>Input Text</usage>
<usage>Input Text Into Alert</usage>
<usage>Input Text When Element Is Visible</usage>
<usage>Is Alert Present</usage>
<usage>Is Checkbox Selected</usage>
<usage>Is Element Attribute Equal To</usage>
<usage>Is Element Disabled</usage>
<usage>Is Element Enabled</usage>
<usage>Is Element Focused</usage>
<usage>Is Element Text</usage>
<usage>Is Element Visible</usage>
<usage>Is List Selected</usage>
<usage>Is List Selection</usage>
<usage>Is Location</usage>
<usage>Is Radio Button Selected</usage>
<usage>Is Radio Button Set To</usage>
<usage>Is Textarea Value</usage>
<usage>Is Textfield Value</usage>
<usage>Is Title</usage>
<usage>List Selection Should Be</usage>
<usage>List Should Have No Selections</usage>
<usage>Location Should Be</usage>
<usage>Location Should Contain</usage>
<usage>Log Location</usage>
<usage>Log Source</usage>
<usage>Log Title</usage>
<usage>Mouse Down</usage>
<usage>Mouse Down On Image</usage>
<usage>Mouse Down On Link</usage>
<usage>Mouse Out</usage>
<usage>Mouse Over</usage>
<usage>Mouse Up</usage>
<usage>Open Available Browser</usage>
<usage>Open Browser</usage>
<usage>Open Chrome Browser</usage>
<usage>Open Context Menu</usage>
<usage>Open Headless Chrome Browser</usage>
<usage>Open User Browser</usage>
<usage>Page Should Contain</usage>
<usage>Page Should Contain Button</usage>
<usage>Page Should Contain Checkbox</usage>
<usage>Page Should Contain Element</usage>
<usage>Page Should Contain Image</usage>
<usage>Page Should Contain Link</usage>
<usage>Page Should Contain List</usage>
<usage>Page Should Contain Radio Button</usage>
<usage>Page Should Contain Textfield</usage>
<usage>Page Should Not Contain</usage>
<usage>Page Should Not Contain Button</usage>
<usage>Page Should Not Contain Checkbox</usage>
<usage>Page Should Not Contain Element</usage>
<usage>Page Should Not Contain Image</usage>
<usage>Page Should Not Contain Link</usage>
<usage>Page Should Not Contain List</usage>
<usage>Page Should Not Contain Radio Button</usage>
<usage>Page Should Not Contain Textfield</usage>
<usage>Press Key</usage>
<usage>Press Keys</usage>
<usage>Print Page As Pdf</usage>
<usage>Print To Pdf</usage>
<usage>Radio Button Should Be Set To</usage>
<usage>Radio Button Should Not Be Selected</usage>
<usage>Register Keyword To Run On Failure</usage>
<usage>Remove Location Strategy</usage>
<usage>Screenshot</usage>
<usage>Scroll Element Into View</usage>
<usage>Select All From List</usage>
<usage>Select Checkbox</usage>
<usage>Select Frame</usage>
<usage>Select From List By Index</usage>
<usage>Select From List By Label</usage>
<usage>Select From List By Value</usage>
<usage>Select Radio Button</usage>
<usage>Set Action Chain Delay</usage>
<usage>Set Default Url Scheme</usage>
<usage>Set Download Directory</usage>
<usage>Set Element Attribute</usage>
<usage>Set Focus To Element</usage>
<usage>Set Screenshot Directory</usage>
<usage>Set Selenium Implicit Wait</usage>
<usage>Set Selenium Page Load Timeout</usage>
<usage>Set Selenium Speed</usage>
<usage>Set Selenium Timeout</usage>
<usage>Simulate Event</usage>
<usage>Submit Form</usage>
<usage>Switch Browser</usage>
<usage>Switch Window</usage>
<usage>Table Cell Should Contain</usage>
<usage>Table Column Should Contain</usage>
<usage>Table Footer Should Contain</usage>
<usage>Table Header Should Contain</usage>
<usage>Table Row Should Contain</usage>
<usage>Table Should Contain</usage>
<usage>Textarea Should Contain</usage>
<usage>Textarea Value Should Be</usage>
<usage>Textfield Should Contain</usage>
<usage>Textfield Value Should Be</usage>
<usage>Title Should Be</usage>
<usage>Unselect All From List</usage>
<usage>Unselect Checkbox</usage>
<usage>Unselect From List By Index</usage>
<usage>Unselect From List By Label</usage>
<usage>Unselect From List By Value</usage>
<usage>Wait And Click Button</usage>
<usage>Wait For Condition</usage>
<usage>Wait Until Element Contains</usage>
<usage>Wait Until Element Does Not Contain</usage>
<usage>Wait Until Element Is Enabled</usage>
<usage>Wait Until Element Is Not Visible</usage>
<usage>Wait Until Element Is Visible</usage>
<usage>Wait Until Location Contains</usage>
<usage>Wait Until Location Does Not Contain</usage>
<usage>Wait Until Location Is</usage>
<usage>Wait Until Location Is Not</usage>
<usage>Wait Until Page Contains</usage>
<usage>Wait Until Page Contains Element</usage>
<usage>Wait Until Page Does Not Contain</usage>
<usage>Wait Until Page Does Not Contain Element</usage>
</usages>
</type>
<type name="timedelta" type="Standard">
<doc>Strings are expected to represent a time interval in one of
the time formats Robot Framework supports:
- a number representing seconds like ``42`` or ``10.5``
- a time string like ``1 hour 2 seconds`` or ``1h 2s``
- a "timer" string like ``01:02`` (1 minute 2 seconds) or ``01:00:03`` (1 hour 3 seconds)

Integers and floats are considered to be seconds.

See the [https://robotframework.org/robotframework/|Robot Framework User Guide]
for more details about the supported time formats.
</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
</accepts>
<usages>
<usage>Alert Should Be Present</usage>
<usage>Alert Should Not Be Present</usage>
<usage>Click Element When Clickable</usage>
<usage>Does Alert Contain</usage>
<usage>Does Alert Not Contain</usage>
<usage>Handle Alert</usage>
<usage>Input Text Into Alert</usage>
<usage>Set Action Chain Delay</usage>
<usage>Set Browser Implicit Wait</usage>
<usage>Set Selenium Implicit Wait</usage>
<usage>Set Selenium Page Load Timeout</usage>
<usage>Set Selenium Speed</usage>
<usage>Set Selenium Timeout</usage>
<usage>Wait For Condition</usage>
<usage>Wait Until Element Contains</usage>
<usage>Wait Until Element Does Not Contain</usage>
<usage>Wait Until Element Is Enabled</usage>
<usage>Wait Until Element Is Not Visible</usage>
<usage>Wait Until Element Is Visible</usage>
<usage>Wait Until Location Contains</usage>
<usage>Wait Until Location Does Not Contain</usage>
<usage>Wait Until Location Is</usage>
<usage>Wait Until Location Is Not</usage>
<usage>Wait Until Page Contains</usage>
<usage>Wait Until Page Contains Element</usage>
<usage>Wait Until Page Does Not Contain</usage>
<usage>Wait Until Page Does Not Contain Element</usage>
</usages>
</type>
<type name="tuple" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#tuple|tuple]
literals. They are converted to actual tuples using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
tuples and other containers.

If the type has nested types like ``tuple[str, int, int]``, items are converted
to those types automatically. This in new in Robot Framework 6.0.

Examples: ``('one', 'two')``, ``(('one', 1), ('two', 2))``
</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>Get Element Size</usage>
<usage>Get Window Position</usage>
<usage>Get Window Size</usage>
</usages>
</type>
</typedocs>
</keywordspec>

mtime:1741376713.4027383
{"name": "RPA.Email.ImapSmtp", "doc": "ImapSmtp is a library for sending, reading, and deleting emails.\nImapSmtp is interfacing with SMTP and IMAP protocols.\n\n**\\*About criteria argument\\***\n\nVarious keywords like `List Messages` and `Move Messages` have keyword\nargument called `criterion` which can be used to filter emails according\nto given criteria.\n\nSyntax needs to according to specification and more information about that\ncan be read from [https://robocorp.com/docs-robot-framework/development-guide/email/sending-emails-with-gmail-smtp#listing-email-messages-by-criteria](https://robocorp.com/docs-robot-framework/development-guide/email/sending-emails-with-gmail-smtp#listing-email-messages-by-criteria)\n\n**Troubleshooting**\n\n* Authentication error with GMail - \"Application-specific password required\"\n\n  :   See: [https://support.google.com/mail/answer/185833?hl=en](https://support.google.com/mail/answer/185833?hl=en)\n\n* More secure apps (XOAUTH2 protocol) - Use the OAuth2 flow as in this Portal robot:\n\n  :   [example-oauth-email](https://github.com/robocorp/example-oauth-email)\n\n      Make sure to specify a provider (and optionally a tenant) when importing\n      the library and planning to use this flow.\n\n**Examples**\n\n**Robot Framework**\n\nIt is highly recommended to secure your passwords and take care\nthat they are not stored in version control by mistake.\nSee `RPA.Robocorp.Vault` to see how to store secrets in\nRobocorp Vault.\n\nWhen sending HTML content with IMG tags, the `src` filenames must match\nthe base image name given with the `images` parameter.\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Email.ImapSmtp   smtp_server=smtp.gmail.com  smtp_port=587\nTask Setup  Authorize  account=${GMAIL_ACCOUNT}  password=${GMAIL_PASSWORD}\n\n*** Variables ***\n${GMAIL_ACCOUNT}        ACCOUNT_NAME\n${GMAIL_PASSWORD}       APP_PASSWORD\n${RECIPIENT_ADDRESS}    RECIPIENT\n${BODY_IMG1}            ${IMAGEDIR}${/}approved.png\n${BODY_IMG2}            ${IMAGEDIR}${/}invoice.png\n${EMAIL_BODY}     <h1>Heading</h1><p>Status: <img src='approved.png' alt='approved image'/></p>\n...               <p>INVOICE: <img src='invoice.png' alt='invoice image'/></p>\n\n*** Tasks ***\nSending email\n    Send Message  sender=${GMAIL_ACCOUNT}\n    ...           recipients=${RECIPIENT_ADDRESS}\n    ...           subject=Message from RPA Robot\n    ...           body=RPA Robot message body\n\nSending HTML Email With Image\n    [Documentation]     Sending email with HTML content and attachment\n    Send Message\n    ...                 sender=${GMAIL_ACCOUNT}\n    ...                 recipients=${RECIPIENT_ADDRESS}\n    ...                 subject=HTML email with body images (2) plus one attachment\n    ...                 body=${EMAIL_BODY}\n    ...                 html=${TRUE}\n    ...                 images=${BODY_IMG1}, ${BODY_IMG2}\n    ...                 attachments=example.png\n```\n\n**Python**\n\n```python\nfrom RPA.Email.ImapSmtp import ImapSmtp\n\ngmail_account = \"ACCOUNT_NAME\"\ngmail_password = \"APP_PASSWORD\"\n\nmail = ImapSmtp(smtp_server=\"smtp.gmail.com\", smtp_port=587)\nmail.authorize(account=gmail_account, password=gmail_password)\nmail.send_message(\n    sender=gmail_account,\n    recipients=\"RECIPIENT\",\n    subject=\"Message from RPA Python\",\n    body=\"RPA Python message body\",\n)\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\RPA\\Email\\ImapSmtp.py", "lineno": 193, "tags": [], "inits": [{"name": "__init__", "args": [{"name": "smtp_server", "kind": "POSITIONAL_OR_NAMED", "repr": "smtp_server: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "smtp_port", "kind": "POSITIONAL_OR_NAMED", "repr": "smtp_port: int = 587", "required": true, "defaultValue": "587", "types": ["int"], "typedocs": []}, {"name": "imap_server", "kind": "POSITIONAL_OR_NAMED", "repr": "imap_server: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "imap_port", "kind": "POSITIONAL_OR_NAMED", "repr": "imap_port: int = 993", "required": true, "defaultValue": "993", "types": ["int"], "typedocs": []}, {"name": "account", "kind": "POSITIONAL_OR_NAMED", "repr": "account: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "password", "kind": "POSITIONAL_OR_NAMED", "repr": "password: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding: str = utf-8", "required": true, "defaultValue": "utf-8", "types": ["str"], "typedocs": []}, {"name": "provider", "kind": "POSITIONAL_OR_NAMED", "repr": "provider: OAuthProvider | str = GOOGLE", "required": true, "defaultValue": "GOOGLE", "types": ["Union"], "typedocs": []}, {"name": "tenant", "kind": "POSITIONAL_OR_NAMED", "repr": "tenant: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Initialize self.  See help(type(self)) for accurate signature.\n", "tags": [], "source": null, "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.", "lineno": 291}], "keywords": [{"name": "Add Gmail Labels", "args": [{"name": "labels", "kind": "POSITIONAL_OR_NAMED", "repr": "labels", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "source_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "source_folder: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Add GMail labels to messages matching criterion and if given,\nsource folder\n\nparam labels\n\n:   comma separated list of labels to add\n\nparam criterion\n\n:   label messages matching criterion\n\nparam source_folder\n\n:   look for messages in this folder, default all folders\n\nreturn\n\n:   status of the operation\n\nExample:\n\n```robotframework\nAdd Gmail Labels  customer1   SUBJECT \"order confirmation\"\nAdd Gmail Labels  wip         SUBJECT \"order confirmation\"   customerfolder\n```\n", "tags": [], "source": null, "shortdoc": "Add GMail labels to messages matching criterion and if given, source folder", "lineno": 1746}, {"name": "Authorize", "args": [{"name": "account", "kind": "POSITIONAL_OR_NAMED", "repr": "account: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "password", "kind": "POSITIONAL_OR_NAMED", "repr": "password: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "smtp_server", "kind": "POSITIONAL_OR_NAMED", "repr": "smtp_server: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "imap_server", "kind": "POSITIONAL_OR_NAMED", "repr": "imap_server: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "smtp_port", "kind": "POSITIONAL_OR_NAMED", "repr": "smtp_port: int = None", "required": true, "defaultValue": "None", "types": ["int"], "typedocs": []}, {"name": "imap_port", "kind": "POSITIONAL_OR_NAMED", "repr": "imap_port: int = None", "required": true, "defaultValue": "None", "types": ["int"], "typedocs": []}, {"name": "is_oauth", "kind": "POSITIONAL_OR_NAMED", "repr": "is_oauth: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Authorize user to SMTP and IMAP servers.\n\nparam account\n\n:   user account as string, defaults to None\n\nparam password\n\n:   user password as string, defaults to None\n\nparam smtp_server\n\n:   SMTP server address, defaults to None\n\nparam imap_server\n\n:   IMAP server address, defaults to None\n\nparam smtp_port\n\n:   SMTP server port, defaults to None (587 for SMTP)\n\nparam imap_port\n\n:   IMAP server port, defaults to None\n\nparam is_oauth\n\n:   Use XOAUTH2 protocol with a base64 encoded OAuth2 string as\n    password\n\nWill use separately set credentials or those given in keyword call.\n\nExample:\n\n```robotframework\nAuthorize    ${username}   ${password}  smtp_server=smtp.gmail.com  smtp_port=587\n```\n", "tags": [], "source": null, "shortdoc": "Authorize user to SMTP and IMAP servers.", "lineno": 463}, {"name": "Authorize Imap", "args": [{"name": "account", "kind": "POSITIONAL_OR_NAMED", "repr": "account: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "password", "kind": "POSITIONAL_OR_NAMED", "repr": "password: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "imap_server", "kind": "POSITIONAL_OR_NAMED", "repr": "imap_server: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "imap_port", "kind": "POSITIONAL_OR_NAMED", "repr": "imap_port: int = None", "required": true, "defaultValue": "None", "types": ["int"], "typedocs": []}, {"name": "is_oauth", "kind": "POSITIONAL_OR_NAMED", "repr": "is_oauth: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Authorize to IMAP server.\n\nparam account\n\n:   IMAP account name, defaults to None\n\nparam password\n\n:   IMAP account password, defaults to None\n\nparam imap_server\n\n:   IMAP server address, defaults to None\n\nparam imap_port\n\n:   IMAP server port, defaults to None\n\nparam is_oauth\n\n:   Use XOAUTH2 protocol with a base64 encoded OAuth2 string as\n    password\n\nCan be called without giving any parameters if library\nhas been initialized with necessary information and/or\nkeyword `Set Credentials` has been called.\n\nExample:\n\n```robotframework\nAuthorize IMAP    ${username}   ${password}  imap.gmail.com  993\n```\n", "tags": [], "source": null, "shortdoc": "Authorize to IMAP server.", "lineno": 410}, {"name": "Authorize Smtp", "args": [{"name": "account", "kind": "POSITIONAL_OR_NAMED", "repr": "account: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "password", "kind": "POSITIONAL_OR_NAMED", "repr": "password: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "smtp_server", "kind": "POSITIONAL_OR_NAMED", "repr": "smtp_server: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "smtp_port", "kind": "POSITIONAL_OR_NAMED", "repr": "smtp_port: int = None", "required": true, "defaultValue": "None", "types": ["int"], "typedocs": []}, {"name": "is_oauth", "kind": "POSITIONAL_OR_NAMED", "repr": "is_oauth: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Authorize to SMTP server.\n\nparam account\n\n:   SMTP account name, defaults to None\n\nparam password\n\n:   SMTP account password, defaults to None\n\nparam smtp_server\n\n:   SMTP server address, defaults to None\n\nparam smtp_port\n\n:   SMTP server port, defaults to None (587 for SMTP)\n\nparam is_oauth\n\n:   Use XOAUTH2 protocol with a base64 encoded OAuth2 string as\n    password\n\nCan be called without giving any parameters if library\nhas been initialized with necessary information and/or\nkeyword `Set Credentials` has been called.\n\nExample:\n\n```robotframework\nAuthorize SMTP    ${username}   ${password}  smtp.gmail.com  587\n```\n", "tags": [], "source": null, "shortdoc": "Authorize to SMTP server.", "lineno": 356}, {"name": "Convert Eml File Into Message", "args": [{"name": "eml_filepath", "kind": "POSITIONAL_OR_NAMED", "repr": "eml_filepath: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "save_attachments_directory", "kind": "POSITIONAL_OR_NAMED", "repr": "save_attachments_directory: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Converts EML file into message dictionary.\n\nReturned dictionary contains:\n\n* **headers** of the email\n\n* **attachments** the filenames of the attachments or if attachments\n  have been saved then they are absolute filepaths to each attachment\n\n* **body_text** is the TEXT formatted content of the email body\n\n* **body_html** is the HTML formatted content of the email body\n\nparam eml_filepath\n\n:   filepath to the EML file\n\nparam save_attachments_directory\n\n:   path to the directory where possible\n    attachments will be saved to, if not given then attachment filenames are\n    returned in a list of the return dictionary in the key 'attachments'\n\nreturn\n\n:   dictionary containing information aboutthe EML message\n", "tags": [], "source": null, "shortdoc": "Converts EML file into message dictionary.", "lineno": 1962}, {"name": "Create Folder", "args": [{"name": "folder_name", "kind": "POSITIONAL_OR_NAMED", "repr": "folder_name: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Create email folder\n\nparam folder_name\n\n:   name for the new folder\n\nreturn\n\n:   True if operation was successful, False if not\n\nExample:\n\n```robotframework\nCreate Folder   filtered\n```\n", "tags": [], "source": null, "shortdoc": "Create email folder", "lineno": 1452}, {"name": "Delete Folder", "args": [{"name": "folder_name", "kind": "POSITIONAL_OR_NAMED", "repr": "folder_name: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Delete email folder\n\nparam folder_name\n\n:   current folder name\n\nreturn\n\n:   True if operation was successful, False if not\n\nExample:\n\n```robotframework\nDelete Folder   filtered\n```\n", "tags": [], "source": null, "shortdoc": "Delete email folder", "lineno": 1424}, {"name": "Delete Message", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str | dict = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "source_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "source_folder: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Delete single message from server based on criterion.\n\nparam criterion\n\n:   filter messages based on this search, can also be a\n    message dictionary\n\nparam source_folder\n\n:   defaults to already selected folder, but can be\n    set to delete message in a specific folder\n\nreturn\n\n:   True if success, False if not\n\nIf criterion does not return exactly 1 message then delete is not done.\n\nExample:\n\n```robotframework\nDelete Message  SUBJECT \"Greetings RPA developer\"\n```\n", "tags": [], "source": null, "shortdoc": "Delete single message from server based on criterion.", "lineno": 965}, {"name": "Delete Messages", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str | list = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "limit", "kind": "POSITIONAL_OR_NAMED", "repr": "limit: int = None", "required": true, "defaultValue": "None", "types": ["int"], "typedocs": []}, {"name": "source_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "source_folder: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Delete messages from server based on criterion.\n\nparam criterion\n\n:   filter messages based on this search, can also be a\n    list of message dictionaries\n\nparam limit\n\n:   maximum number of message to delete\n\nparam source_folder\n\n:   defaults to already selected folder, but can be\n    set to delete message in a specific folder\n\nreturn\n\n:   True if success, False if not\n\nExample:\n\n```robotframework\nDelete Messages  SUBJECT Greetings\n```\n", "tags": [], "source": null, "shortdoc": "Delete messages from server based on criterion.", "lineno": 1012}, {"name": "Do Message Actions", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str = ", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "actions", "kind": "POSITIONAL_OR_NAMED", "repr": "actions: list = None", "required": true, "defaultValue": "None", "types": ["list"], "typedocs": []}, {"name": "source_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "source_folder: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "target_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "target_folder: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "labels", "kind": "POSITIONAL_OR_NAMED", "repr": "labels: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "limit", "kind": "POSITIONAL_OR_NAMED", "repr": "limit: int = None", "required": true, "defaultValue": "None", "types": ["int"], "typedocs": []}, {"name": "overwrite", "kind": "POSITIONAL_OR_NAMED", "repr": "overwrite: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "prefix", "kind": "POSITIONAL_OR_NAMED", "repr": "prefix: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Do actions to messages matching criterion and if given,\nsource folder\n\nActions can be:\n\n* msg_copy\n\n* msg_delete\n\n* msg_flag\n\n* msg_unflag\n\n* msg_read\n\n* msg_unread\n\n* msg_save\n\n* msg_attachment_save\n\n* glabel_add\n\n* glabel_remove\n\nResult object contains following attributes:\n\n* actions_done, number of messages on which action was performed\n\n* message_count, number of messages matching criterion\n\n* ids, message ids matching criterion\n\n* uids, dictionary of message uids and message content\n\nparam criterion\n\n:   perform actions on messages matching this\n\nparam actions\n\n:   list of actions to perform on matching messages\n\nparam source_folder\n\n:   look for messages in this folder, default all folders\n\nparam target_folder\n\n:   can be file path or email folder\n    (for example action: msg_copy)\n\nparam labels\n\n:   comma separated list of labels (for example action: glabel_add)\n\nparam limit\n\n:   maximum number of messages (for example action: msg_delete)\n\nparam overwrite\n\n:   to control if file should overwrite\n    (for example action: msg_attachment_save)\n\nparam prefix\n\n:   prefix to be added into filename (for example: msg_save)\n\nreturn\n\n:   result object\n\nExample:\n\n```robotframework\n${actions}=   Create List  msg_unflag  msg_read  msg_save  msg_attachment_save\nDo Message Actions    SUBJECT \"Order confirmation\"\n...                   ${actions}\n...                   source_folder=XXX\n...                   target_folder=${CURDIR}\n...                   overwrite=True\n```\n", "tags": [], "source": null, "shortdoc": "Do actions to messages matching criterion and if given, source folder", "lineno": 1788}, {"name": "Email To Document", "args": [{"name": "input_source", "kind": "POSITIONAL_OR_NAMED", "repr": "input_source: str | Path | BinaryIO | bytes", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "output_path", "kind": "POSITIONAL_OR_NAMED", "repr": "output_path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Convert a raw e-mail into a Word document.\n\nThis keyword extracts the HTML (or Text) content from the passed input e-mail\nand saves it into docx format at the provided output path.\n\nparam input_source\n\n:   Path, bytes or file-like object with the input raw e-mail\n    content\n\nparam output_path\n\n:   Where to save the output docx file\n\nExample:\n\n**Robot Framework**\n\n```robotframework\nConvert email to docx\n    ${mail_file} =     Get Work Item File    mail.eml\n    Email To Document    ${mail_file}    ${OUTPUT_DIR}${/}mail.docx\n```\n\n**Python**\n\n```python\nfrom pathlib import Path\nfrom RPA.Email.ImapSmtp import ImapSmtp\nfrom RPA.Robocorp.WorkItems import WorkItems\n\nlib_work = WorkItems()\nlib_mail = ImapSmtp()\n\ndef convert_email_to_docx():\n    lib_work.get_input_work_item()\n    mail_file = lib_work.get_work_item_file(\"mail.eml\")\n    lib_mail.email_to_document(mail_file, Path(\"./output\") / \"mail.docx\")\n```\n", "tags": [], "source": null, "shortdoc": "Convert a raw e-mail into a Word document.", "lineno": 1868}, {"name": "Flag Messages", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str | dict = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "unflag", "kind": "POSITIONAL_OR_NAMED", "repr": "unflag: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Mark messages as flagged\n\nparam criterion\n\n:   mark messages matching criterion\n\nparam unflag\n\n:   to mark messages as not flagged\n\nreturn\n\n:   successful operations (int), matching messages (int)\n\nExample:\n\n```robotframework\n${flagged}  ${oftotal}    Flag Messages   SUBJECT rpa\n${unflagged}  ${oftotal}  Flag Messages   SUBJECT rpa  unflag=True\n```\n", "tags": [], "source": null, "shortdoc": "Mark messages as flagged", "lineno": 1480}, {"name": "Generate Oauth String", "args": [{"name": "username", "kind": "POSITIONAL_OR_NAMED", "repr": "username: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "access_token", "kind": "POSITIONAL_OR_NAMED", "repr": "access_token: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Generate and return an OAuth2 string compatible with the IMAP/POP/SMTP\nXOAUTH2 protocol.\n\nThis string usually gets passed to the `Authorize` keyword as password when\nis\\_oauth=${True}.\n\nparam username\n\n:   The e-mail address you're going to send the e-mail with.\n\nparam access_token\n\n:   Access token string found in the dictionary obtained with\n    `Get OAuth Token` or `Refresh OAuth Token`.\n\nreturns\n\n:   Base64 encoded string packing these credentials and replacing the\n    legacy password when enabling the OAuth2 flow.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nAuthorize ImapSmtp\n    ${password} =   Generate OAuth String    ${username}\n    ...    ${token}[access_token]\n    Authorize    account=${username}    is_oauth=${True}\n    ...     password=${password}\n```\n", "tags": [], "source": null, "shortdoc": "Generate and return an OAuth2 string compatible with the IMAP/POP/SMTP XOAUTH2 protocol.", "lineno": 1935}, {"name": "Generate Oauth Url", "args": [{"name": "client_id", "kind": "POSITIONAL_OR_NAMED", "repr": "client_id: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Generates an authorization URL which must be opened by the user to start the\nOAuth2 flow and obtain an authorization code as response.\n\nparam client_id\n\n:   Client app ID. (generated by the provider)\n\nreturns\n\n:   Authorization URL string not containing any sensitive info in it.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nStart OAuth Flow\n    ${auth_url} =    Generate OAuth URL\n    ...     client_id=810482312368-19htmcgcj*******googleusercontent.com\n    Log     Start OAuth2 flow: ${auth_url}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\RPA\\Email\\common.py", "shortdoc": "Generates an authorization URL which must be opened by the user to start the OAuth2 flow and obtain an authorization code as response.", "lineno": 73}, {"name": "Get Decoded Email Body", "args": [{"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "html_first", "kind": "POSITIONAL_OR_NAMED", "repr": "html_first: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Decodes email body and extracts its text/html content.\n\nAutomatically detects character set if the header is not set.\n\nparam message\n\n:   Raw 7-bit message body input e.g. from imaplib. Double\n    encoded in quoted-printable and latin-1\n\nparam html_first\n\n:   Prioritize html extraction over text when this is True\n\nreturns\n\n:   Message body as unicode string and a boolean telling if the message\n    has attachments\n", "tags": [], "source": null, "shortdoc": "Decodes email body and extracts its text/html content.", "lineno": 713}, {"name": "Get Folder List", "args": [{"name": "subdirectory", "kind": "POSITIONAL_OR_NAMED", "repr": "subdirectory: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Get list of folders on the server\n\nparam subdirectory\n\n:   list subdirectories for this folder\n\nparam pattern\n\n:   list folders matching this pattern\n\nreturn\n\n:   list of folders\n\nExample:\n\n```robotframework\n@{folders}  Get Folder List\n@{folders}  Get Folder List  pattern=important\n@{folders}  Get Folder List  subdirectory=sub\n```\n", "tags": [], "source": null, "shortdoc": "Get list of folders on the server", "lineno": 1329}, {"name": "Get Oauth Token", "args": [{"name": "client_secret", "kind": "POSITIONAL_OR_NAMED", "repr": "client_secret: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "response_url", "kind": "POSITIONAL_OR_NAMED", "repr": "response_url: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Exchanges the code obtained previously with `Generate OAuth URL` for a\ntoken.\n\nparam client_secret\n\n:   Client app secret. (generated by the provider)\n\nparam response_url\n\n:   The final URL containing the authorization code found in\n    the address bar after authenticating and authorizing the Client app\n    through the authorization URL.\n\nreturns\n\n:   A dictionary containing the access & refresh token, plus metadata.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nFinish OAuth Flow\n    ${token} =      Get OAuth Token\n    ...     client_secret=GOCSPX-******mqZAW89\n    ...     response_url=${resp_url}  # redirect of `Generate OAuth URL`\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\RPA\\Email\\common.py", "shortdoc": "Exchanges the code obtained previously with `Generate OAuth URL` for a token.", "lineno": 113}, {"name": "List Messages", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str = ", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "source_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "source_folder: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "readonly", "kind": "POSITIONAL_OR_NAMED", "repr": "readonly: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Return list of messages matching criterion.\n\nparam criterion\n\n:   list emails matching this, defaults to \"\"\n\nparam source_folder\n\n:   list messages from this folder\n\nparam readonly\n\n:   set False if you want to mark matching messages as read\n\nreturn\n\n:   list of messages\n\n*Note.* listing messages without source\\_folder might take a long time\n\nExample:\n\n```robotframework\n@{emails}  List Messages  SUBJECT \"rpa task\"\nFOR  ${email}  IN  @{EMAILS}\n    Log  ${email}[Subject]\n    Log  ${email}[From]\n    Log  ${email}[Date]\n    Log  ${email}[Delivered-To]\n    Log  ${email}[Received]\n    Log  ${email}[Has-Attachments]\n    Log  ${email}[uid]\nEND\n```\n", "tags": [], "source": null, "shortdoc": "Return list of messages matching criterion.", "lineno": 1101}, {"name": "Mark As Read", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str | dict = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "unread", "kind": "POSITIONAL_OR_NAMED", "repr": "unread: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Mark messages as read\n\nparam criterion\n\n:   mark messages matching criterion\n\nparam unread\n\n:   to mark messages as not read\n\nreturn\n\n:   successful operations (int), matching messages (int)\n\nExample:\n\n```robotframework\n${read}  ${oftotal}  Mark As Read   SUBJECT rpa\n```\n", "tags": [], "source": null, "shortdoc": "Mark messages as read", "lineno": 1523}, {"name": "Mark As Unread", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str | dict = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Mark messages as not read\n\nparam criterion\n\n:   mark messages matching criterion\n\nreturn\n\n:   successful operations (int), matching messages (int)\n\nExample:\n\n```robotframework\n${unread}  ${oftotal}  Mark As Unread   SUBJECT rpa\n```\n", "tags": [], "source": null, "shortdoc": "Mark messages as not read", "lineno": 1550}, {"name": "Move Messages", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str | dict = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "target_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "target_folder: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "source_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "source_folder: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Move messages from source folder to target folder\n\nparam criterion\n\n:   move messages matching criterion\n\nparam source_folder\n\n:   location of the messages, default INBOX\n\nparam target_folder\n\n:   where messages should be move into\n\nreturn\n\n:   True if all move operations succeeded, False if not\n\nExample:\n\n```robotframework\n${result}=    Move Messages\n...    criterion=SUBJECT \"order confirmation 32\"\n...    target_folder=yyy\n\n${result}=    Move Messages\n...    criterion=ALL\n...    source_folder=yyy\n...    target_folder=XXX\n```\n", "tags": [], "source": null, "shortdoc": "Move messages from source folder to target folder", "lineno": 1614}, {"name": "Move Messages By Ids", "args": [{"name": "message_ids", "kind": "POSITIONAL_OR_NAMED", "repr": "message_ids: str | List", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "target_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "target_folder: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "source_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "source_folder: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "use_gmail_search", "kind": "POSITIONAL_OR_NAMED", "repr": "use_gmail_search: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Move message by their Message-ID's from source folder to target folder\n\nparam message_ids\n\n:   one Message-ID as string or list of Message-IDs\n\nparam source_folder\n\n:   location of the messages, default INBOX\n\nparam target_folder\n\n:   where messages should be move into\n\nparam use_gmail_search\n\n:   set to True to use Rfc822msgid search, default\n    is HEADER Message-ID search\n\nreturn\n\n:   True if all move operations succeeded, False if not\n", "tags": [], "source": null, "shortdoc": "Move message by their Message-ID's from source folder to target folder", "lineno": 1679}, {"name": "Refresh Oauth Token", "args": [{"name": "client_id", "kind": "POSITIONAL_OR_NAMED", "repr": "client_id: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "client_secret", "kind": "POSITIONAL_OR_NAMED", "repr": "client_secret: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "token", "kind": "POSITIONAL_OR_NAMED", "repr": "token: dict", "required": true, "defaultValue": null, "types": ["dict"], "typedocs": []}], "doc": "Refreshes the token as the access one usually expires after 1h and the\nrefresh one never expires. (as long as it doesn't get revoked)\n\nparam client_id\n\n:   Client app ID. (generated by the provider)\n\nparam client_secret\n\n:   Client app secret. (generated by the provider)\n\nparam token\n\n:   Full token dictionary previously obtained with\n    `Get OAuth Token`.\n\nreturns\n\n:   A token dictionary containing a new access token and updated\n    metadata.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nRefresh OAuth Flow\n    ${token} =      Refresh OAuth Token\n    ...     client_id=810482312368-19htmcgcj*******googleusercontent.com\n    ...     client_secret=GOCSPX-******mqZAW89\n    ...     token=${token}  # from `Get OAuth Token`\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\RPA\\Email\\common.py", "shortdoc": "Refreshes the token as the access one usually expires after 1h and the refresh one never expires. (as long as it doesn't get revoked)", "lineno": 142}, {"name": "Remove Gmail Labels", "args": [{"name": "labels", "kind": "POSITIONAL_OR_NAMED", "repr": "labels", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "source_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "source_folder: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Remove GMail labels to messages matching criterion and if given,\nsource folder\n\nparam labels\n\n:   comma separated list of labels to remove\n\nparam criterion\n\n:   unlabel messages matching criterion\n\nparam source_folder\n\n:   look for messages in this folder, default all folders\n\nreturn\n\n:   status of the operation\n\nExample:\n\n```robotframework\nRemove Gmail Labels  wip  SUBJECT \"order confirmation\"\nRemove Gmail Labels  wip  SUBJECT \"order confirmation\"  customerfolder\n```\n", "tags": [], "source": null, "shortdoc": "Remove GMail labels to messages matching criterion and if given, source folder", "lineno": 1767}, {"name": "Rename Folder", "args": [{"name": "oldname", "kind": "POSITIONAL_OR_NAMED", "repr": "oldname: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "newname", "kind": "POSITIONAL_OR_NAMED", "repr": "newname: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "suppress_error", "kind": "POSITIONAL_OR_NAMED", "repr": "suppress_error: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Rename email folder\n\nparam oldname\n\n:   current folder name\n\nparam newname\n\n:   new name for the folder\n\nparam suppress_error\n\n:   to silence warning message, defaults to False\n\nreturn\n\n:   True if operation was successful, False if not\n\nExample:\n\n```robotframework\nRename Folder   subfolder   filtered\n```\n", "tags": [], "source": null, "shortdoc": "Rename email folder", "lineno": 1390}, {"name": "Save Attachment", "args": [{"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: dict | Message", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "target_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "target_folder: str | None", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "overwrite", "kind": "POSITIONAL_OR_NAMED", "repr": "overwrite: bool", "required": true, "defaultValue": null, "types": ["bool"], "typedocs": []}, {"name": "prefix", "kind": "POSITIONAL_OR_NAMED", "repr": "prefix: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Save mail attachment of a single given email on the local disk.\n\nparam message\n\n:   message item\n\nparam target_folder\n\n:   local folder for saving attachments to (needs to exist),\n    defaults to user's home directory if None\n\nparam overwrite\n\n:   overwrite existing file if True, defaults to False\n\nparam prefix\n\n:   optional filename prefix added to the attachments, empty by\n    default\n\nreturn\n\n:   list of saved attachments (list of absolute filepaths) in one email\n\nExample:\n\n```robotframework\n@{emails} =    List Messages    ALL\nFOR    ${email}    IN    @{emails}\n    IF    ${email}[Has-Attachments]\n        Log To Console    Saving attachment for: ${email}[Subject]\n        ${attachments} =    Save Attachment\n        ...    ${email}\n        ...    target_folder=${CURDIR}\n        ...    overwrite=${True}\n        Log To Console    Saved attachments: ${attachments}\n    END\nEND\n```\n", "tags": [], "source": null, "shortdoc": "Save mail attachment of a single given email on the local disk.", "lineno": 1188}, {"name": "Save Attachments", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str = ", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "target_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "target_folder: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "overwrite", "kind": "POSITIONAL_OR_NAMED", "repr": "overwrite: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "prefix", "kind": "POSITIONAL_OR_NAMED", "repr": "prefix: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Save mail attachments of emails matching criterion on the local disk.\n\nparam criterion\n\n:   attachments are saved for mails matching this, defaults to \"\"\n\nparam target_folder\n\n:   local folder for saving attachments to (needs to exist),\n    defaults to user's home directory if None\n\nparam overwrite\n\n:   overwrite existing file if True, defaults to False\n\nparam prefix\n\n:   optional filename prefix added to the attachments, empty by\n    default\n\nreturn\n\n:   list of saved attachments (absolute file paths) of all emails\n\nExample:\n\n```robotframework\n${attachments} =    Save Attachments    SUBJECT \"rpa task\"\n...    target_folder=${CURDIR}${/}messages  overwrite=${True}\nFOR  ${file}  IN  @{attachments}\n    OperatingSystem.File Should Exist  ${file}\nEND\n```\n", "tags": [], "source": null, "shortdoc": "Save mail attachments of emails matching criterion on the local disk.", "lineno": 1151}, {"name": "Save Messages", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str | dict | list | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "target_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "target_folder: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "prefix", "kind": "POSITIONAL_OR_NAMED", "repr": "prefix: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Save messages based on criteria and store them to target folder\nwith attachment files.\n\nDoes not save message if target\\_folder is not given.\n\nparam criterion\n\n:   filter messages based on this, defaults to \"\"\n\nparam target_folder\n\n:   path to folder where message are saved, defaults to None\n\nparam prefix\n\n:   optional filename prefix added to the attachments, empty by\n    default\n\nreturn\n\n:   True if succeeded, False otherwise\n\nExample:\n\n```robotframework\nSave Messages  SUBJECT Important message  target_folder=${USERDIR}${/}messages\n```\n", "tags": [], "source": null, "shortdoc": "Save messages based on criteria and store them to target folder with attachment files.", "lineno": 1056}, {"name": "Select Folder", "args": [{"name": "folder_name", "kind": "POSITIONAL_OR_NAMED", "repr": "folder_name: str = INBOX", "required": true, "defaultValue": "INBOX", "types": ["str"], "typedocs": []}, {"name": "readonly", "kind": "POSITIONAL_OR_NAMED", "repr": "readonly: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Select folder by name\n\nparam folder_name\n\n:   name of the folder to select\n\nparam readonly\n\n:   if set to True then message flags are not modified\n\nreturn\n\n:   message count in the selected folder\n\nReturns number of messages in the folder or\nexception if folder does not exist on the server.\n\nExample:\n\n```robotframework\nSelect Folder   subfolder\n```\n", "tags": [], "source": null, "shortdoc": "Select folder by name", "lineno": 1363}, {"name": "Send Message", "args": [{"name": "sender", "kind": "POSITIONAL_OR_NAMED", "repr": "sender: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "recipients", "kind": "POSITIONAL_OR_NAMED", "repr": "recipients: List[str] | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "subject", "kind": "POSITIONAL_OR_NAMED", "repr": "subject: str = ", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "body", "kind": "POSITIONAL_OR_NAMED", "repr": "body: str = ", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "attachments", "kind": "POSITIONAL_OR_NAMED", "repr": "attachments: List[str] | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "html", "kind": "POSITIONAL_OR_NAMED", "repr": "html: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "images", "kind": "POSITIONAL_OR_NAMED", "repr": "images: List[str] | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "cc", "kind": "POSITIONAL_OR_NAMED", "repr": "cc: List[str] | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "bcc", "kind": "POSITIONAL_OR_NAMED", "repr": "bcc: List[str] | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "attachment_position", "kind": "POSITIONAL_OR_NAMED", "repr": "attachment_position: AttachmentPosition | None = TOP", "required": true, "defaultValue": "TOP", "types": ["Union"], "typedocs": []}, {"name": "in_reply_to", "kind": "POSITIONAL_OR_NAMED", "repr": "in_reply_to: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "return_path", "kind": "POSITIONAL_OR_NAMED", "repr": "return_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "reply_to", "kind": "POSITIONAL_OR_NAMED", "repr": "reply_to: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Send SMTP email\n\nparam sender\n\n:   who is sending, ie. 'from'\n\nparam recipients\n\n:   who is receiving, ie. 'to'\n\nparam subject\n\n:   mail subject field\n\nparam body\n\n:   mail body content\n\nparam attachments\n\n:   list of filepaths to attach\n\nparam html\n\n:   if message content is in HTML, default False\n\nparam images\n\n:   list of filepaths for inline images\n\nparam cc\n\n:   list of email addresses for email 'cc' field\n\nparam bcc\n\n:   list of email addresses for email 'bcc' field\n\nparam attachment_position\n\n:   content position for attachment, default top\n\nparam in_reply_to\n\n:   the 'Message ID' to which this message is in reply to,\n    for example <message\\_id\\_for\\_reply\\_to>\n\nparam return_path\n\n:   email address which should receive \"bounce messages\"\n\nparam reply_to\n\n:   email address which should receive the reply\n\n**Valid sender values**\n\n* First Lastname <[address@domain](mailto:address@domain)>\n\n* [address@domain](mailto:address@domain)\n\n**About in_reply_to**\n\nIn addition of setting in\\_reply\\_to parameter to match the 'Message ID'\nof the email this message is replying to, some email servers require that\nalso subject of the original email is included in the reply email subject\nwith \n\n```\n`\n```\n\nre: \\` prefix, ie. \"re: Why it is best to use Robocorp RPA\" or with\nthe original email subject.\n\n```\nSystem Message: <string>:, line 25\n\n<string>:25: (WARNING/2) Inline interpreted text or phrase reference start-string without end-string.\n```\n\nAnd please note that in\\_reply\\_to the 'Message ID' needs to contain < in\nthe start of the ID and > at the end of the ID.\n\n**About return_path**\n\nEmail servers tend to set 'Return-Path' of the email on their own so in\nsome cases user given address won't work as the email server does not\nuse the user set address. If possible, the email server's configuration\ncan be changed to ensure that 'Return-Path' header is respected.\n\nExample:\n\n```robotframework\nSend Message  sender@domain.com  recipient@domain.com\n...           cc=need_to_know@domain.com\n...           bcc=hidden_copy@domain.com\n...           subject=Greetings Software Robot Developer\n...           body=${email_body}\n...           attachments=${CURDIR}${/}report.pdf\n\n# Fixing attachments to the bottom of the content\nSend Message  sender@domain.com  recipient@domain.com\n...           subject=Greetings Software Robot Developer\n...           body=${email_body}\n...           attachments=${CURDIR}${/}report.pdf\n...           attachment_position=bottom\n```\n", "tags": [], "source": null, "shortdoc": "Send SMTP email", "lineno": 510}, {"name": "Send Smtp Hello", "args": [], "doc": "Send hello message to SMTP server.\n\nRequired step when creating SMTP connection.\n", "tags": [], "source": null, "shortdoc": "Send hello message to SMTP server.", "lineno": 501}, {"name": "Set Credentials", "args": [{"name": "account", "kind": "POSITIONAL_OR_NAMED", "repr": "account: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "password", "kind": "POSITIONAL_OR_NAMED", "repr": "password: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Set credentials\n\nparam account\n\n:   user account as string, defaults to None\n\nparam password\n\n:   user password as string, defaults to None\n\nExample:\n\n```robotframework\nSet Credentials   ${username}   ${password}\nAuthorize\n```\n", "tags": [], "source": null, "shortdoc": "Set credentials", "lineno": 338}, {"name": "Unflag Messages", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str | dict = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Mark messages as not flagged\n\nparam criterion\n\n:   mark messages matching criterion\n\nreturn\n\n:   successful operations (int), matching messages (int)\n\nExample:\n\n```robotframework\n${unflagged}  ${oftotal}  Unflag Messages   SUBJECT rpa\n```\n", "tags": [], "source": null, "shortdoc": "Mark messages as not flagged", "lineno": 1508}, {"name": "Wait For Message", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str = ", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float = 5.0", "required": true, "defaultValue": "5.0", "types": ["float"], "typedocs": []}, {"name": "interval", "kind": "POSITIONAL_OR_NAMED", "repr": "interval: float = 1.0", "required": true, "defaultValue": "1.0", "types": ["float"], "typedocs": []}, {"name": "readonly", "kind": "POSITIONAL_OR_NAMED", "repr": "readonly: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Wait for email matching criterion to arrive into mailbox.\n\nparam criterion\n\n:   message filter to wait for, defaults to \"\"\n\nparam timeout\n\n:   total time in seconds to wait for email, defaults to 5.0\n\nparam interval\n\n:   time in seconds for new check, defaults to 1.0\n\nparam readonly\n\n:   set False if you want to mark matching messages as read\n\nreturn\n\n:   list of messages\n\nExample:\n\n```robotframework\n@{emails}  Wait For Message  SUBJECT \"rpa task\"  timeout=300  interval=10\n```\n", "tags": [], "source": null, "shortdoc": "Wait for email matching criterion to arrive into mailbox.", "lineno": 1279}], "dataTypes": {}, "typedocs": []}
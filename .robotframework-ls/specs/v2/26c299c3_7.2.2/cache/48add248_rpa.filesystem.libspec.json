mtime:1741376689.156752
{"name": "RPA.FileSystem", "doc": "The FileSystem library can be used to interact with files and directories\non the local computer. It can inspect and list files, remove and create them,\nread contents from files, and write data out.\n\nIt shadows the built-in OperatingSystem library but contains keywords\nwhich are more RPA-oriented.\n\n**Examples**\n\n**Robot Framework**\n\nThe library allows, for instance, iterating over files and inspecting them.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.FileSystem\n\n*** Keywords ***\nDelete large files\n    ${files}=    List files in directory    archive/orders/\n    FOR    ${file}  IN  @{FILES}\n        Run keyword if    ${file.size} > 10**8    Remove file    ${file}\n    END\n\nRead process output\n    Start external program\n    Wait until modified    process.log\n    ${output}=  Read file  process.log\n    [Return]    ${output}\n```\n\n**Python**\n\nThe library can also be used inside Python.\n\n```python\nfrom RPA.FileSystem import FileSystem\n\ndef move_to_archive():\n    lib = FileSystem()\n\n    matches = lib.find_files(\"**/*.xlsx\")\n    if matches:\n        lib.create_directory(\"archive\")\n        lib.move_files(matches, \"archive\")\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\RPA\\FileSystem.py", "lineno": 72, "tags": [], "inits": [], "keywords": [{"name": "Absolute Path", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns the absolute path to a file, and resolves symlinks.\n\nparam path\n\n:   path that will be resolved\n\nreturn\n\n:   absolute path to file as a string\n", "tags": [], "source": null, "shortdoc": "Returns the absolute path to a file, and resolves symlinks.", "lineno": 817}, {"name": "Append To Binary File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "content", "kind": "POSITIONAL_OR_NAMED", "repr": "content: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}], "doc": "Appends binary content to the given file.\n\nSee `Create Binary File` for usage example.\n\nparam path\n\n:   path to file to append to\n\nparam content\n\n:   content to append\n", "tags": [], "source": null, "shortdoc": "Appends binary content to the given file.", "lineno": 503}, {"name": "Append To File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "content", "kind": "POSITIONAL_OR_NAMED", "repr": "content: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding: str = utf-8", "required": true, "defaultValue": "utf-8", "types": ["str"], "typedocs": []}], "doc": "Appends text to the given file.\n\nSee `Create File` for usage example.\n\nparam path\n\n:   path to file to append to\n\nparam content\n\n:   content to append\n\nparam encoding\n\n:   character encoding of appended content\n", "tags": [], "source": null, "shortdoc": "Appends text to the given file.", "lineno": 485}, {"name": "Change File Extension", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "extension", "kind": "POSITIONAL_OR_NAMED", "repr": "extension: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Replaces file extension for file at given path. the file\nextension can be removed by passing an empty string.\n\nparam path\n\n:   path to file to rename\n\nparam extension\n\n:   new extension, e.g. .xlsx\n\nExample:\n\n```robotframework\n*** Tasks ***\nChange a file extension\n    Change file extension\n    ...    devdata/work-items-in/default/orders.xls\n    ...    .xlsx\n```\n", "tags": [], "source": null, "shortdoc": "Replaces file extension for file at given path. the file extension can be removed by passing an empty string.", "lineno": 778}, {"name": "Copy Directory", "args": [{"name": "source", "kind": "POSITIONAL_OR_NAMED", "repr": "source: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "destination", "kind": "POSITIONAL_OR_NAMED", "repr": "destination: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Copy directory from source path to destination path.\n\nparam source\n\n:   path to source directory\n\nparam destination\n\n:   path to copy destination\n\nExample:\n\n```robotframework\n*** Tasks ***\nCopy a directory\n    Copy directory    output    temp\n```\n", "tags": [], "source": null, "shortdoc": "Copy directory from source path to destination path.", "lineno": 664}, {"name": "Copy File", "args": [{"name": "source", "kind": "POSITIONAL_OR_NAMED", "repr": "source: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "destination", "kind": "POSITIONAL_OR_NAMED", "repr": "destination: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Copy a file from source path to destination path.\n\nSee `Is Directory Empty` for usage example.\n\nparam source\n\n:   path to source file\n\nparam destination\n\n:   path to copy destination\n", "tags": [], "source": null, "shortdoc": "Copy a file from source path to destination path.", "lineno": 619}, {"name": "Copy Files", "args": [{"name": "sources", "kind": "POSITIONAL_OR_NAMED", "repr": "sources: List[str | Path]", "required": true, "defaultValue": null, "types": ["List"], "typedocs": []}, {"name": "destination", "kind": "POSITIONAL_OR_NAMED", "repr": "destination: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Copy multiple files to destination folder.\n\nparam sources\n\n:   list of source files\n\nparam destination\n\n:   path to destination folder\n\nExample:\n\n```robotframework\n*** Tasks ***\nCopy some files\n    ${files}=    Find files    devdata/*.json\n    Copy files    ${files}    output\n```\n", "tags": [], "source": null, "shortdoc": "Copy multiple files to destination folder.", "lineno": 637}, {"name": "Create Binary File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "content", "kind": "POSITIONAL_OR_NAMED", "repr": "content: Any | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "overwrite", "kind": "POSITIONAL_OR_NAMED", "repr": "overwrite: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Creates a new binary file, and writes content if any is given.\n\nparam path\n\n:   path to file to write\n\nparam content\n\n:   content to write to file (optional)\n\nparam overwrite\n\n:   replace destination file if it already exists\n\nExample:\n\n```robotframework\n*** Tasks ***\nCreate a new file\n    ${content}=    Get\n    ...    url=https://file-examples.com/storage/fe88505b6162b2538a045ce/2017/10/file_example_JPG_100kB.jpg\n    Create binary file    output/sample.jpg    content=${content.content}    overwrite=${True}\n```\n", "tags": [], "source": null, "shortdoc": "Creates a new binary file, and writes content if any is given.", "lineno": 458}, {"name": "Create Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "parents", "kind": "POSITIONAL_OR_NAMED", "repr": "parents: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "exist_ok", "kind": "POSITIONAL_OR_NAMED", "repr": "exist_ok: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Creates a directory and (optionally) non-existing parent directories.\n\nparam path\n\n:   path to new directory\n\nparam parents\n\n:   create missing parent directories (defaults to `False`)\n\nparam exist_ok\n\n:   continue without errors if directory\n    already exists (defaults to `True`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nCreate new path\n    Create directory    output/my/new/path    parents=${True}\n```\n", "tags": [], "source": null, "shortdoc": "Creates a directory and (optionally) non-existing parent directories.", "lineno": 518}, {"name": "Create File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "content", "kind": "POSITIONAL_OR_NAMED", "repr": "content: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding: str = utf-8", "required": true, "defaultValue": "utf-8", "types": ["str"], "typedocs": []}, {"name": "overwrite", "kind": "POSITIONAL_OR_NAMED", "repr": "overwrite: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Creates a new text file, and writes content if any is given.\n\nparam path\n\n:   path to file to write\n\nparam content\n\n:   content to write to file (optional)\n\nparam encoding\n\n:   character encoding of written content (default `utf-8`)\n\nparam overwrite\n\n:   replace destination file if it already\n    exists (default `False`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nCreate a new file\n    ${content}=    Get    url=https://www.example.com\n    Create file    output/newfile.html    content=${content.text}\n    ...    overwrite=${True}\n```\n", "tags": [], "source": null, "shortdoc": "Creates a new text file, and writes content if any is given.", "lineno": 425}, {"name": "Does Directory Exist", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns True if the given directory exists, False if not.\n\nSee `Does Directory Not Exist` for usage example.\n\nparam path\n\n:   path to inspected directory\n\nreturn\n\n:   true or false if the directory exists\n", "tags": [], "source": null, "shortdoc": "Returns True if the given directory exists, False if not.", "lineno": 287}, {"name": "Does Directory Not Exist", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns True if the directory does not exist, False if it does.\n\nparam path\n\n:   path to inspected directory\n\nreturn\n\n:   true or false if the directory does not exists\n\nExample:\n\n```robotframework\n*** Tasks  ***\nCheck for directory\n    ${directory_exists}=    Does directory not exist    output\n    IF    ${directory_exists}    Create directory    output\n```\n", "tags": [], "source": null, "shortdoc": "Returns True if the directory does not exist, False if it does.", "lineno": 298}, {"name": "Does File Exist", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns True if the given file exists, False if not.\n\nparam path\n\n:   path to inspected file\n\nreturn\n\n:   true or false if file exists\n\nExample:\n\n```robotframework\n*** Tasks  ***\nCheck for file\n    ${log_exists}=    Does file exist    output/log.html\n    IF    ${log_exists}\n        ${file}=    Find files    output/log.html\n        Open user browser    ${file}[0]\n    END\n```\n", "tags": [], "source": null, "shortdoc": "Returns True if the given file exists, False if not.", "lineno": 255}, {"name": "Does File Not Exist", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns True if the file does not exist, False if it does.\n\nSee `Does File Exist` for usage example.\n\nparam path\n\n:   path to inspected file\n\nreturn\n\n:   true or false if the files does not exist\n", "tags": [], "source": null, "shortdoc": "Returns True if the file does not exist, False if it does.", "lineno": 276}, {"name": "Empty Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Removes all the files in the given directory.\n\nparam path\n\n:   directory to remove files from\n\nExample:\n\n```robotframework\n*** Tasks ***\nEmpty out directory\n    Empty directory    output\n```\n", "tags": [], "source": null, "shortdoc": "Removes all the files in the given directory.", "lineno": 599}, {"name": "Find Files", "args": [{"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "include_dirs", "kind": "POSITIONAL_OR_NAMED", "repr": "include_dirs: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "include_files", "kind": "POSITIONAL_OR_NAMED", "repr": "include_files: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Find files recursively according to a pattern.\n\nparam pattern\n\n:   search path in glob format pattern,\n    e.g. *.xls or \\**/orders.txt\n\nparam include_dirs\n\n:   include directories in results (defaults to True)\n\nparam include_files\n\n:   include files in results (defaults to True)\n\nreturn\n\n:   list of paths that match the pattern\n\nExample:\n\n```robotframework\n*** Tasks  ***\nFinding files recursively\n    ${files}=    Find files    **/*.log\n    FOR    ${file}    IN    @{files}\n        Read file    ${file}\n    END\n```\n", "tags": [], "source": null, "shortdoc": "Find files recursively according to a pattern.", "lineno": 129}, {"name": "Get File Creation Date", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns the creation time in seconds.\nNote: Linux sets this whenever file metadata changes\n\nparam path\n\n:   path to file to inspect\n\nreturn\n\n:   creation time in seconds as a float\n", "tags": [], "source": null, "shortdoc": "Returns the creation time in seconds. Note: Linux sets this whenever file metadata changes", "lineno": 877}, {"name": "Get File Extension", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns the suffix for the file.\n\nparam path\n\n:   path to file\n\nreturn\n\n:   file suffix as a string\n", "tags": [], "source": null, "shortdoc": "Returns the suffix for the file.", "lineno": 860}, {"name": "Get File Modified Date", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns the modified time in seconds.\n\nparam path\n\n:   path to file to inspect\n\nreturn\n\n:   modified time in seconds as a float\n", "tags": [], "source": null, "shortdoc": "Returns the modified time in seconds.", "lineno": 868}, {"name": "Get File Name", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns only the full file name portion of a path.\n\nparam path\n\n:   path to file\n\nreturn\n\n:   filename portion of a path as a string\n", "tags": [], "source": null, "shortdoc": "Returns only the full file name portion of a path.", "lineno": 844}, {"name": "Get File Owner", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Return the name of the user who owns the file.\n\nparam path\n\n:   path to file to inspect\n\nreturn\n\n:   file owner as a string\n", "tags": [], "source": null, "shortdoc": "Return the name of the user who owns the file.", "lineno": 896}, {"name": "Get File Size", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns the file size in bytes.\n\nparam path\n\n:   path to file to inspect\n\nreturn\n\n:   file size in bytes as an int\n", "tags": [], "source": null, "shortdoc": "Returns the file size in bytes.", "lineno": 887}, {"name": "Get File Stem", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns the name of the file without its extension.\n\nparam path\n\n:   path to file\n\nreturn\n\n:   filename without its suffix as a string\n", "tags": [], "source": null, "shortdoc": "Returns the name of the file without its extension.", "lineno": 852}, {"name": "Is Directory Empty", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Returns True if the given directory has no files or subdirectories.\n\nparam path\n\n:   path to inspected directory\n\nreturn\n\n:   true or false if the directory is empty\n\nExample:\n\n```robotframework\n*** Tasks  ***\nCheck for empty directory\n    ${directory_empty}=    Is directory empty    output\n    IF    ${directory_empty}\n        Copy file    ${source}    output/new_file.txt\n    END\n```\n", "tags": [], "source": null, "shortdoc": "Returns True if the given directory has no files or subdirectories.", "lineno": 316}, {"name": "Is Directory Not Empty", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Returns True if the given directory has any files or subdirectories.\n\nSee `Is Directory Empty` for usage example.\n\nparam path\n\n:   path to inspected directory\n\nreturn\n\n:   true or false if the directory is not empty\n", "tags": [], "source": null, "shortdoc": "Returns True if the given directory has any files or subdirectories.", "lineno": 340}, {"name": "Is File Empty", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns True if the given file has no content, i.e. has zero size.\n\nparam path\n\n:   path to inspected file\n\nreturn\n\n:   true or false if the file is empty\n", "tags": [], "source": null, "shortdoc": "Returns True if the given file has no content, i.e. has zero size.", "lineno": 351}, {"name": "Is File Not Empty", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns True if the given file has content, i.e. larger than zero size.\n\nparam path\n\n:   path to inspected file\n\nreturn\n\n:   true or false if the file is not empty\n\nExample:\n\n```robotframework\n*** Tasks ***\nCheck for empty file\n    ${file_empty}=    Is file not empty    output/log.html\n    IF    ${file_empty}\n        Copy file    output/log.html    ${alt_dir}\n    END\n```\n", "tags": [], "source": null, "shortdoc": "Returns True if the given file has content, i.e. larger than zero size.", "lineno": 362}, {"name": "Join Path", "args": [{"name": "@parts: str | Path", "kind": "VAR_POSITIONAL", "repr": "*parts: str | Path", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Joins multiple parts of a path together.\n\nparam parts\n\n:   Components of the path, e.g. dir, subdir, filename.ext\n\nreturn\n\n:   complete file path as a single string\n\nExample:\n\n```robotframework\n*** Tasks ***\nJoin path together\n    Join path    output/nested    folder\n```\n", "tags": [], "source": null, "shortdoc": "Joins multiple parts of a path together.", "lineno": 799}, {"name": "List Directories In Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Lists all the directories in the given directory, relative to it.\n\nparam path\n\n:   base directory for search, defaults to current working dir\n\nreturn\n\n:   list of directories in selected directory\n\nExample:\n\n```robotframework\n*** Tasks  ***\nList directories\n    ${directories}=    List directories in directory    devdata\n    FOR    ${path}    IN    @{directories}\n        Log    ${path}\n    END\n```\n", "tags": [], "source": null, "shortdoc": "Lists all the directories in the given directory, relative to it.", "lineno": 198}, {"name": "List Files In Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Lists all the files in the given directory, relative to it.\n\nparam path\n\n:   base directory for search, defaults to current working directory\n\nreturn\n\n:   list of files in directory\n\nExample:\n\n```robotframework\n*** Tasks  ***\nList directory file\n    ${files}=    List files in directory    output\n    FOR    ${file}    IN    @{files}\n        Log    ${file}\n    END\n```\n", "tags": [], "source": null, "shortdoc": "Lists all the files in the given directory, relative to it.", "lineno": 177}, {"name": "Log Directory Tree", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Logs all the files in the directory recursively.\n\nparam path\n\n:   base directory to start from, defaults to current working dir\n\nExample:\n\n```robotframework\n*** Tasks  ***\nList directory tree\n    Log directory tree\n```\n", "tags": [], "source": null, "shortdoc": "Logs all the files in the directory recursively.", "lineno": 219}, {"name": "Move Directory", "args": [{"name": "source", "kind": "POSITIONAL_OR_NAMED", "repr": "source: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "destination", "kind": "POSITIONAL_OR_NAMED", "repr": "destination: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "overwrite", "kind": "POSITIONAL_OR_NAMED", "repr": "overwrite: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Move a directory from source path to destination path.\n\nparam source\n\n:   source directory path for moving\n\nparam destination\n\n:   path to move to\n\nparam overwrite\n\n:   replace destination directory if it already\n    exists (defaults to `False`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nMove a directory\n    Move directory    output    temp\n```\n", "tags": [], "source": null, "shortdoc": "Move a directory from source path to destination path.", "lineno": 749}, {"name": "Move File", "args": [{"name": "source", "kind": "POSITIONAL_OR_NAMED", "repr": "source: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "destination", "kind": "POSITIONAL_OR_NAMED", "repr": "destination: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "overwrite", "kind": "POSITIONAL_OR_NAMED", "repr": "overwrite: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Move a file from source path to destination path,\noptionally overwriting the destination.\n\nparam source\n\n:   source file path for moving\n\nparam destination\n\n:   path to move to\n\nparam overwrite\n\n:   replace destination file if it already\n    exists (defaults to `False`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nMove a file\n    Create directory    temp\n    Move file    output/log.html    temp/log.html\n```\n", "tags": [], "source": null, "shortdoc": "Move a file from source path to destination path, optionally overwriting the destination.", "lineno": 689}, {"name": "Move Files", "args": [{"name": "sources", "kind": "POSITIONAL_OR_NAMED", "repr": "sources: List[str | Path]", "required": true, "defaultValue": null, "types": ["List"], "typedocs": []}, {"name": "destination", "kind": "POSITIONAL_OR_NAMED", "repr": "destination: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "overwrite", "kind": "POSITIONAL_OR_NAMED", "repr": "overwrite: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Move multiple files to the destination folder.\n\nparam sources\n\n:   list of files to move\n\nparam destination\n\n:   path to move destination\n\nparam overwrite\n\n:   replace destination files if they already exist\n\nExample:\n\n```robotframework\n*** Tasks ***\nMove some files\n    Create directory    temp\n    Move files    output/log.html    output/output.xml    temp\n```\n", "tags": [], "source": null, "shortdoc": "Move multiple files to the destination folder.", "lineno": 721}, {"name": "Normalize Path", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Removes redundant separators or up-level references from path.\n\nparam path\n\n:   path that will be normalized\n\nreturn\n\n:   path to file as a string\n\nExample:\n\n```robotframework\n*** Tasks ***\nGet normal path\n    # Normalized path becomes ../inputs/input.xlsx\n    ${normalized_path}=    Normalize path    ..//inputs/./new/../input.xlsx\n    Create work items    ${normalized_path}\n```\n", "tags": [], "source": null, "shortdoc": "Removes redundant separators or up-level references from path.", "lineno": 825}, {"name": "Read Binary File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Reads a file in binary mode and returns the content.\nDoes not attempt to decode the content in any way.\n\nparam path\n\n:   path to file to read\n\nreturn\n\n:   the file content as bytes\n\nExample:\n\n```robotframework\n*** Tasks ***\nRead picture as binary\n    ${pictures}=    Find files    **/*.png\n    FOR    ${picture}    IN    @{pictures}\n        Read binary file    ${picture}\n    END\n```\n", "tags": [], "source": null, "shortdoc": "Reads a file in binary mode and returns the content. Does not attempt to decode the content in any way.", "lineno": 395}, {"name": "Read File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding: str = utf-8", "required": true, "defaultValue": "utf-8", "types": ["str"], "typedocs": []}], "doc": "Reads a file as text, with given encoding, and returns the content.\"\n\nSee `Find Files` for usage example.\n\nparam path\n\n:   path to file to read\n\nparam encoding\n\n:   character encoding of file (default `utf-8`)\n\nreturn\n\n:   file content as string\n", "tags": [], "source": null, "shortdoc": "Reads a file as text, with given encoding, and returns the content.\"", "lineno": 382}, {"name": "Remove Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "recursive", "kind": "POSITIONAL_OR_NAMED", "repr": "recursive: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Removes the given directory, and optionally everything it contains.\n\nparam path\n\n:   path to directory\n\nparam recursive\n\n:   remove all subdirectories and files (default to `False`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nDelete a directory\n    Remove directory    output    recursive=${True}\n```\n", "tags": [], "source": null, "shortdoc": "Removes the given directory, and optionally everything it contains.", "lineno": 579}, {"name": "Remove File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "missing_ok", "kind": "POSITIONAL_OR_NAMED", "repr": "missing_ok: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Removes the given file.\n\nparam path\n\n:   path to the file to remove\n\nparam missing_ok\n\n:   ignore non-existent file (defaults to `True`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nDelete a file\n    Remove file    output/log.html\n```\n", "tags": [], "source": null, "shortdoc": "Removes the given file.", "lineno": 539}, {"name": "Remove Files", "args": [{"name": "@paths: str | Path", "kind": "VAR_POSITIONAL", "repr": "*paths: str | Path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "missing_ok", "kind": "NAMED_ONLY", "repr": "missing_ok: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Removes multiple files.\n\nparam paths\n\n:   paths to files to be removed\n\nparam missing_ok\n\n:   ignore non-existent files (default to `True`)\n\nExample:\n\n```robotframework\n*** Tasks ***\nDelete some files\n    Remove files    output/log.html    output/output.xml\n```\n", "tags": [], "source": null, "shortdoc": "Removes multiple files.", "lineno": 560}, {"name": "Run Keyword If File Exists", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "keyword", "kind": "POSITIONAL_OR_NAMED", "repr": "keyword: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "If file exists at path, execute given keyword with arguments.\n\nparam path\n\n:   path to file to inspect\n\nparam keyword\n\n:   Robot Framework keyword to execute\n\nparam args\n\n:   arguments to keyword\n\nExample:\n\n```robotframework\n*** Tasks ***\nExecute if orders exists\n    Run keyword if file exists    orders.xlsx    Process orders\n```\n", "tags": [], "source": null, "shortdoc": "If file exists at path, execute given keyword with arguments.", "lineno": 991}, {"name": "Touch File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Creates a file with no content, or if file already exists,\nupdates the modification and access times.\n\nparam path\n\n:   path to file which is touched\n", "tags": [], "source": null, "shortdoc": "Creates a file with no content, or if file already exists, updates the modification and access times.", "lineno": 417}, {"name": "Wait Until Created", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: int | float = 5.0", "required": true, "defaultValue": "5.0", "types": ["Union"], "typedocs": []}], "doc": "Poll path until it exists, or raise exception if timeout\nis reached.\n\nparam path\n\n:   path to poll\n\nparam timeout\n\n:   time in seconds until keyword fails\n\nreturn\n\n:   path to the created file as a string\n\nExample:\n\n```robotframework\n*** Tasks ***\nWait for existence\n    Wait until created    orders.xlsx    10\n    Process orders    orders.xlsx\n```\n", "tags": [], "source": null, "shortdoc": "Poll path until it exists, or raise exception if timeout is reached.", "lineno": 928}, {"name": "Wait Until Modified", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: int | float = 5.0", "required": true, "defaultValue": "5.0", "types": ["Union"], "typedocs": []}], "doc": "Poll path until it has been modified after the keyword was called,\nor raise exception if timeout is reached.\n\nparam path\n\n:   path to poll\n\nparam timeout\n\n:   time in seconds until keyword fails\n\nreturn\n\n:   path to the modified file as a string\n\nExample:\n\n```robotframework\n*** Tasks ***\nWait for change\n    Wait until modified    orders.xlsx    10\n    Process orders    orders.xlsx\n```\n", "tags": [], "source": null, "shortdoc": "Poll path until it has been modified after the keyword was called, or raise exception if timeout is reached.", "lineno": 953}, {"name": "Wait Until Removed", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: int | float = 5.0", "required": true, "defaultValue": "5.0", "types": ["Union"], "typedocs": []}], "doc": "Poll path until it doesn't exist, or raise exception if timeout\nis reached.\n\nparam path\n\n:   path to poll\n\nparam timeout\n\n:   time in seconds until keyword fails\n", "tags": [], "source": null, "shortdoc": "Poll path until it doesn't exist, or raise exception if timeout is reached.", "lineno": 979}], "dataTypes": {}, "typedocs": []}
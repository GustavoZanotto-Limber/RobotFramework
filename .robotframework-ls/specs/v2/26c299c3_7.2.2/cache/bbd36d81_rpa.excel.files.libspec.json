mtime:1741376713.524114
{"name": "RPA.Excel.Files", "doc": "The Excel.Files library can be used to read and write Excel\nfiles without the need to start the actual Excel application.\n\nIt supports both legacy `.xls` files and modern `.xlsx` files.\n\n**Note:** To run macros or load password protected worksheets,\nplease use the Excel application library.\n\n**Examples**\n\n**Robot Framework**\n\nA common use-case is to load an existing Excel file as a table,\nwhich can be iterated over later in a Robot Framework keyword or task:\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Tables\nLibrary    RPA.Excel.Files\n\n*** Keywords ***\nRead orders as table\n    Open workbook    ${ORDERS_FILE}\n    ${worksheet}=    Read worksheet   header=${TRUE}\n    ${orders}=       Create table     ${worksheet}\n    [Return]         ${orders}\n    [Teardown]       Close workbook\n```\n\nProcessing all worksheets in the Excel file and checking row count:\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Excel.Files\n\n*** Variables ***\n${EXCEL_FILE}   /path/to/excel.xlsx\n\n*** Tasks ***\nRows in the sheet\n    [Setup]      Open Workbook    ${EXCEL_FILE}\n    @{sheets}=   List Worksheets\n    FOR  ${sheet}  IN   @{sheets}\n        ${count}=  Get row count in the sheet   ${sheet}\n        Log   Worksheet '${sheet}' has ${count} rows\n    END\n\n*** Keywords ***\nGet row count in the sheet\n    [Arguments]      ${SHEET_NAME}\n    ${sheet}=        Read Worksheet   ${SHEET_NAME}\n    ${rows}=         Get Length  ${sheet}\n    [Return]         ${rows}\n```\n\nCreating a new Excel file with a dictionary:\n\n```robotframework\n*** Tasks ***\nCreating new Excel\n    Create Workbook  my_new_excel.xlsx\n    FOR    ${index}    IN RANGE    20\n        &{row}=       Create Dictionary\n        ...           Row No   ${index}\n        ...           Amount   ${index * 25}\n        Append Rows to Worksheet  ${row}  header=${TRUE}\n    END\n    Save Workbook\n```\n\nCreating a new Excel file with a list:\n\n```robotframework\n*** Variables ***\n@{heading}   Row No   Amount\n@{rows}      ${heading}\n\n*** Tasks ***\nCreating new Excel\n    Create Workbook  my_new_excel.xlsx\n    FOR    ${index}    IN RANGE   1  20\n        @{row}=         Create List   ${index}   ${index * 25}\n        Append To List  ${rows}  ${row}\n    END\n    Append Rows to Worksheet  ${rows}\n    Save Workbook\n```\n\n**Python**\n\nThe library can also be imported directly into Python.\n\n```python\nfrom RPA.Excel.Files import Files\n\ndef read_excel_worksheet(path, worksheet):\n    lib = Files()\n    lib.open_workbook(path)\n    try:\n        return lib.read_worksheet(worksheet)\n    finally:\n        lib.close_workbook()\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\RPA\\Excel\\Files.py", "lineno": 71, "tags": [], "inits": [], "keywords": [{"name": "Append Rows To Worksheet", "args": [{"name": "content", "kind": "POSITIONAL_OR_NAMED", "repr": "content: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}, {"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "header", "kind": "POSITIONAL_OR_NAMED", "repr": "header: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "start", "kind": "POSITIONAL_OR_NAMED", "repr": "start: int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "formatting_as_empty", "kind": "POSITIONAL_OR_NAMED", "repr": "formatting_as_empty: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}], "doc": "Append values to the end of the worksheet.\n\nparam content\n\n:   Rows of values to append\n\nparam name\n\n:   Name of worksheet to append to (optional).\n    Defaults to the active worksheet.\n\nparam header\n\n:   Set rows according to existing header row\n\nparam start\n\n:   Start of data, NOTE: Only required when header is True\n\nparam formatting_as_empty\n\n:   if True, the cells containing only\n    formatting (no values) are considered empty.\n\nreturn\n\n:   List of dictionaries that represents the worksheet\n\nThe `content` argument can be of any tabular format. Typically,\nthis is a Table object created by the `RPA.Tables` library,\nbut it can also be a list of lists, or a list of dictionaries.\n\nIf the `header` flag is enabled, the existing header in the worksheet\nis used to insert values in the correct columns. This assumes that\nthat source data has this data available.\n\nIf the header is not on the first row of the worksheet,\nthe `start` argument can be used to give the correct row index.\n\nExamples:\n\n```robotframework\n# Append an existing Table object\n # Create a new table using a Dictionary of Lists\n@{table_name}=    Create List    Sara    Beth    Amy\n@{table_age}=    Create List    ${48}    ${21}    ${57}\n&{table}=    Create Dictionary    name=${table_name}    age=${table_age}\nCreate Table    ${table}\nAppend rows to worksheet    ${table}\nSave Workbook\n\n# Append to a worksheet with headers on row 5\n # Create a new table using a Dictionary of Lists\n@{table_name}=    Create List    Sara    Beth    Amy\n@{table_age}=    Create List    ${48}    ${21}    ${57}\n&{table}=    Create Dictionary    name=${table_name}    age=${table_age}\nCreate Table    ${table}\nAppend rows to worksheet    ${table}    header=${TRUE}   start=5\nSave Workbook\n```\n\n```python\n# Append an existing Table object\ntable = {\n    \"name\": [\"Sara\", \"Beth\", \"Amy\"],\n    \"age\":  [    48,     21,     57],\n    }\nlib.append_rows_to_worksheet(table)\nlib.save_workbook()\n\n# Append to a worksheet with headers on row 5\ntable = {\n    \"name\": [\"Sara\", \"Beth\", \"Amy\"],\n    \"age\":  [    48,     21,     57],\n    }\nlib.append_rows_to_worksheet(table, header=True, start=5)\nlib.save_workbook()\n```\n", "tags": [], "source": null, "shortdoc": "Append values to the end of the worksheet.", "lineno": 715}, {"name": "Auto Size Columns", "args": [{"name": "start_column", "kind": "POSITIONAL_OR_NAMED", "repr": "start_column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "end_column", "kind": "POSITIONAL_OR_NAMED", "repr": "end_column: int | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "width", "kind": "POSITIONAL_OR_NAMED", "repr": "width: int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Auto size column widths.\n\nNote. non-default font sizes might cause auto sizing issues\n\nparam start_column\n\n:   column number or name to start from\n\nparam end_column\n\n:   optional column number or name for last column\n\nparam width\n\n:   if given will resize columns to this size, otherwise\n    will auto_size\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nAuto Size Columns   A   D    # will try auto size\nAuto Size Columns   B   D   16  # will set A-D columns sizes to 16\nAuto Size Columns   A   width=24  # will set column A size to 24\n```\n\nPython example.\n\n```python\nlib.auto_size_columns(\"A\", \"D\")\nlib.auto_size_columns(\"C\", width=40)\n```\n", "tags": [], "source": null, "shortdoc": "Auto size column widths.", "lineno": 1443}, {"name": "Clear Cell Range", "args": [{"name": "range_string", "kind": "POSITIONAL_OR_NAMED", "repr": "range_string: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Clear cell values for a given range.\n\nparam range_string\n\n:   single cell or range of cells\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\n# area of cells\nClear Cell Range    A9:A100\n# single cell\nClear Cell Range    A2\n```\n\nPython example.\n\n```python\nlib.clear_cell_range(\"A1\")\nlib.clear_cell_range(\"B2:B50\")\n```\n", "tags": [], "source": null, "shortdoc": "Clear cell values for a given range.", "lineno": 1045}, {"name": "Close Workbook", "args": [], "doc": "Close the active workbook.\n\nExamples:\n\n```robotframework\n# Close active workbook\nClose Workbook\n```\n\n```python\n# Close active workbook\nlib.close_workbook()\n```\n", "tags": [], "source": null, "shortdoc": "Close the active workbook.", "lineno": 359}, {"name": "Copy Cell Values", "args": [{"name": "source_range", "kind": "POSITIONAL_OR_NAMED", "repr": "source_range: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "target", "kind": "POSITIONAL_OR_NAMED", "repr": "target: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Copy cells from source to target.\n\nparam source_range\n\n:   single cell or range of cells\n\nparam target\n\n:   copy to this cell\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nCopy Cell Values   A1:D4   G10\n```\n\nPython example.\n\n```python\nlib.copy_cell_values(\"A1:D4\", \"G10\")\n```\n", "tags": [], "source": null, "shortdoc": "Copy cells from source to target.", "lineno": 1251}, {"name": "Create Workbook", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "fmt", "kind": "POSITIONAL_OR_NAMED", "repr": "fmt: str = xlsx", "required": true, "defaultValue": "xlsx", "types": ["str"], "typedocs": []}, {"name": "sheet_name", "kind": "POSITIONAL_OR_NAMED", "repr": "sheet_name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Create and open a new Excel workbook.\n\nAutomatically also creates a new worksheet with the name sheet\\_name.\n(defaults to \"Sheet\")\n\n**Note:** Must be paired with the `Save Workbook` keyword\nor the newly created workbook will be deleted upon robot completion.\n\n**Note:** The file name/path must be set in either the `Create Workbook`\nkeyword or the `Save Workbook` keyword and must include the file extension.\n\nparam path\n\n:   Save path for workbook; defaults to robot root if not provided.\n\nparam fmt\n\n:   Format of workbook, i.e. xlsx or xls; Defaults to xlsx if not\n    provided.\n\nparam sheet_name\n\n:   Custom name for the initial sheet.\n\nreturn\n\n:   Workbook object.\n\nExamples:\n\n```robotframework\n# Create modern format workbook.\nCreate Workbook\nSave Workbook    orders.xlsx\n\n# Create modern format workbook with custom sheet name.\nCreate Workbook  sheet_name=MyCustomSheetName\nSave Workbook    orders.xlsx\n\n# Create modern format workbook with a path set.\nCreate Workbook    path=${OUTPUT_DIR}${/}orders.xlsx\nSave Workbook\n\n# Create legacy format workbook.\nCreate Workbook    fmt=xls\nSave Workbook    orders.xls\n\n# Create legacy format workbook with a path set.\n# Note that the file name must be set in the `Create Workbook` keyword\n#  if the path argument is used.\nCreate Workbook    path=${OUTPUT_DIR}${/}orders.xls    fmt=xls\nSave Workbook\n```\n\n```python\n# Create modern format workbook with defaults.\nlib = Files()\nlib.create_workbook()\nlib.save_workbook(\"orders.xlsx\")\n\n# Create modern format workbook with a path set.\nlib = Files()\nlib.create_workbook(path=\"./output/orders.xlsx\", fmt=\"xlsx\")\nlib.save_workbook()\n\n# Create legacy format workbook.\nlib = Files()\nlib.create_workbook(fmt=\"xls\")\nlib.save_workbook(\"orders.xls\")\n\n# Create legacy format workbook with a path set.\n# Note that the file name must be set in the `Create Workbook` keyword\n#  if the path is used.\nlib = Files()\nlib.create_workbook(path=\"./output/orders.xls\", fmt=\"xls\")\nlib.save_workbook()\n```\n", "tags": [], "source": null, "shortdoc": "Create and open a new Excel workbook.", "lineno": 220}, {"name": "Create Worksheet", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "content", "kind": "POSITIONAL_OR_NAMED", "repr": "content: Any | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "exist_ok", "kind": "POSITIONAL_OR_NAMED", "repr": "exist_ok: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "header", "kind": "POSITIONAL_OR_NAMED", "repr": "header: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}], "doc": "Create a new worksheet in the current workbook.\n\nparam name\n\n:   Name of new worksheet\n\nparam content\n\n:   Optional content for worksheet\n\nparam exist_ok\n\n:   If False, raise an error if name is already in use\n\nparam header\n\n:   If content is provided, write headers to worksheet\n\nExamples:\n\n```robotframework\n# Create a new blank worksheet named \"Customers\"\nCreate Worksheet    Customers\n\n# Create a new worksheet with headers and contents using\n# a List of Dictonaries\n# Don't forget to `Save Workbook` once your changes are complete\n&{Employees_Row1}=    Create Dictionary    name=Mark    age=${58}\n&{Employees_Row2}=    Create Dictionary    name=John    age=${22}\n&{Employees_Row3}=    Create Dictionary    name=Adam    age=${67}\n@{Worksheet_Data}=    Create List\n...    ${Worksheet_Data_row1}\n...    ${Worksheet_Data_row2}\n...    ${Worksheet_Data_row3}\nCreate Worksheet\n...    name=Employees\n...    content=${Worksheet_Data}\n...    header=True\nSave Workbook\n\n# Create a new workseet using a Dictionary of Lists\n# Don't forget to `Save Workbook` once your changes are complete\n@{Employees_name}=    Create List    Mark    John    Adam\n@{Employees_age}=    Create List    ${58}    ${22}    ${67}\n&{Worksheet_Data}=    Create Dictionary\n...    name=${Worksheet_Data_name}\n...    age=${Worksheet_Data_age}\nCreate Worksheet\n...    name=Employees\n...    content=${Worksheet_Data}\n...    header=True\nSave Workbook\n```\n\n```python\n# Create a new blank worksheet named \"Customers\"\nlib.create_worksheet(\"Customers\")\n\n# Create a new workseet using a List of Dictionaries\n# Don't forget to `Save Workbook` once your changes are complete\nWorksheet_Data = [\n    {\"name\": \"Mark\", \"age\": 58},\n    {\"name\": \"John\", \"age\": 22},\n    {\"name\": \"Adam\", \"age\": 67},\n    ]\nlib.create_worksheet(name=\"Employees\",content=Worksheet_Data,header=True)\nlib.save_workbook()\n\n# Create a new workseet using a Dictionary of Lists\n# Don't forget to `Save Workbook` once your changes are complete\nWorksheet_Data = {\n    \"name\": [\"Mark\", \"John\", \"Adam\"],\n    \"age\":  [    58,     22,     67],\n    }\nlib.create_worksheet(name=\"Employees\",content=Worksheet_Data,header=True)\nlib.save_workbook()\n```\n", "tags": [], "source": null, "shortdoc": "Create a new worksheet in the current workbook.", "lineno": 539}, {"name": "Delete Columns", "args": [{"name": "start", "kind": "POSITIONAL_OR_NAMED", "repr": "start: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "end", "kind": "POSITIONAL_OR_NAMED", "repr": "end: int | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Delete column or columns beginning from start column number/name to\npossible end column number/name.\n\nparam start\n\n:   column number or name to start deletion from\n\nparam end\n\n:   optional column number or name for last column to delete\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nDelete Columns   C       # delete column C\nDelete Columns   3       # delete column 3 (same as C)\nDelete Columns   E  AA   # delete rows E-AA\n```\n\nPython example.\n\n```python\nlib.delete_columns(\"D\")\nlib.delete_rows(1, \"JJ\")\n```\n", "tags": [], "source": null, "shortdoc": "Delete column or columns beginning from start column number/name to possible end column number/name.", "lineno": 1103}, {"name": "Delete Rows", "args": [{"name": "start", "kind": "POSITIONAL_OR_NAMED", "repr": "start: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "end", "kind": "POSITIONAL_OR_NAMED", "repr": "end: int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Delete row or rows beginning from start row number to\npossible end row number.\n\nparam start\n\n:   row number to start deletion from\n\nparam end\n\n:   optional row number for last row to delete\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nDelete Rows   2       # delete row 2\nDelete Rows   5  10   # delete rows 5-10\n```\n\nPython example.\n\n```python\nlib.delete_rows(2)\nlib.delete_rows(5,10)\n```\n", "tags": [], "source": null, "shortdoc": "Delete row or rows beginning from start row number to possible end row number.", "lineno": 1076}, {"name": "Find Empty Row", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Find the first empty row after existing content,\nand return the row number.\n\nparam name\n\n:   Name of worksheet (optional). Defaults to the active worksheet.\n\nreturn\n\n:   First row number of empty row\n\nExamples:\n\n```robotframework\n${next}=    Find empty row\n```\n\n```python\nnext = lib.find_empty_row()\n```\n", "tags": [], "source": null, "shortdoc": "Find the first empty row after existing content, and return the row number.", "lineno": 838}, {"name": "Get Active Worksheet", "args": [], "doc": "Get the name of the worksheet which is currently active.\n\nreturn\n\n:   Active worksheet name\n\nExamples:\n\n```robotframework\n${Active_Worksheet}=    Get Active Worksheet\n```\n\n```python\nActive_Worksheet = lib.get_active_worksheet()\n```\n", "tags": [], "source": null, "shortdoc": "Get the name of the worksheet which is currently active.", "lineno": 487}, {"name": "Get Cell Value", "args": [{"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: str | int", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Get a cell value in the given worksheet.\n\nparam row\n\n:   Index of row to read, e.g. 3\n\nparam column\n\n:   Name or index of column, e.g. C or 7\n\nparam name\n\n:   Name of worksheet (optional). Defaults to active worksheet.\n\nreturn\n\n:   Cell value\n\nExamples:\n\n```robotframework\n# Read header names\n${column1}=    Get cell value    1    A\n${column2}=    Get cell value    1    B\n${column3}=    Get cell value    1    C\n```\n\n```python\n# Read header names\ncolumn1 = lib.get_cell_value(1, \"A\")\ncolumn2 = lib.get_cell_value(1, \"B\")\ncolumn3 = lib.get_cell_value(1, \"C\")\n```\n", "tags": [], "source": null, "shortdoc": "Get a cell value in the given worksheet.", "lineno": 858}, {"name": "Get Worksheet Value", "args": [{"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: str | int", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Alias for keyword `Get cell value`, see the original keyword\nfor documentation.\n", "tags": [], "source": null, "shortdoc": "Alias for keyword `Get cell value`, see the original keyword for documentation.", "lineno": 1022}, {"name": "Hide Columns", "args": [{"name": "start_column", "kind": "POSITIONAL_OR_NAMED", "repr": "start_column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "end_column", "kind": "POSITIONAL_OR_NAMED", "repr": "end_column: int | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Hide column or columns in worksheet.\n\nparam start_column\n\n:   column number or name to start from\n\nparam end_column\n\n:   optional column number or name for last column\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nHide Columns   A   D    # hide columns A-D\nHide Columns   A        # hide column A\n```\n\nPython example.\n\n```python\nlib.hide_columns(\"A\", \"D\")\nlib.hide_columns(\"A\")\n```\n", "tags": [], "source": null, "shortdoc": "Hide column or columns in worksheet.", "lineno": 1496}, {"name": "Insert Columns After", "args": [{"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "amount", "kind": "POSITIONAL_OR_NAMED", "repr": "amount: int = 1", "required": true, "defaultValue": "1", "types": ["int"], "typedocs": []}], "doc": "Insert column or columns after a column number/name.\n\nparam column\n\n:   insert after this column\n\nparam amount\n\n:   number of columns to insert, default 1\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nInsert Columns After   C      # insert 1 column after column C\nInsert Columns Before   A  3   # insert 3 columns after column A\n```\n\nPython example.\n\n```python\nlib.insert_columns_after(\"C\")\nlib.insert_columns_after(\"A\", 3)\n```\n", "tags": [], "source": null, "shortdoc": "Insert column or columns after a column number/name.", "lineno": 1170}, {"name": "Insert Columns Before", "args": [{"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "amount", "kind": "POSITIONAL_OR_NAMED", "repr": "amount: int = 1", "required": true, "defaultValue": "1", "types": ["int"], "typedocs": []}], "doc": "Insert column or columns before a column number/name.\n\nparam column\n\n:   insert before this column\n\nparam amount\n\n:   number of columns to insert, default 1\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nInsert Columns Before   C      # insert 1 column before column C\nInsert Columns Before   A  3   # insert 3 columns before column A\n```\n\nPython example.\n\n```python\nlib.insert_columns_before(\"C\")\nlib.insert_columns_before(\"A\", 3)\n```\n", "tags": [], "source": null, "shortdoc": "Insert column or columns before a column number/name.", "lineno": 1141}, {"name": "Insert Image To Worksheet", "args": [{"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "scale", "kind": "POSITIONAL_OR_NAMED", "repr": "scale: float = 1.0", "required": true, "defaultValue": "1.0", "types": ["float"], "typedocs": []}, {"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Insert an image into the given cell.\n\nThe `path` argument should be a local file path to the image file.\n\nBy default the image is inserted in the original size, but it can\nbe scaled with the `scale` argument. It's scaled with a factor\nwhere the value `1.0` is the default.\n\nparam row\n\n:   Index of row to write\n\nparam column\n\n:   Name or index of column\n\nparam path\n\n:   Path to image file\n\nparam scale\n\n:   Scale of image (optional). Default value is \"1.0\".\n\nparam name\n\n:   Name of worksheet (optional). Defaults to the active worksheet.\n\nExamples:\n\n```robotframework\nInsert image to worksheet    ${last_row}    A    screenshot.png\n```\n\n```python\nlib.insert_image_to_worksheet(last_row, \"A\", \"screenshot.png\")\n```\n", "tags": [], "source": null, "shortdoc": "Insert an image into the given cell.", "lineno": 978}, {"name": "Insert Rows After", "args": [{"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "amount", "kind": "POSITIONAL_OR_NAMED", "repr": "amount: int = 1", "required": true, "defaultValue": "1", "types": ["int"], "typedocs": []}], "doc": "Insert row or rows after a row number.\n\nparam row\n\n:   insert after this row\n\nparam amount\n\n:   number of rows to insert, default 1\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nInsert Rows After   3      # insert 1 row after row 3\nInsert Rows After   1  3   # insert 3 rows after row 1\n```\n\nPython example.\n\n```python\nlib.insert_rows_after(1)\nlib.insert_rows_after(1, 3)\n```\n", "tags": [], "source": null, "shortdoc": "Insert row or rows after a row number.", "lineno": 1225}, {"name": "Insert Rows Before", "args": [{"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "amount", "kind": "POSITIONAL_OR_NAMED", "repr": "amount: int = 1", "required": true, "defaultValue": "1", "types": ["int"], "typedocs": []}], "doc": "Insert row or rows before a row number.\n\nparam row\n\n:   insert before this row\n\nparam amount\n\n:   number of rows to insert, default 1\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nInsert Rows Before   3      # insert 1 row before row 3\nInsert Rows Before   1  3   # insert 3 rows before row 1\n```\n\nPython example.\n\n```python\nlib.insert_rows_before(1)\nlib.insert_rows_before(1, 3)\n```\n", "tags": [], "source": null, "shortdoc": "Insert row or rows before a row number.", "lineno": 1199}, {"name": "List Worksheets", "args": [], "doc": "List all names of worksheets in the given workbook.\n\nreturn\n\n:   List containing the names of the worksheets\n\nExamples:\n\n```robotframework\n# List Worksheets will read the worksheet names into a list variable\n# The variable should be declared with the List type \"@\" when being used\n# to store the sheet names from the List Worksets keyword\n@{sheets}=    List Worksheets\n```\n\n```python\n# List Worksheets will read the worksheet names into a list variable\n# The variable should be declared with the List type \"@\" when being used\n# to store the sheet names from the List Worksets keyword\nsheets = lib.list_worksheets()\n```\n", "tags": [], "source": null, "shortdoc": "List all names of worksheets in the given workbook.", "lineno": 440}, {"name": "Move Range", "args": [{"name": "range_string", "kind": "POSITIONAL_OR_NAMED", "repr": "range_string: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "rows", "kind": "POSITIONAL_OR_NAMED", "repr": "rows: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}, {"name": "columns", "kind": "POSITIONAL_OR_NAMED", "repr": "columns: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}, {"name": "translate", "kind": "POSITIONAL_OR_NAMED", "repr": "translate: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Move range of cells by given amount of rows and columns.\n\nFormulas are translated to match new location by default.\n\n*Note*. There is a bug in the openpyxl on moving negative rows/columns.\n\nparam range_string\n\n:   cell range\n\nparam rows\n\n:   number of rows to move\n\nparam columns\n\n:   number of columns to move\n\nparam translate\n\n:   are formulas translated for a new location\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\n# move range 4 rows down\nMove Range   E2:E10    rows=4\n# move range 2 rows down, 2 columns right\nMove Range   E2:E10    rows=2  columns=2\n```\n\nPython example.\n\n```python\nlib.move_range(\"E2:E10\", rows=4)\nlib.move_range(\"E2:E10\", rows=2, columns=2)\n```\n", "tags": [], "source": null, "shortdoc": "Move range of cells by given amount of rows and columns.", "lineno": 1627}, {"name": "Open Workbook", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "data_only", "kind": "POSITIONAL_OR_NAMED", "repr": "data_only: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "read_only", "kind": "POSITIONAL_OR_NAMED", "repr": "read_only: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}], "doc": "Open an existing Excel workbook.\n\nOpens the workbook in memory and sets it as the active workbook.\n**This library can only have one workbook open at a time, and\nany previously opened workbooks are closed first.**\n\nThe file can be in either `.xlsx` or `.xls` format.\n\nparam path\n\n:   path to Excel file\n\nparam data_only\n\n:   controls whether cells with formulas have either\n    the formula (default, False) or the value stored the last time Excel\n    read the sheet (True). Affects only `.xlsx` files.\n\nreturn\n\n:   Workbook object\n\nExamples:\n\n```robotframework\n# Open workbook with only path provided\nOpen Workbook    path/to/file.xlsx\n\n# Open workbook with path provided and reading formulas in cells\n# as the value stored\n# Note: Can only be used with XLSX workbooks\nOpen Workbook    path/to/file.xlsx    data_only=True\n```\n\n```python\n# Open workbook with only path provided\nlib.open_workbook(path=\"path/to/file.xlsx\")\n\n# Open workbook with path provided and reading formulas in cells\n# as the value stored\n# Note: Can only be used with XLSX workbooks\nlib.open_workbook(path=\"path/to/file.xlsx\", data_only=True)\n```\n", "tags": [], "source": null, "shortdoc": "Open an existing Excel workbook.", "lineno": 310}, {"name": "Read Worksheet", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "header", "kind": "POSITIONAL_OR_NAMED", "repr": "header: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "start", "kind": "POSITIONAL_OR_NAMED", "repr": "start: int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Read the content of a worksheet into a list of dictionaries.\n\nEach key in the dictionary will be either values from the header row,\nor Excel-style column letters.\n\nparam name\n\n:   Name of worksheet to read (optional).\n    Defaults to the active worksheet.\n\nparam header\n\n:   If True, use the first row of the worksheet\n    as headers for the rest of the rows. Default is False.\n\nparam start\n\n:   Row index to start reading data from (1-indexed).\n    Default value is row 1.\n\nreturn\n\n:   List of dictionaries that represents the worksheet\n\nExamples:\n\n```robotframework\n# The most simple form. Column keys will be Column letters.\n${rows}=    Read Worksheet\n\n# Since `header=True` the keys will be the header values\n${rows}=    Read Worksheet     header=True\n\n# Uses the header values as keys and starts reading at row 3\n${rows}=    Read Worksheet     header=True    start=${3}\n```\n\n```python\n# The most simple form. Keys will be Column letters.\nrows = lib.read_worksheet()\n\n# Since `header=True` the keys will be the header values\nrows = lib.read_worksheet(header=True)\n\n# Uses the header values as keys and starts reading at row 3\nrows = lib.read_worksheet(header=True, start=3)\n```\n", "tags": [], "source": null, "shortdoc": "Read the content of a worksheet into a list of dictionaries.", "lineno": 621}, {"name": "Read Worksheet As Table", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "header", "kind": "POSITIONAL_OR_NAMED", "repr": "header: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "trim", "kind": "POSITIONAL_OR_NAMED", "repr": "trim: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "start", "kind": "POSITIONAL_OR_NAMED", "repr": "start: int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Read the contents of a worksheet into a Table container. Allows\nsorting/filtering/manipulating using the `RPA.Tables` library.\n\nparam name\n\n:   Name of worksheet to read (optional).\n    Defaults to the active worksheet.\n\nparam header\n\n:   If True, use the first row of the worksheet\n    as headers for the rest of the rows. Default value is False.\n\nparam trim\n\n:   Remove all empty rows from the end of the worksheet.\n    Default value is True.\n\nparam start\n\n:   Row index to start reading data from (1-indexed).\n    Default value is row 1.\n\nreturn\n\n:   Table object that represents the worksheet\n\nExamples:\n\n```robotframework\n# The most simple form. Column keys will be Column letters.\n${table}=    Read Worksheet As Table\n\n# Since `header=True` the keys will be the header values\n${table}=    Read Worksheet As Table     header=True\n\n# Uses the header values as keys and starts reading at row 3\n${table}=    Read Worksheet As Table     header=True    start=${3}\n```\n\n```python\n# The most simple form. Keys will be Column letters.\ntable = lib.read_worksheet_as_table()\n\n# Since `header=True` the keys will be the header values\ntable = lib.read_worksheet_as_table(header=True)\n\n# Uses the header values as keys and starts reading at row 3\ntable = lib.read_worksheet_as_table(header=True, start=3)\n```\n", "tags": [], "source": null, "shortdoc": "Read the contents of a worksheet into a Table container. Allows sorting/filtering/manipulating using the `RPA.Tables` library.", "lineno": 667}, {"name": "Remove Worksheet", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Remove a worksheet from the active workbook.\n\nparam name\n\n:   Name of worksheet to remove (optional).\n    Defaults to the active worksheet.\n\nExamples:\n\n```robotframework\n# Remove last worksheet\n${sheets}=       List worksheets\nRemove worksheet    ${sheets}[-1]\n\n# Remove worksheet by name\nRemove Worksheet    Sheet\n```\n\n```python\n# Remove last worksheet\nsheets = lib.list_worksheets()\nlib.remove_worksheet(sheets[-1])\n\n# Remove worksheet by name\nlib.remove_worksheet(\"Sheet\")\n```\n", "tags": [], "source": null, "shortdoc": "Remove a worksheet from the active workbook.", "lineno": 790}, {"name": "Rename Worksheet", "args": [{"name": "src_name", "kind": "POSITIONAL_OR_NAMED", "repr": "src_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "dst_name", "kind": "POSITIONAL_OR_NAMED", "repr": "dst_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Rename an existing worksheet in the active workbook.\n\nparam src_name\n\n:   Current name of worksheet\n\nparam dst_name\n\n:   Future name of worksheet\n\nExamples:\n\n```robotframework\nRename worksheet    Sheet    Orders\n```\n\n```python\nlib.rename_worksheet(\"Sheet\",\"Orders\")\n```\n", "tags": [], "source": null, "shortdoc": "Rename an existing worksheet in the active workbook.", "lineno": 819}, {"name": "Save Workbook", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Save the active workbook.\n\n**Note:** No changes to the workbook are saved to the actual file unless\nthis keyword is called.\n\nparam path\n\n:   Path to save to. If not given, uses path given\n    when opened or created.\n\nreturn\n\n:   Workbook object\n\nExamples:\n\n```robotframework\n# Saving the active workbook to a new location/filename or saving to\n# a new location/filename\n# Note: You cannot use Save Workbook to convert from XLSX to XLS\n# or vice-versa\nSave Workbook   path=${OUTPUT_DIR}${/}orders.xlsx\n\n# Saving the active workbook changes if location/filename were set\n# in Create Workbook or Open Workbook\nSave Workbook\n```\n\n```python\n# Saving the active workbook to a new location/filename or saving to\n# a new location/filename\n# Note: You cannot use Save Workbook to convert from XLSX to XLS\n# or vice-versa\nlib.save_workbook(path=\"./output/orders.xlsx\")\n\n# Saving the active workbook changes if location/filename were set\n# in Create Workbook or Open Workbook\nlib.save_workbook()\n```\n", "tags": [], "source": null, "shortdoc": "Save the active workbook.", "lineno": 380}, {"name": "Set Active Worksheet", "args": [{"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: str | int", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Set the active worksheet.\n\nThis keyword can be used to set the default worksheet for keywords,\nwhich removes the need to specify the worksheet name for each keyword.\nIt can always be overridden on a per-keyword basis.\n\nparam value\n\n:   Index or name of worksheet\n\nExamples:\n\n```robotframework\n# Set using the name of the worksheet\nSet Active Worksheet    Customers\n\n# Set using the index of the worksheet\n# Worksheet index begings at 0\nSet Active Worksheet    2\n```\n\n```python\n# Set using the name of the worksheet\nlib.set_active_worksheet(\"Customers\")\n\n# Set using the index of the worksheet\n# Worksheet index begings at 0\nlib.set_active_worksheet(2)\n```\n", "tags": [], "source": null, "shortdoc": "Set the active worksheet.", "lineno": 507}, {"name": "Set Cell Format", "args": [{"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: str | int", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "fmt", "kind": "POSITIONAL_OR_NAMED", "repr": "fmt: str | float", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Set format for cell.\n\nDoes not affect the values themselves, but changes how the values\nare displayed when opening with an external application such as\nMicrosoft Excel or LibreOffice Calc.\n\nparam row\n\n:   Index of row to write, e.g. 3\n\nparam column\n\n:   Name or index of column, e.g. C or 7\n\nparam fmt\n\n:   Format code for cell\n\nparam name\n\n:   Name of worksheet (optional). Defaults to active worksheet.\n\nThe `fmt` argument accepts all format code values that\nare supported by the aforementioned applications.\n\nSome examples of valid values:\n\n\n\n\n\nFormat\n\nExplanation\n\n0.00\n\nNumber with two decimal precision\n\n0%\n\nPercentage without decimals\n\nMM/DD/YY\n\nDate with month, day, and year\n\n@\n\nText value\n\nBOOLEAN\n\nBoolean valueExamples:\n\n```robotframework\n# Set value to have one decimal precision\nSet cell format   2  B    00.0\n```\n\n```python\n# Set value to have one decimal precision\nlib.set_cell_format(2, \"B\", 00.0)\n```\n", "tags": [], "source": null, "shortdoc": "Set format for cell.", "lineno": 930}, {"name": "Set Cell Formula", "args": [{"name": "range_string", "kind": "POSITIONAL_OR_NAMED", "repr": "range_string: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "formula", "kind": "POSITIONAL_OR_NAMED", "repr": "formula: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "transpose", "kind": "POSITIONAL_OR_NAMED", "repr": "transpose: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Set cell formula for given range of cells.\n\nIf transpose is set then formula is set for first cell of the\nrange and the rest of cells will transpose the function to match\nto that cell.\n\nOtherwise (by default) all cells will get the same formula.\n\nparam range_string\n\n:   cell range\n\nparam formula\n\n:   formula for the cell\n\nparam transpose\n\n:   on True the cell formulas will be transposed\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\n# all cells will have same formula\nSet Cell Formula   E2:E10    =B2+5\n# cells will have transposed formulas\n# E2 will have =B2+5\n# E3 will have =B3+5\n# etc\nSet Cell Formula   E2:E10    =B2+5   True\n```\n\nPython example.\n\n```python\nlib.set_cell_formula(\"E2:E10\", \"=B2+5\")\nlib.set_cell_formula(\"E2:E10\", \"=B2+5\", True)\n```\n", "tags": [], "source": null, "shortdoc": "Set cell formula for given range of cells.", "lineno": 1574}, {"name": "Set Cell Value", "args": [{"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: str | int", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}, {"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "fmt", "kind": "POSITIONAL_OR_NAMED", "repr": "fmt: str | float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Set a cell value in the given worksheet.\n\nparam row\n\n:   Index of row to write, e.g. 3\n\nparam column\n\n:   Name or index of column, e.g. C or 7\n\nparam value\n\n:   New value of cell\n\nparam name\n\n:   Name of worksheet (optional). Defaults to active worksheet.\n\nparam fmt\n\n:   Format code for cell (optional)\n\nExamples:\n\n```robotframework\n# Set a value in the first row and column\nSet cell value    1    1    Some value\nSet cell value    1    A    Some value\n\n# Set a value with cell formatting\nSet cell value    2    B    ${value}    fmt=0%\n```\n\n```python\n# Set a value in the first row and column\nlib.set_cell_value(1, 1, \"Some value\")\nlib.set_cell_value(1, \"A\", \"Some value\")\n\n# Set a value with cell formatting\nlib.set_cell_value(2, \"B\", value, fmt=\"0%\")\n```\n", "tags": [], "source": null, "shortdoc": "Set a cell value in the given worksheet.", "lineno": 887}, {"name": "Set Cell Values", "args": [{"name": "start_cell", "kind": "POSITIONAL_OR_NAMED", "repr": "start_cell: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "values", "kind": "POSITIONAL_OR_NAMED", "repr": "values: list | Table", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "table_heading", "kind": "POSITIONAL_OR_NAMED", "repr": "table_heading: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Set cell values given as list of lists or as a RPA.Tables.Table.\n\n*Note.* Will overwrite cells if table structure causes cells to overlap.\n\nparam start_cell\n\n:   starting cell in a string\n\nparam values\n\n:   list of lists or a Table\n\nparam table_heading\n\n:   if values are given as a Table, this parameter\n    defines if Table headings should be inserted as a row\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\n@{all_rows}=    Create List\n${headers}=    Create List    first    second   third  fourth\nFOR    ${num}    IN RANGE    1    2000\n    @{row}=    Create List    ${num}    ${num+1}    ${num*2}    ${num*4}\n    Append To List    ${all_rows}    ${row}\nEND\n#  Set Cell Values from Table (include headers)\n${table}=    Create Table    ${all_rows}    columns=${headers}\nSet Cell Values   G1   ${table}   True\n#  Set Cell Values from a list of lists\n# uncomment if headings should be added\n# Append To List  ${all_rows}   ${headers}\nSet Cell Values   M1   ${all_rows}\n\n# Simplest form of adding values\n@{values}=    Evaluate    [[1,2,3],[4,5,6],['a','b','c','d']]\nSet Cell Values   A1   ${values}\n```\n\nPython example.\n\n```python\ndata =  [[1,2,3],[4,5,6],['a','b','c','d']]\nlib.set_cell_values(\"E2\", data)\n```\n", "tags": [], "source": null, "shortdoc": "Set cell values given as list of lists or as a RPA.Tables.Table.", "lineno": 1665}, {"name": "Set Styles", "args": [{"name": "range_string", "kind": "POSITIONAL_OR_NAMED", "repr": "range_string: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "font_name", "kind": "POSITIONAL_OR_NAMED", "repr": "font_name: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "family", "kind": "POSITIONAL_OR_NAMED", "repr": "family: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "size", "kind": "POSITIONAL_OR_NAMED", "repr": "size: int = None", "required": true, "defaultValue": "None", "types": ["int"], "typedocs": []}, {"name": "bold", "kind": "POSITIONAL_OR_NAMED", "repr": "bold: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "italic", "kind": "POSITIONAL_OR_NAMED", "repr": "italic: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "underline", "kind": "POSITIONAL_OR_NAMED", "repr": "underline: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "strikethrough", "kind": "POSITIONAL_OR_NAMED", "repr": "strikethrough: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "cell_fill", "kind": "POSITIONAL_OR_NAMED", "repr": "cell_fill: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "color", "kind": "POSITIONAL_OR_NAMED", "repr": "color: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "align_horizontal", "kind": "POSITIONAL_OR_NAMED", "repr": "align_horizontal: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "align_vertical", "kind": "POSITIONAL_OR_NAMED", "repr": "align_vertical: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "number_format", "kind": "POSITIONAL_OR_NAMED", "repr": "number_format: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Set styles for range of cells.\n\nPossible values for the align\\_horizontal:\n\n> * general\n\n> * left\n\n> * center\n\n> * right\n\n> * fill\n\n> * justify\n\n> * centerContinuous\n\n> * distributed\n\nPossible values for the align\\_vertical:\n\n> * top\n\n> * center\n\n> * bottom\n\n> * justify\n\n> * distributed\n\nSome examples for number\\_formats:\n\n> * General\n\n> * 0\n\n> * 0.00\n\n> * #,##0\n\n> * #,##0.00\n\n> * \"$\"#,##0_);(\"$\"#,##0)\n\n> * \"$\"#,##0_);[Red](\"$\"#,##0)\n\n> * 0%\n\n> * 0.00%\n\n> * 0.00E+00\n\n> * # ?/?\n\n> * # ??/??\n\n> * mm-dd-yy\n\n> * d-mmm-yy\n\n> * d-mmm\n\n> * h:mm AM/PM\n\n> * h:mm:ss AM/PM\n\n> * h:mm\n\n> * h:mm:ss\n\n> * m/d/yy h:mm\n\nparam range_string\n\n:   single cell or range of cells\n\nparam font_name\n\n:   name of the font\n\nparam family\n\n:   font family name\n\nparam size\n\n:   size for the font\n\nparam bold\n\n:   font style bold\n\nparam italic\n\n:   font style italics\n\nparam underline\n\n:   font style underline\n\nparam strikethrough\n\n:   font style strikethrough\n\nparam cell_fill\n\n:   cell fill color, in hex or color name\n\nparam color\n\n:   font color, in hex or color name\n\nparam align_horizontal\n\n:   cell horizontal alignment\n\nparam align_vertical\n\n:   cell vertical alignment\n\nparam number_format\n\n:   cell number format\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nSet Styles    A1:D4\n...  bold=True\n...  cell_fill=lightblue\n...  align_horizontal=center\n...  number_format=h:mm AM/PM\n\nSet Styles    E2\n...  strikethrough=True\n...  color=FF0000\n```\n\nPython example.\n\n```python\nlib.set_styles(\"A1:D4\", bold=True, font_name=\"Arial\", size=24)\n```\n", "tags": [], "source": null, "shortdoc": "Set styles for range of cells.", "lineno": 1295}, {"name": "Set Worksheet Value", "args": [{"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: str | int", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}, {"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "fmt", "kind": "POSITIONAL_OR_NAMED", "repr": "fmt: str | float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Alias for keyword `Set cell value`, see the original keyword\nfor documentation.\n", "tags": [], "source": null, "shortdoc": "Alias for keyword `Set cell value`, see the original keyword for documentation.", "lineno": 1031}, {"name": "Unhide Columns", "args": [{"name": "start_column", "kind": "POSITIONAL_OR_NAMED", "repr": "start_column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "end_column", "kind": "POSITIONAL_OR_NAMED", "repr": "end_column: int | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Unhide column or columns in worksheet.\n\nparam start_column\n\n:   column number or name to start from\n\nparam end_column\n\n:   optional column number or name for last column\n\nExamples:\n\nRobot Framework example.\n\n```robotframework\nUnhide Columns   A   D    # unhide columns A-D\nUnhide Columns   A        # unhide column A\n```\n\nPython example.\n\n```python\nlib.unhide_columns(\"A\", \"D\")\nlib.unhide_columns(\"A\")\n```\n", "tags": [], "source": null, "shortdoc": "Unhide column or columns in worksheet.", "lineno": 1526}, {"name": "Worksheet Exists", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Return True if worksheet with given name is in workbook.\n\nparam name\n\n:   Name of worksheet you are looking for\n\nreturn\n\n:   True if the worksheet exists, False otherwise\n\nExamples:\n\n```robotframework\n# To use Worksheet Exists in a conditional statement set it to\n# a variable first, like you see here, and then compare the\n# variable to ${TRUE} or ${FALSE}\n${Does_Worksheet_Exist}=    Worksheet Exists    Sheet\n```\n\n```python\nDoes_Worksheet_Exist = lib.worksheet_exists(\"Sheet\")\n```\n", "tags": [], "source": null, "shortdoc": "Return True if worksheet with given name is in workbook.", "lineno": 465}], "dataTypes": {}, "typedocs": []}
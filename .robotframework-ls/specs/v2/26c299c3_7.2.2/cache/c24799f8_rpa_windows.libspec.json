mtime:1741354010.568343
{"name": "RPA.Windows", "doc": "The Windows is a library that can be used for Windows desktop automation.\n\nLibrary is included in the **rpaframework** package by default, but as shown in the\nbelow example library can be also installed separately without **rpaframework**.\n\n```yaml\nchannels:\n  - conda-forge\ndependencies:\n  - python=3.9.13\n  - pip=22.1.2\n  - pip:\n    - rpaframework-windows==7.0.2 # standalone Windows library (`rpaframework` includes this library)\n```\n\n**About terminology**\n\n**ControlType** is a value referred to by locator keys type: or control. Represents type of application\nobject, which can be e.g. Window, Button or ListItem.\n\n**Element** is an entity of an application structure (e.g. certain button in a window), which can be\nidentified by a locator. (also referred as **Control**)\n\n**WindowsElement** is an library container object for the `Element`. All the keywords returning elements, will in\nfact return `WindowsElement\\`\\`s. The ones accepting \\`\\`locator` or `root_element` as arguments, will accept\n`WindowsElement` as an argument value. (`locator` accepts strings as well)\n\nStructure of the `WindowsElement`\n\n```python\nclass WindowsElement:\n    item: Control        # ``item`` contains object instance of the element\n    locator: str         # ``locator`` that found this element\n    name: str            # ``Name`` attribute of the element\n    automation_id: str   # ``AutomationId`` attribute of the element\n    control_type: str    # ``ControlTypeName`` attribute of the element\n    class_name: str      # ``ClassName`` attribute of the element\n    left: int            # element's rectangle left coordinate\n    right: int           # element's rectangle right coordinate\n    top: int             # element's rectangle top coordinate\n    bottom: int          # element's rectangle bottom coordinate\n    width: int           # element's rectangle horizontal width\n    height: int          # element's rectangle vertical height\n    xcenter: int         # element's rectangle center point x coordinate\n    ycenter: int         # element's rectangle center point y coordinate\n```\n\nExample of the `WindowsElement` usage\n\n```robotframework\n${rows}=    Get Elements    class:DataGridRow\n# ${rows} is a list of ``WindowsElement``s\nFOR    ${row}    IN    @{rows}\n    Log To Console   ${row.name}                # access ``WindowsElement``\n    Log To Console   ${row.item.AutomationId}   # access ``WindowsElement.item`` directly\n    Log To Console   ${row.item.Name}           # same as ``${row.name}``\nEND\n```\n\n**Locators**\n\nLocators are based on different strategies that can used identify Control object.\n\nAvailable strategies that can be used for the locators:\n\n\n\n\n\nKey\n\nMaps to search property\n\nname\n\nName\n\nclass\n\nClassName\n\ntype\n\nControlType\n\ncontrol\n\nControlType\n\nid\n\nAutomationId\n\nautomationid\n\nAutomationId\n\nregex\n\nRegexName\n\nsubname\n\nSubName\n\nindex\n\nfoundIndex (int)\n\noffset\n\noffset coordinates (x (int), y (int)) from control center\n\nexecutable\n\ntarget window by its executable name\n\nhandle\n\ntarget window handle (int)\n\ndesktop\n\nSPECIAL target desktop, no value for the key e.g. desktop:desktop and name:Calculator\n\nprocess\n\nNOT YET SUPPORTED target window by its executable's process id\n\ndepth\n\nsearchDepth (int) for finding Control (default 8)\n\npath\n\ntarget element by its index-based path traversal (e.g. path:2|3|8|2)**About root element on locators**\n\nLocators work on currently active root element. At the start root element is the whole\ndesktop. There are different ways on changing this root element.\n\nKeyword `Control Window` is the most common method of setting certain system window\nas a root element for further actions using locators. In the absence of a provided\nroot\\_element parameter, here's how you can control the default root element\nresolving:\n\n> * `Set Anchor`: Sets the active anchor window from which the search begins.\n\n> * `Control Window`: Controls and focuses on a window and marks it as the current\n>   active window, from which all the subsequent searches will start from in the\n>   absence of a set anchor.\n\n> * If there's no set anchor nor active window, then the last resort will be the\n>   \"Desktop\" element itself.\n\nLocators themselves support cascading syntax (denoted by character > in the locator string),\nwhich can denote root element in \"parent (root) & child\" terms.\n\nFor example.\n\n```robotframework\nClick  id:controls > id:activate\n```\n\nOn the above example the left side of the > character, id:controls, represents the root element\n(can be called as \"parent element\" in this case). Right side of the locator string, id:activate,\nrepresents \"child\" element and it will be searched under the \"parent element\".\n\nThis way element search is more efficient, because search are restricted to certain section of element\ntree which can be quite huge especially on the desktop level and in certain applications.\n\nKeyword examples:\n\n```robotframework\nControl Window    name:Calculator\nControl Window    Calculator  # will execute search by 'name:Calculator'\nControl Window    executable:Spotify.exe\n```\n\nsome example locators, and can be omitted ie. space \\` \\` between locator keys means the same thing as and:\n\n```bash\nid:clearButton\ntype:Group and name:\"Number pad\" > type:Button and index:4\ntype:Group and name:\"Number pad\" > control:Button index:5\nid:Units1 > name:${unit}\nclass:Button offset:370,0\n```\n\n**About locator restrictions**\n\nVisual locators are not supported in this library and they can't be used in the same chain with these\nWindows locators. Visual locators are supported by the RPA.Desktop library. Locator chaining (image and\nWindows locators) support will be added in the future.\n\nLocator syntax does not yet support OR operation (only AND operations).\n\n**About search depth**\n\nThe library does element search depth by default to the level of 8. This means that locator will look into\n8 levels of elements under element tree of the root element. This can lead into situation where element\ncan't be found. To fix this it is recommended to set root element which can be found within 8 levels OR\ndefining depth in the locator string to a bigger value, e.g. id:deeplyNestedButton depth:16. Useful\nkeywords for setting root element are `Control Window`, `Set Anchor` and `Get Element`.\n\n**About the path strategy**\n\nWhen automation IDs and names aren't enough (or not reliable), then you can fallback\nto the positions of elements in a tree. This can be achieved using the path:\nstrategy to specify a list of element positions which indicates how to traverse the\ntree from parent to child beginning with the resolved root.\n\nExample: Calculator > path:2|3|2|8|2 - this locator looks for the \"Calculator\"\nwindow, then it looks for the 2nd direct child and then it looks for the 3rd one of\nthe previous child and so on until it consumes the path completely. (indexes start\nwith 1)\n\nAn alternative way to get the whole tree to explore it yourself would be to use the\n`Print Tree` keyword.\n\n**Keyboard and mouse**\n\nKeys for the keyboard actions are given using `uiautomation` specification.\n\nSpecial keys which are given within {} syntax.\n\n\n\n\n\nKey\n\nMaps to action\n\nLBUTTON\n\nLeft mouse button\n\nRBUTTON\n\nRight mouse button\n\nCANCEL\n\nControl-break processing\n\nMBUTTON\n\nMiddle mouse button (three-button mouse)\n\nXBUTTON1\n\nX1 mouse button\n\nXBUTTON2\n\nX2 mouse button\n\nBACK\n\nBACKSPACE key\n\nTAB\n\nTAB key\n\nCLEAR\n\nCLEAR key\n\nRETURN\n\nENTER key\n\nENTER\n\nENTER key\n\nSHIFT\n\nSHIFT key\n\nCTRL\n\nCTRL key\n\nCONTROL\n\nCTRL key\n\nALT\n\nALT key\n\nPAUSE\n\nPAUSE key\n\nCAPITAL\n\nCAPS LOCK key\n\nKANA\n\nIME Kana mode\n\nHANGUEL\n\nIME Hanguel mode (maintained for compatibility; use VK\\_HANGUL)\n\nHANGUL\n\nIME Hangul mode\n\nJUNJA\n\nIME Junja mode\n\nFINAL\n\nIME final mode\n\nHANJA\n\nIME Hanja mode\n\nKANJI\n\nIME Kanji mode\n\nESC\n\nESC key\n\nESCAPE\n\nESC key\n\nCONVERT\n\nIME convert\n\nNONCONVERT\n\nIME nonconvert\n\nACCEPT\n\nIME accept\n\nMODECHANGE\n\nIME mode change request\n\nSPACE\n\nSPACEBAR\n\nPRIOR\n\nPAGE UP key\n\nPAGEUP\n\nPAGE UP key\n\nNEXT\n\nPAGE DOWN key\n\nPAGEDOWN\n\nPAGE DOWN key\n\nEND\n\nEND key\n\nHOME\n\nHOME key\n\nLEFT\n\nLEFT ARROW key\n\nUP\n\nUP ARROW key\n\nRIGHT\n\nRIGHT ARROW key\n\nDOWN\n\nDOWN ARROW key\n\nSELECT\n\nSELECT key\n\nPRINT\n\nPRINT key\n\nEXECUTE\n\nEXECUTE key\n\nSNAPSHOT\n\nPRINT SCREEN key\n\nPRINTSCREEN\n\nPRINT SCREEN key\n\nINSERT\n\nINS key\n\nINS\n\nINS key\n\nDELETE\n\nDEL key\n\nDEL\n\nDEL key\n\nHELP\n\nHELP key\n\nWIN\n\nLeft Windows key (Natural keyboard)\n\nLWIN\n\nLeft Windows key (Natural keyboard)\n\nRWIN\n\nRight Windows key (Natural keyboard)\n\nAPPS\n\nApplications key (Natural keyboard)\n\nSLEEP\n\nComputer Sleep key\n\nNUMPAD0\n\nNumeric keypad 0 key\n\nNUMPAD1\n\nNumeric keypad 1 key\n\nNUMPAD2\n\nNumeric keypad 2 key\n\nNUMPAD3\n\nNumeric keypad 3 key\n\nNUMPAD4\n\nNumeric keypad 4 key\n\nNUMPAD5\n\nNumeric keypad 5 key\n\nNUMPAD6\n\nNumeric keypad 6 key\n\nNUMPAD7\n\nNumeric keypad 7 key\n\nNUMPAD8\n\nNumeric keypad 8 key\n\nNUMPAD9\n\nNumeric keypad 9 key\n\nMULTIPLY\n\nMultiply key\n\nADD\n\nAdd key\n\nSEPARATOR\n\nSeparator key\n\nSUBTRACT\n\nSubtract key\n\nDECIMAL\n\nDecimal key\n\nDIVIDE\n\nDivide key\n\nF1\n\nF1 key\n\nF2\n\nF2 key\n\nF3\n\nF3 key\n\nF4\n\nF4 key\n\nF5\n\nF5 key\n\nF6\n\nF6 key\n\nF7\n\nF7 key\n\nF8\n\nF8 key\n\nF9\n\nF9 key\n\nF10\n\nF10 key\n\nF11\n\nF11 key\n\nF12\n\nF12 key\n\nF13\n\nF13 key\n\nF14\n\nF14 key\n\nF15\n\nF15 key\n\nF16\n\nF16 key\n\nF17\n\nF17 key\n\nF18\n\nF18 key\n\nF19\n\nF19 key\n\nF20\n\nF20 key\n\nF21\n\nF21 key\n\nF22\n\nF22 key\n\nF23\n\nF23 key\n\nF24\n\nF24 key\n\nNUMLOCK\n\nNUM LOCK key\n\nSCROLL\n\nSCROLL LOCK key\n\nLSHIFT\n\nLeft SHIFT key\n\nRSHIFT\n\nRight SHIFT key\n\nLCONTROL\n\nLeft CONTROL key\n\nLCTRL\n\nLeft CONTROL key\n\nRCONTROL\n\nRight CONTROL key\n\nRCTRL\n\nRight CONTROL key\n\nLALT\n\nLeft MENU key\n\nRALT\n\nRight MENU key\n\nBROWSER\\_BACK\n\nBrowser Back key\n\nBROWSER\\_FORWARD\n\nBrowser Forward key\n\nBROWSER\\_REFRESH\n\nBrowser Refresh key\n\nBROWSER\\_STOP\n\nBrowser Stop key\n\nBROWSER\\_SEARCH\n\nBrowser Search key\n\nBROWSER\\_FAVORITES\n\nBrowser Favorites key\n\nBROWSER\\_HOME\n\nBrowser Start and Home key\n\nVOLUME\\_MUTE\n\nVolume Mute key\n\nVOLUME\\_DOWN\n\nVolume Down key\n\nVOLUME\\_UP\n\nVolume Up key\n\nMEDIA\\_NEXT\\_TRACK\n\nNext Track key\n\nMEDIA\\_PREV\\_TRACK\n\nPrevious Track key\n\nMEDIA\\_STOP\n\nStop Media key\n\nMEDIA\\_PLAY\\_PAUSE\n\nPlay/Pause Media key\n\nLAUNCH\\_MAIL\n\nStart Mail key\n\nLAUNCH\\_MEDIA\\_SELECT\n\nSelect Media key\n\nLAUNCH\\_APP1\n\nStart Application 1 key\n\nLAUNCH\\_APP2\n\nStart Application 2 key\n\nOEM\\_1\n\nUsed for miscellaneous characters; it can vary by keyboard.For the US standard keyboard, the ';:' key\n\nOEM\\_PLUS\n\nFor any country/region, the '+' key\n\nOEM\\_COMMA\n\nFor any country/region, the ',' key\n\nOEM\\_MINUS\n\nFor any country/region, the '-' key\n\nOEM\\_PERIOD\n\nFor any country/region, the '.' key\n\nOEM\\_2\n\nUsed for miscellaneous characters; it can vary by keyboard.\n\nOEM\\_3\n\nUsed for miscellaneous characters; it can vary by keyboard.\n\nOEM\\_4\n\nUsed for miscellaneous characters; it can vary by keyboard.\n\nOEM\\_5\n\nUsed for miscellaneous characters; it can vary by keyboard.\n\nOEM\\_6\n\nUsed for miscellaneous characters; it can vary by keyboard.\n\nOEM\\_7\n\nUsed for miscellaneous characters; it can vary by keyboard.\n\nOEM\\_8\n\nUsed for miscellaneous characters; it can vary by keyboard.\n\nOEM\\_102\n\nEither the angle bracket key or the backslash key on the RT 102-key keyboard\n\nPROCESSKEY\n\nIME PROCESS key\n\nPACKET\n\nUsed to pass Unicode characters as if they were keystrokes. The VK\\_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM\\_KEYDOWN, and WM\\_KeyUp\n\nATTN\n\nAttn key\n\nCRSEL\n\nCrSel key\n\nEXSEL\n\nExSel key\n\nEREOF\n\nErase EOF key\n\nPLAY\n\nPlay key\n\nZOOM\n\nZoom key\n\nNONAME\n\nReserved\n\nPA1\n\nPA1 key\n\nOEM\\_CLEAR\n\nClear keyExamples.\n\n```python\nlib = Windows()\n# {Ctrl}, {Delete} ... are special keys' name in SpecialKeyNames.\nlib.send_keys('{Ctrl}a{Delete}{Ctrl}v{Ctrl}s{Ctrl}{Shift}s{Win}e{PageDown}') #press Ctrl+a, Delete, Ctrl+v, Ctrl+s, Ctrl+Shift+s, Win+e, PageDown\nlib.send_keys('{Ctrl}(AB)({Shift}(123))') #press Ctrl+A+B, type '(', press Shift+1+2+3, type ')', if '()' follows a hold key, hold key won't release util ')'\nlib.send_keys('{Ctrl}{a 3}') #press Ctrl+a at the same time, release Ctrl+a, then type 'a' 2 times\nlib.send_keys('{a 3}{B 5}') #type 'a' 3 times, type 'B' 5 times\nlib.send_keys('{{}Hello{}}abc {a}{b}{c} test{} 3}{!}{a} (){(}{)}') #type: '{Hello}abc abc test}}}!a ()()'\nlib.send_keys('0123456789{Enter}')\nlib.send_keys('ABCDEFGHIJKLMNOPQRSTUVWXYZ{Enter}')\nlib.send_keys('abcdefghijklmnopqrstuvwxyz{Enter}')\nlib.send_keys('`~!@#$%^&*()-_=+{Enter}')\nlib.send_keys('[]{{}{}}\\|;:'\",<.>/?{Enter}')\n```\n\nUsing access key of the element (element property -> AccessKey 'alt+s').\nThe (+s) means that previous special key is kept down until closing parenthesis is reached.\n\nOn the below example this means that 'ALT' key is pressed down, then '+' and 's' keys are pressed\ndown before they are all released up.\n\n```robotframework\nSend Keys   keys={Alt}(+s)\n```\n\nMouse clicks can be executed with keywords specific for a type of a click, e.g. `Click` (normal click),\n`Double Click` and `Right Click`.\n\n**How to inspect**\n\nMost common, and recommended by Microsoft, inspector tool for Windows is [Accessibility Insights](https://accessibilityinsights.io/) that\ncan be installed separately. Other options are tools [Inspect Object](https://docs.microsoft.com/en-us/windows/win32/winauto/inspect-objects)  and [UI Automation Verify](https://docs.microsoft.com/en-us/windows/win32/winauto/ui-automation-verify), which\ncan be accessed by installing Windows SDK.\n\nA more programmatic approach is to run `Print Tree    log_as_warnings=${True}`\nkeyword and then observe in the logs the found elements structure starting from\nDesktop (or the currently set anchor / active window) as root. (refer to keyword's\n[documentation](https://robocorp.com/docs/libraries/rpa-framework/rpa-windows/keywords#print-tree)\nfor more details)\n\n**Recording**\n\nThe package provides some rudimentary inspecting and recording via the\n`windows-record` script, which can be started through the command line (in an\nenvironment containing the `rpaframework-windows` installation).\n\nRecording inspects elements on **mouse click** and can be stopped by pressing the\n**ESC** key. Expected console output:\n\n```winbatch\nC:\\Users\\User\\robots\\> windows-record -v  # or > python -m RPA.Windows -v\nMouse recording started. Use ESC to stop recording.\n\n--------------------------------------------------------------------------------\nCopy-paste the code below into your `*** Tasks ***` or `*** Keywords ***`\n--------------------------------------------------------------------------------\n\nControl Window    name:Calculator and type:WindowControl and class:ApplicationFrameWindow  # handle:9569486\nClick    name:Calculator and id:TitleBar and type:WindowControl and class:ApplicationFrameTitleBarWindow and path:1\nClick    name:\"Display is 0\" and id:CalculatorResults and type:TextControl and path:2|3|2|2\nClick    name:Eight and id:num8Button and type:ButtonControl and class:Button and path:2|3|2|8|9\nClick    name:Nine and id:num9Button and type:ButtonControl and class:Button and path:2|3|2|8|10\nClick    name:Clear and id:clearButton and type:ButtonControl and class:Button and path:2|3|2|5|3\n\n--------------------------------------------------------------------------------\n```\n\nCheck our Portal example in order to learn more abot the path: strategy in\nlocators and how to record elements displaying their paths:\n[https://robocorp.com/portal/robot/robocorp/example-windows-element-path](https://robocorp.com/portal/robot/robocorp/example-windows-element-path)\n\nVideo recorded demo on how to run the recorder script from VSCode:\n[https://www.loom.com/share/2807372359f34b9cbe1bc2df9194ec68](https://www.loom.com/share/2807372359f34b9cbe1bc2df9194ec68)\n\n**Caveats**\n\n* Make sure your *display scaling* is set to *100%*, otherwise you might encounter\n  issues when clicking or interacting with elements. (since offsets and coordinates\n  get distorted)\n\n* Disturbing the automation (like interacting with your mouse/keyboard) or having\n  other apps obstructing the process interacting with your app of interest will\n  most probably affect the expected behaviour. In order to avoid this, try\n  controlling the app's main window right before sending clicks or keys. And keep\n  targeting elements through **string locators**, as interacting with Windows\n  element objects previously retrieved will not work as expected in a future\n  altered state of the app (changes under the element structure).\n\n**Example: Robot Framework**\n\nThe library must be imported first.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Windows\n```\n\nWindows Calculator automation task\n\n```robotframework\n*** Tasks ***\nDo some calculations\n    [Setup]  Windows Run   calc.exe\n\n    Control Window    name:Calculator\n    Click    id:clearButton\n    Send Keys   keys=96+4=\n    ${result} =    Get Attribute    id:CalculatorResults    Name\n    Log To Console    ${result}\n\n    @{buttons} =  Get Elements  type:Group and name:\"Number pad\" > type:Button\n    FOR  ${button}  IN  @{buttons}\n        Log To Console   ${button}\n    END\n\n    [Teardown]   Close Current Window\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlibrary = Windows()\n\ndef test_do_some_calculations():\n    library.windows_run(\"calc.exe\")\n    try:\n        library.control_window(\"name:Calculator\")\n        library.click(\"id:clearButton\")\n        library.send_keys(keys=\"96+4=\")\n        result = library.get_attribute(\"id:CalculatorResults\", \"Name\")\n        print(result)\n        buttons = library.get_elements(\n            'type:Group and name:\"Number pad\" > type:Button'\n        )\n        for button in buttons:\n            print(button)\n    finally:\n        library.close_current_window()\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "./RPA/Windows/__init__.py", "lineno": 24, "tags": ["action", "mouse", "window", "window", "window", "window", "window", "action", "mouse", "action", "mouse", "window", "window", "action", "action", "action", "window", "window", "action", "mouse", "window", "window", "action", "mouse", "action", "action", "action", "keyboard", "action", "action", "action", "action", "action", "window", "window"], "inits": [{"name": "__init__", "args": [{"name": "locators_path", "kind": "POSITIONAL_OR_NAMED", "repr": "locators_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Initialize self.  See help(type(self)) for accurate signature.\n", "tags": [], "source": null, "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.", "lineno": 508}], "keywords": [{"name": "Clear Anchor", "args": [], "doc": "Clears control anchor set by `Set Anchor`\n\nThis means that all following keywords accessing elements\nwill use active window or desktop as root element.\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\elements.py", "shortdoc": "Clears control anchor set by `Set Anchor`", "lineno": 47}, {"name": "Click", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "wait_time", "kind": "POSITIONAL_OR_NAMED", "repr": "wait_time: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Mouse click on element matching given locator.\n\nException `ActionNotPossible` is raised if element does not\nallow Click action.\n\nparam locator\n\n:   String locator or element object.\n\nparam wait_time\n\n:   time to wait after click, default is a\n    library wait\\_time, see keyword `Set Wait Time`\n\nparam timeout\n\n:   float value in seconds, see keyword\n    `Set Global Timeout`\n\nreturn\n\n:   WindowsElement object\n\nExample:\n\n```robotframework\nClick  id:button1\nClick  id:button2 offset:10,10\n${element}=  Click  name:SendButton  wait_time=5.0\n```\n", "tags": ["action", "mouse"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Mouse click on element matching given locator.", "lineno": 30}, {"name": "Close Current Window", "args": [], "doc": "Closes current active window or logs a warning message.\n\nreturn\n\n:   True if close was successful, False if not\n\nExample:\n\n```robotframework\n${status}=  Close Current Window\n```\n", "tags": ["window"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\window.py", "shortdoc": "Closes current active window or logs a warning message.", "lineno": 317}, {"name": "Close Window", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Closes identified windows or logs the problems.\n\nparam locator\n\n:   String locator or Control element.\n\nparam timeout\n\n:   float value in seconds, see keyword\n    `Set Global Timeout`\n\nreturn\n\n:   How many windows were found and closed.\n\nExample:\n\n```robotframework\n${closed_count} =     Close Window    Calculator\n```\n", "tags": ["window"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\window.py", "shortdoc": "Closes identified windows or logs the problems.", "lineno": 349}, {"name": "Control Child Window", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "foreground", "kind": "POSITIONAL_OR_NAMED", "repr": "foreground: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "wait_time", "kind": "POSITIONAL_OR_NAMED", "repr": "wait_time: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Get control of child window of the active window\nby locator.\n\nparam locator\n\n:   string locator or Control element\n\nparam foreground\n\n:   True to bring window to foreground\n\nparam wait_time\n\n:   time to wait after activeting a window\n\nparam timeout\n\n:   float value in seconds, see keyword\n    `Set Global Timeout`\n\nreturn\n\n:   WindowsElement object\n\nExample:\n\n```robotframework\nControl Window   subname:\"Sage 50\" type:Window\n# actions on the main application window\n# ...\n# get control of child window of Sage application\nControl Child Window   subname:\"Test Company\" depth:1\n```\n", "tags": ["window"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\window.py", "shortdoc": "Get control of child window of the active window by locator.", "lineno": 93}, {"name": "Control Window", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "foreground", "kind": "POSITIONAL_OR_NAMED", "repr": "foreground: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "wait_time", "kind": "POSITIONAL_OR_NAMED", "repr": "wait_time: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "main", "kind": "POSITIONAL_OR_NAMED", "repr": "main: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Controls the window defined by the locator.\n\nThis means that this window is used as a root element\nfor all the following keywords using locators.\n\nReturns WindowsElement.\n\nparam locator\n\n:   string locator or Control element\n\nparam foreground\n\n:   True to bring window to foreground\n\nparam wait_time\n\n:   time to wait after activating a window\n\nparam timeout\n\n:   float value in seconds, see keyword\n    `Set Global Timeout`\n\nparam main\n\n:   on True (default) starts the search from desktop level, on\n    False it will continue to search for child elements given the set anchor\n    or current active window\n\nreturn\n\n:   WindowsElement object\n\nExample:\n\n```robotframework\nControl Window   Calculator\nControl Window   name:Calculator\nControl Window   subname:Notepad\nControl Window   regex:.*Notepad\n${window}=  Control Window   executable:Spotify.exe\n```\n", "tags": ["window"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\window.py", "shortdoc": "Controls the window defined by the locator.", "lineno": 36}, {"name": "Disable Process Listing", "args": [], "doc": "Disables process iteration in List Windows keyword.\n", "tags": ["window"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\window.py", "shortdoc": "Disables process iteration in List Windows keyword.", "lineno": 411}, {"name": "Double Click", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "wait_time", "kind": "POSITIONAL_OR_NAMED", "repr": "wait_time: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Double mouse click on element matching given locator.\n\nException `ActionNotPossible` is raised if element does not\nallow Click action.\n\nparam locator\n\n:   String locator or element object.\n\nparam wait_time\n\n:   time to wait after click, default is a\n    library wait\\_time, see keyword `Set Wait Time`\n\nparam timeout\n\n:   float value in seconds, see keyword\n    `Set Global Timeout`\n\nreturn\n\n:   WindowsElement object\n\nExample:\n\n```robotframework\n${element}=  Double Click  name:ResetButton\n```\n", "tags": ["action", "mouse"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Double mouse click on element matching given locator.", "lineno": 59}, {"name": "Drag And Drop", "args": [{"name": "source_element", "kind": "POSITIONAL_OR_NAMED", "repr": "source_element: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "target_element", "kind": "POSITIONAL_OR_NAMED", "repr": "target_element: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "speed", "kind": "POSITIONAL_OR_NAMED", "repr": "speed: float | None = 1.0", "required": true, "defaultValue": "1.0", "types": ["Union"], "typedocs": []}, {"name": "copy", "kind": "POSITIONAL_OR_NAMED", "repr": "copy: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "wait_time", "kind": "POSITIONAL_OR_NAMED", "repr": "wait_time: float | None = 1.0", "required": true, "defaultValue": "1.0", "types": ["Union"], "typedocs": []}], "doc": "Drag and drop the source element into target element.\n\nparam source\n\n:   source element for the operation\n\nparam target\n\n:   target element for the operation\n\nparam speed\n\n:   adjust speed of operation, bigger value means more speed\n\nparam copy\n\n:   on True does copy drag and drop, defaults to move\n\nparam wait_time\n\n:   time to wait after drop, default 1.0 seconds\n\nExample:\n\n```robotframework\n# copying a file, report.html, from source (File Explorer) window\n# into a target (File Explorer) Window\n# locator\nDrag And Drop\n...    name:C:\\temp type:Windows > name:report.html type:ListItem\n...    name:%{USERPROFILE}\\Documents\\artifacts type:Windows > name:\"Items View\"\n...    copy=True\n```\n\nExample:\n\n```robotframework\n# moving *.txt files into subfolder within one (File Explorer) window\n${source_dir}=    Set Variable    %{USERPROFILE}\\Documents\\test\nControl Window    name:${source_dir}\n${files}=    Find Files    ${source_dir}${/}*.txt\n# first copy files to folder2\nFOR    ${file}    IN    @{files}\n    Drag And Drop    name:${file.name}    name:folder2 type:ListItem    copy=True\nEND\n# second move files to folder1\nFOR    ${file}    IN    @{files}\n    Drag And Drop    name:${file.name}    name:folder1 type:ListItem\nEND\n```\n", "tags": ["action", "mouse"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Drag and drop the source element into target element.", "lineno": 713}, {"name": "Enable Process Listing", "args": [], "doc": "Enables process iteration in List Windows keyword.\n", "tags": ["window"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\window.py", "shortdoc": "Enables process iteration in List Windows keyword.", "lineno": 406}, {"name": "Foreground Window", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Bring the current active window or the window defined\nby the locator to the foreground.\n\nparam locator\n\n:   string locator or Control element\n\nreturn\n\n:   WindowsElement object\n\nExample:\n\n```robotframework\n${window}=  Foreground Window   Calculator\n```\n", "tags": ["window"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\window.py", "shortdoc": "Bring the current active window or the window defined by the locator to the foreground.", "lineno": 135}, {"name": "Get Attribute", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "attribute", "kind": "POSITIONAL_OR_NAMED", "repr": "attribute: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Get attribute value of the element defined by the locator.\n\nparam locator\n\n:   string locator or Control element\n\nparam attribute\n\n:   name of the attribute to get\n\nreturn\n\n:   value of attribute\n\nExample:\n\n```robotframework\n${id}=   Get Attribute  type:Edit name:firstname   AutomationId\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\elements.py", "shortdoc": "Get attribute value of the element defined by the locator.", "lineno": 126}, {"name": "Get Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "search_depth", "kind": "POSITIONAL_OR_NAMED", "repr": "search_depth: int = 8", "required": true, "defaultValue": "8", "types": ["int"], "typedocs": []}, {"name": "root_element", "kind": "POSITIONAL_OR_NAMED", "repr": "root_element: WindowsElement | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Get a Control Windows element defined by the locator.\n\nThe returned element can be used instead of a locator string for other keywords\naccepting the locator parameter.\nKeyword `Get Attribute` can be used to read element attribute values.\n\nIf locator is None, then the returned element will be in this priority:\n\n> 1. root\\_element if provided.\n\n> 1. Anchor element if that has been previously set with `Set Anchor`.\n\n> 1. Current active window if that has been set with `Control Window`.\n\n> 1. Last resort is the \"Desktop\" element.\n\nparam locator\n\n:   Locator as a string or as an element object.\n\nparam search_depth\n\n:   How deep the element search will traverse. (default 8)\n\nparam root_element\n\n:   Will be used as search root element object if provided.\n\nparam timeout\n\n:   After how many seconds (float) to give up on search. (see\n    keyword `Set Global Timeout`)\n\nreturns\n\n:   The identified WindowsElement object.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nSet Text Into Notepad Window\n    Windows Run    Notepad\n    Control Window      subname:Notepad\n    ${element} =    Get Element    regex:\"Text (E|e)ditor\"\n    Set Value    ${element}    note to myself\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib = Windows()\nlib.windows_run(\"calc.exe\")\none_btn = lib.get_element(\"Calculator > path:2|3|2|8|2\")\nlib.close_window(\"Calculator\")\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\locators.py", "shortdoc": "Get a Control Windows element defined by the locator.", "lineno": 31}, {"name": "Get Elements", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "search_depth", "kind": "POSITIONAL_OR_NAMED", "repr": "search_depth: int = 8", "required": true, "defaultValue": "8", "types": ["int"], "typedocs": []}, {"name": "root_element", "kind": "POSITIONAL_OR_NAMED", "repr": "root_element: WindowsElement | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "siblings_only", "kind": "POSITIONAL_OR_NAMED", "repr": "siblings_only: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Get a list of elements matching the locator.\n\nBy default, only the siblings (similar elements on the same level) are taken\ninto account. In order to search globally, turn siblings\\_only off, but be\naware that this will take more time to process.\n\nNote that if the syntax `parent_locator > child_locator` is used\nin the locator, it is assumed that `parent_locator` returns a\nsingular element - i.e. if the locator `parent_locator` returns multiple\nelements, only the first result is used for further processing, even if\nsiblings\\_only is off.\n\nFor more details on the rest of parameters, take a look at the `Get Element`\nkeyword.\n\nparam locator\n\n:   Locator as a string or as an element object.\n\nparam search_depth\n\n:   How deep the element search will traverse. (default 8)\n\nparam root_element\n\n:   Will be used as search root element object if provided.\n\nparam timeout\n\n:   After how many seconds (float) to give up on search. (see\n    keyword `Set Global Timeout`)\n\nparam siblings_only\n\n:   Filter for elements on the same level as the initially\n    found one. Turn it off for a global search. (True by default)\n\nreturns\n\n:   A list of matching WindowsElement objects.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nGet Headers On Same Level\n    Set Anchor      id:DataGrid\n    @{elements} =   Get Elements    type:HeaderItem\n    FOR    ${element}    IN    @{elements}\n        Log To Console    ${element.name}\n    END\n\nGet All Calculator Buttons Matching Expression\n    Windows Run    Calc\n    Control Window    subname:Calc\n    @{buttons} =    Get Elements    class:Button regex:.*o.*\n    ...     siblings_only=${False}\n    Log List    ${buttons}\n    ${length} =     Get Length      ${buttons}\n    Log To Console      Number of buttons: ${length}\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\locators.py", "shortdoc": "Get a list of elements matching the locator.", "lineno": 169}, {"name": "Get Text", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Get text from Control element defined by the locator.\n\nException `ActionNotPossible` is raised if element does not\nallow GetWindowText action.\n\nparam locator\n\n:   String locator or element object.\n\nreturn\n\n:   value of WindowText attribute of an element\n\nExample:\n\n```robotframework\n${date} =  Get Text   type:Edit name:\"Date of birth\"\n```\n", "tags": ["action"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Get text from Control element defined by the locator.", "lineno": 346}, {"name": "Get Value", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Get the value of the element defined by the provided locator.\n\nThe `ActionNotPossible` exception is raised if the identified element doesn't\nsupport value retrieval.\n\nparam locator\n\n:   String locator or element object.\n\nreturns\n\n:   Optionally the value of the identified element.\n\n**Example: Robot Framework**\n\n```robotframework\n${value} =   Get Value   type:DataItem name:column1\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib_win = Windows()\ntext = lib_win.get_value(\"Rich Text Window\")\nprint(text)\n```\n", "tags": ["action"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Get the value of the element defined by the provided locator.", "lineno": 379}, {"name": "Is Selected", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Get the selection state of the element defined by the provided locator.\n\nThe `ActionNotPossible` exception is raised if the identified element doesn't\nsupport selection item retrieval.\n\nparam locator\n\n:   String locator or element object.\n\nreturns\n\n:   Optionally the selection state of the identified element, as a boolean.\n\n**Example: Robot Framework**\n\n```robotframework\n${value} =   Is Selected   type:RadioButtonControl name:Apple\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib_win = Windows()\nvalue = lib_win.is_selected(\"type:RadioButtonControl name:Apple\")\nprint(value)\n```\n", "tags": ["action"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Get the selection state of the element defined by the provided locator.", "lineno": 251}, {"name": "List Attributes", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "List all element attributes.\n\nparam locator\n\n:   string locator or Control element\n\nreturn\n\n:   list of element attributes (strings)\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\elements.py", "shortdoc": "List all element attributes.", "lineno": 153}, {"name": "List Windows", "args": [{"name": "icons", "kind": "POSITIONAL_OR_NAMED", "repr": "icons: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "icon_save_directory", "kind": "POSITIONAL_OR_NAMED", "repr": "icon_save_directory: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "List all window element on the system.\n\nparam icons\n\n:   on True dictionary will contain Base64\n    string of the icon, default False\n\nparam icon_save_directory\n\n:   if set will save retrieved icons\n    into this filepath, by default icon files are not saved\n\nreturn\n\n:   list of dictionaries containing information\n    about Window elements\n\nExample:\n\n```robotframework\n${windows}=  List Windows\nFOR  ${window}  IN  @{windows}\n    Log  Window title:${window}[title]\n    Log  Window process name:${window}[name]\n    Log  Window process id:${window}[pid]\n    Log  Window process handle:${window}[handle]\nEND\n```\n", "tags": ["window"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\window.py", "shortdoc": "List all window element on the system.", "lineno": 229}, {"name": "Maximize Window", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Maximize the current active window or the window defined\nby the locator.\n\nparam locator\n\n:   string locator or element\n\nreturn\n\n:   WindowsElement object\n\nExample:\n\n```robotframework\n${window} =    Maximize Window  # Current active window\nMaximize Window    executable:Spotify.exe\n```\n", "tags": ["window"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\window.py", "shortdoc": "Maximize the current active window or the window defined by the locator.", "lineno": 195}, {"name": "Middle Click", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "wait_time", "kind": "POSITIONAL_OR_NAMED", "repr": "wait_time: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Right mouse click on element matching given locator.\n\nException `ActionNotPossible` is raised if element does not\nallow Click action.\n\nparam locator\n\n:   String locator or element object.\n\nparam wait_time\n\n:   time to wait after click, default is a\n    library wait\\_time, see keyword `Set Wait Time`\n\nparam timeout\n\n:   float value in seconds, see keyword\n    `Set Global Timeout`\n\nreturn\n\n:   WindowsElement object\n\nExample:\n\n```robotframework\n${element}=  Middle Click  name:button2\n```\n", "tags": ["action", "mouse"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Right mouse click on element matching given locator.", "lineno": 113}, {"name": "Minimize Window", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Minimize the current active window or the window defined\nby the locator.\n\nparam locator\n\n:   string locator or element\n\nreturn\n\n:   WindowsElement object\n\nExample:\n\n```robotframework\n${window} =    Minimize Window  # Current active window\nMinimize Window    executable:Spotify.exe\n```\n", "tags": ["window"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\window.py", "shortdoc": "Minimize the current active window or the window defined by the locator.", "lineno": 178}, {"name": "Print Tree", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "max_depth", "kind": "POSITIONAL_OR_NAMED", "repr": "max_depth: int = 8", "required": true, "defaultValue": "8", "types": ["int"], "typedocs": []}, {"name": "capture_image_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "capture_image_folder: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "log_as_warnings", "kind": "POSITIONAL_OR_NAMED", "repr": "log_as_warnings: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "return_structure", "kind": "POSITIONAL_OR_NAMED", "repr": "return_structure: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Print a tree of control elements.\n\nA Windows application structure can contain multilevel element structure.\nUnderstanding this structure is crucial for creating locators. (based on\ncontrols' details and their parent-child relationship)\n\nThis keyword can be used to output logs of application's element structure,\nstarting with the element defined by the provided locator as root. Switch\nthe return\\_structure parameter to True to get a tree of elements returned\nas well. (off by default to save memory)\n\n* The printed structure displays a tree prefixed with \"depth\" - \"position\" so\n  you know how deep (0 means root) in the tree you are and on what position\n  (1-indexed) the child you're looking for is.\n\n* The returned structure is a dictionary with all the children flattened per\n  depth level. Additionally, these WindowsElement objects contain a relevant\n  locator composed of \"root > path\" which will help to identify the element in\n  the tree.\n\nPortal example:\n[https://robocorp.com/portal/robot/robocorp/example-windows-element-path](https://robocorp.com/portal/robot/robocorp/example-windows-element-path)\n\nparam locator\n\n:   The root of the tree to output.\n\nparam max_depth\n\n:   Maximum depth level. (defaults to 8)\n\nparam capture_image_folder\n\n:   If set, controls' images will be captured in this\n    path.\n\nparam log_as_warnings\n\n:   Enables highlighted logs (at the beginning of the log\n    file as warnings) and increases visibility in the output console.\n\nparam return_structure\n\n:   A flattened tree with all the elements collated by\n    level will be returned if this is enabled.\n\nreturns\n\n:   Optionally a dictionary of children per depth level when\n    return\\_structure is enabled.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nDisplay Element Structure\n    ${tree} =   Print Tree      Calculator > path:2|3|2|8\n    ...     return_structure=${True}\n    Log To Console      ${tree}\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib = Windows()\ntree = lib.print_tree(\"Calculator > path:2|3|2|8\", return_structure=True)\nprint(tree)\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\elements.py", "shortdoc": "Print a tree of control elements.", "lineno": 56}, {"name": "Restore Window", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Window restore the current active window or the window\ndefined by the locator.\n\nparam locator\n\n:   string locator or element\n\nreturn\n\n:   WindowsElement object\n\nExample:\n\n```robotframework\n${window} =    Restore Window  # Current active window\nRestore Window    executable:Spotify.exe\n```\n", "tags": ["window"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\window.py", "shortdoc": "Window restore the current active window or the window defined by the locator.", "lineno": 212}, {"name": "Right Click", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "wait_time", "kind": "POSITIONAL_OR_NAMED", "repr": "wait_time: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Right mouse click on element matching given locator.\n\nException `ActionNotPossible` is raised if element does not\nallow Click action.\n\nparam locator\n\n:   String locator or element object.\n\nparam wait_time\n\n:   time to wait after click, default is a\n    library wait\\_time, see keyword `Set Wait Time`\n\nparam timeout\n\n:   float value in seconds, see keyword\n    `Set Global Timeout`\n\nreturn\n\n:   WindowsElement object\n\nExample:\n\n```robotframework\n${element}=  Right Click  name:MenuButton\n```\n", "tags": ["action", "mouse"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Right mouse click on element matching given locator.", "lineno": 86}, {"name": "Screenshot", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "filename", "kind": "POSITIONAL_OR_NAMED", "repr": "filename: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Take a screenshot of the element defined by the locator.\n\nAn ActionNotPossible exception is raised if the element doesn't allow being\ncaptured.\n\nparam locator\n\n:   String locator or element object.\n\nparam filename\n\n:   Image file name/path. (can be absolute/relative)\n\nraises ActionNotPossible\n\n:   When the element can't be captured.\n\nreturns\n\n:   Absolute file path of the taken screenshot image.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nTake Screenshots\n    Screenshot    desktop    desktop.png\n    Screenshot    subname:Notepad    ${OUTPUT_DIR}${/}notepad.png\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\nlib = Windows()\n\ndef take_screenshots():\n    lib.screenshot(\"desktop\", \"desktop.png\")\n    lib.screenshot(\"subname:Notepad\", \"output/notepad.png\")\n```\n", "tags": ["action"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Take a screenshot of the element defined by the locator.", "lineno": 638}, {"name": "Select", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Select a value on the passed element if such action is supported.\n\nThe `ActionNotPossible` exception is raised when the element does not allow\nthe Select action. This is usually used with combo box elements.\n\nparam locator\n\n:   String locator or element object.\n\nparam value\n\n:   String value to select on Control element\n\nreturns\n\n:   The controlled Windows element.\n\n**Example: Robot Framework**\n\n> **\\* Settings \\***\n> Library     RPA.Windows\n\n> **\\* Tasks \\***\n> Set Notepad Size\n\n> ```\n> System Message: <string>:, line 17\n\n> <string>:17: (ERROR/3) Unexpected indentation.\n> ```\n\n> > Select    id:FontSizeComboBox    22\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib = Windows()\n\ndef set_notepad_size():\n    lib.select(\"id:FontSizeComboBox\", \"22\")\n```\n", "tags": ["action"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Select a value on the passed element if such action is supported.", "lineno": 205}, {"name": "Send Keys", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "keys", "kind": "POSITIONAL_OR_NAMED", "repr": "keys: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "interval", "kind": "POSITIONAL_OR_NAMED", "repr": "interval: float = 0.01", "required": true, "defaultValue": "0.01", "types": ["float"], "typedocs": []}, {"name": "wait_time", "kind": "POSITIONAL_OR_NAMED", "repr": "wait_time: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "send_enter", "kind": "POSITIONAL_OR_NAMED", "repr": "send_enter: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Send keys to desktop, current window or to Control element\ndefined by given locator.\n\nIf `locator` is None then keys are sent to desktop.\n\nException `ActionNotPossible` is raised if element does not\nallow SendKeys action.\n\nparam locator\n\n:   Optional string locator or element object.\n\nparam keys\n\n:   The keys to send.\n\nparam interval\n\n:   Time between each sent key. (defaults to 0.01 seconds)\n\nparam wait_time\n\n:   Time to wait after sending all the keys. (defaults to\n    library's set value, see keyword `Set Wait Time`)\n\nparam send_enter\n\n:   If True then the {Enter} key is pressed at the end of the\n    sent keys.\n\nreturns\n\n:   The element identified through locator.\n\nExample:\n\n```robotframework\nSend Keys  desktop   {Ctrl}{F4}\nSend Keys  keys={Ctrl}{F4}   # locator will be NONE, keys sent to desktop\nSend Keys  id:input5  username   send_enter=${True}\n${element}=   Get Element   id:pass\nSend Keys  ${element}  password   send_enter=${True}\n```\n", "tags": ["action", "keyboard"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Send keys to desktop, current window or to Control element defined by given locator.", "lineno": 294}, {"name": "Set Anchor", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Set anchor to an element specified by the locator.\n\nAll following keywords using locators will use this element\nas a root element. Specific use case could be setting\nanchor to TableControl element and then getting column data\nbelonging to that TableControl element.\n\nTo release anchor call `Clear Anchor` keyword.\n\nparam locator\n\n:   string locator or Control element\n\nparam timeout\n\n:   timeout in seconds for element lookup (default 10.0)\n\nExample:\n\n```robotframework\nSet Anchor  type:Table name:Orders depth:16\nFOR  ${row}  IN RANGE  200\n    ${number}=  Get Value   name:number row ${row}\n    Exit For Loop If   $number == ${EMPTY}\n    ${sum}=  Get Value   name:sum row ${row}\n    Log   Order number:${number} has sum:{sum}\nEND\nClear Anchor\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\elements.py", "shortdoc": "Set anchor to an element specified by the locator.", "lineno": 14}, {"name": "Set Focus", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Set view focus to the element defined by the locator.\n\nparam locator\n\n:   String locator or element object.\n\nExample:\n\n```robotframework\nSet Focus  name:Buy type:Button\n```\n", "tags": ["action"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Set view focus to the element defined by the locator.", "lineno": 694}, {"name": "Set Global Timeout", "args": [{"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float", "required": true, "defaultValue": null, "types": ["float"], "typedocs": []}], "doc": "Set global timeout for element search. Applies also\nto `Control Window` keyword.\n\nBy default, the library has a timeout of 10 seconds.\n\nparam timeout\n\n:   float value in seconds\n\nreturn\n\n:   previous timeout value\n\nExample:\n\n```robotframework\n${old_timeout}=  Set Global Timeout  20\n${old_timeout}=  Set Global Timeout  9.5\n```\n", "tags": ["action"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Set global timeout for element search. Applies also to `Control Window` keyword.", "lineno": 672}, {"name": "Set Mouse Movement", "args": [{"name": "simulate", "kind": "POSITIONAL_OR_NAMED", "repr": "simulate: bool", "required": true, "defaultValue": null, "types": ["bool"], "typedocs": []}], "doc": "Enable or disable mouse movement simulation during clicks and other actions.\n\nReturns the previous set value as True/False.\n\nparam simulate\n\n:   Decide whether to simulate the move. (OFF by default)\n\nreturns\n\n:   Previous state.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nDisable Mouse Move\n    ${previous} =   Set Mouse Movement      ${True}\n    Log To Console   Previous mouse simulation: ${previous} (now enabled)\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib_win = Windows()\nprevious = lib_win.set_mouse_movement(True)\nprint(f\"Previous mouse simulation: {previous} (now enabled)\")\n```\n", "tags": ["action"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Enable or disable mouse movement simulation during clicks and other actions.", "lineno": 777}, {"name": "Set Value", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WindowsElement | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "append", "kind": "POSITIONAL_OR_NAMED", "repr": "append: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "enter", "kind": "POSITIONAL_OR_NAMED", "repr": "enter: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "newline", "kind": "POSITIONAL_OR_NAMED", "repr": "newline: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "send_keys_fallback", "kind": "POSITIONAL_OR_NAMED", "repr": "send_keys_fallback: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "validator", "kind": "POSITIONAL_OR_NAMED", "repr": "validator: Callable | None = <function set_value_validator at 0x000001CF69122EF0>", "required": true, "defaultValue": "<function set_value_validator at 0x000001CF69122EF0>", "types": ["Union"], "typedocs": []}], "doc": "Set value of the element defined by the locator.\n\n*Note:* An anchor will work only on element structures where you can\nrely on the stability of that root/child element tree, as remaining the same.\nUsually these kind of structures are tables. (but not restricted to)\n\n*Note:* It is important to set `append=${True}` if you want to keep the\ncurrent text in the element. Other option is to read the current text into a\nvariable, then modify that value as you wish and pass it to the `Set Value`\nkeyword for a complete text replacement. (without setting the append flag)\n\nThe following exceptions may be raised:\n\n> * `ActionNotPossible` if the element does not allow the SetValue action\n>   to be run on it nor having `send_keys_fallback=${True}`.\n\n> * `ValueError` if the new value to be set can't be set correctly.\n\nparam locator\n\n:   String locator or element object.\n\nparam value\n\n:   String value to be set.\n\nparam append\n\n:   False for setting the value, True for appending it. (OFF by\n    default)\n\nparam enter\n\n:   Set it to True to press the *Enter* key at the end of the\n    input. (nothing is pressed by default)\n\nparam newline\n\n:   Set it to True to add a new line at the end of the value. (no\n    EOL included by default; this won't work with send\\_keys\\_fallback enabled)\n\nparam send_keys_fallback\n\n:   Tries to set the value by sending it through keys\n    if the main way of setting it fails. (enabled by default)\n\nparam validator\n\n:   Function receiving two parameters post-setting, the expected\n    and the current value, which returns True if the two values match. (by\n    default, the keyword will raise if the values are different, set this to\n    None to disable validation or pass your custom function instead)\n\nreturns\n\n:   The element object identified through the passed locator.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nSet Values In Notepad\n    Set Value   type:DataItem name:column1   ab c  # Set value to \"ab c\"\n    # Press ENTER after setting the value.\n    Set Value    type:Edit name:\"File name:\"    console.txt   enter=${True}\n\n    # Add newline (manually) at the end of the string. (Notepad example)\n    Set Value    name:\"Text Editor\"  abc\\n\n    # Add newline with parameter.\n    Set Value    name:\"Text Editor\"  abc   newline=${True}\n\n    # Clear Notepad window and start appending text.\n    Set Anchor  name:\"Text Editor\"\n    # All the following keyword calls will use the anchor element as a\n    #  starting point, UNLESS they specify a locator explicitly or\n    #  `Clear Anchor` is used.\n    ${time} =    Get Time\n    # Clears with `append=${False}`. (default)\n    Set Value    value=The time now is ${time}\n    # Append text and add a newline at the end.\n    Set Value    value= and it's the task run time.   append=${True}\n    ...    newline=${True}\n    # Continue appending and ensure a new line at the end by pressing\n    #  the Enter key this time.\n    Set Value    value=But this will appear on the 2nd line now.\n    ...    append=${True}   enter=${True}   validator=${None}\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\n\nlib_win = Windows()\nlocator = \"Document - WordPad > Rich Text Window\"\nelem = lib_win.set_value(locator, value=\"My text\", send_keys_fallback=True)\ntext = lib_win.get_value(elem)\nprint(text)\n```\n", "tags": ["action"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Set value of the element defined by the locator.", "lineno": 483}, {"name": "Set Wait Time", "args": [{"name": "wait_time", "kind": "POSITIONAL_OR_NAMED", "repr": "wait_time: float", "required": true, "defaultValue": null, "types": ["float"], "typedocs": []}], "doc": "Set library wait time for action keywords.\n\nThe wait_time is spent after each keyword performing\nmouse or keyboard action.\n\nLibrary default wait_time is 0.5\n\nReturns value of the previous wait_time value.\n\nparam wait_time\n\n:   float value (in seconds), e.g. 0.1\n\nreturn\n\n:   previous wait value\n\nExample:\n\n```robotframework\n${old_wait_time}=  Set Wait Time  0.2\n```\n", "tags": ["action"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\action.py", "shortdoc": "Set library wait time for action keywords.", "lineno": 612}, {"name": "Windows Run", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "wait_time", "kind": "POSITIONAL_OR_NAMED", "repr": "wait_time: float = 3.0", "required": true, "defaultValue": "3.0", "types": ["float"], "typedocs": []}], "doc": "Use Windows Run window to launch an application.\n\nActivated by pressing Win + R. Then the app name is typed in and finally the\n\"Enter\" key is pressed.\n\nparam text\n\n:   Text to enter into the Run input field. (e.g. Notepad)\n\nparam wait_time\n\n:   Time to sleep after the searched app is executed. (3s by\n    default)\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nRun Notepad\n    Windows Run   notepad\n```\n\n**Example: Python**\n\n```python\nfrom RPA.Windows import Windows\nlib = Windows()\n\ndef run_notepad():\n    lib.windows_run(\"notepad\")\n```\n", "tags": ["window"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\window.py", "shortdoc": "Use Windows Run window to launch an application.", "lineno": 258}, {"name": "Windows Search", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "wait_time", "kind": "POSITIONAL_OR_NAMED", "repr": "wait_time: float = 3.0", "required": true, "defaultValue": "3.0", "types": ["float"], "typedocs": []}], "doc": "Use Windows search window to launch application.\n\nActivated by pressing win + s.\n\nparam text\n\n:   text to enter into search input field\n\nparam wait_time\n\n:   sleep time after search has been entered (default 3.0 seconds)\n\nExample:\n\n```robotframework\nWindows Search   Outlook\n```\n", "tags": ["window"], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python311\\lib\\site-packages\\RPA\\Windows\\keywords\\window.py", "shortdoc": "Use Windows search window to launch application.", "lineno": 294}], "dataTypes": {}, "typedocs": []}
mtime:1741376684.1904328
{"name": "RPA.Database", "doc": "Database is a library for handling different database operations.\n\nAll database operations are supported. Keywords Query and Get Rows\nreturn values by default in RPA.Table format.\n\nLibrary is compatible with any Database API Specification 2.0 module.\n\n**Workaround for inserting large JSON data for Call Stored Procedure**\n\nWorkaround is to use instead Query keyword. At the moment there is\nno known fix for the Call Stored Procedure keyword as it fails if\nJSON string is more than 8000 characters long.\n\n**Robot Framework**\n\n```robotframework\n${data}=    Load JSON from file    random_data.json\n${json}=    Convert JSON to String    ${data}\n# Single quotes around ${json} string are necessary\nQuery    exec InsertJsonDataToSampleTable '${json}'\n```\n\nReferences:\n\n* Database API Specification 2.0 - [http://www.python.org/dev/peps/pep-0249/](http://www.python.org/dev/peps/pep-0249/)\n\n* Lists of DB API 2.0 - [http://wiki.python.org/moin/DatabaseInterfaces](http://wiki.python.org/moin/DatabaseInterfaces)\n\n* Python Database Programming - [http://wiki.python.org/moin/DatabaseProgramming/](http://wiki.python.org/moin/DatabaseProgramming/)\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary         RPA.Database\n\n*** Tasks ***\nGet Orders From Database\n    Connect To Database  pymysql  tester  user  password  127.0.0.1\n    @{orders}            Query    Select * FROM incoming_orders\n    FOR   ${order}  IN  @{orders}\n        Handle Order  ${order}\n    END\n```\n\n**Python**\n\n```python\nfrom RPA.Database import Database\nfrom RPA.Robocorp.Vault import FileSecrets\n\nfilesecrets = FileSecrets(\"secrets.json\")\nsecrets = filesecrets.get_secret(\"databasesecrets\")\n\ndb = Database()\ndb.connect_to_database('pymysql',\n                    secrets[\"DATABASE\"],\n                    secrets[\"USERNAME\"],\n                    secrets[\"PASSWORD\"],\n                    '127.0.0.1'\n                    )\norders = db.query(\"SELECT * FROM incoming_orders\")\nfor order in orders:\n    print(order)\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\RPA\\Database.py", "lineno": 118, "tags": [], "inits": [], "keywords": [{"name": "Call Stored Procedure", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "params", "kind": "POSITIONAL_OR_NAMED", "repr": "params: List[str] | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "sanstran", "kind": "POSITIONAL_OR_NAMED", "repr": "sanstran: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "as_table", "kind": "POSITIONAL_OR_NAMED", "repr": "as_table: bool | None = True", "required": true, "defaultValue": "True", "types": ["Union"], "typedocs": []}, {"name": "multiple", "kind": "POSITIONAL_OR_NAMED", "repr": "multiple: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}], "doc": "Call stored procedure with name and params.\n\nparam name\n\n:   procedure name\n\nparam params\n\n:   parameters for the procedure as a list, defaults to None\n\nparam sanstran\n\n:   Run the query without an implicit transaction commit or\n    rollback if such additional action was detected. (turned off by default)\n\nparam as_table\n\n:   If the result should be an instance of Table, otherwise a\n    list will be returned. (defaults to True)\n\nparam multiple\n\n:   Return results for one result set (default False) or multiple\n    results from all result sets (set this parameter to True)\n\nreturns\n\n:   list of results\n\nExample:\n\n```robotframework\n@{params}     Create List   FirstParam   SecondParam   ThirdParam\n@{results}    Call Stored Procedure   mystpr  ${params}\n```\n", "tags": [], "source": null, "shortdoc": "Call stored procedure with name and params.", "lineno": 419}, {"name": "Connect To Database", "args": [{"name": "module_name", "kind": "POSITIONAL_OR_NAMED", "repr": "module_name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "database", "kind": "POSITIONAL_OR_NAMED", "repr": "database: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "username", "kind": "POSITIONAL_OR_NAMED", "repr": "username: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "password", "kind": "POSITIONAL_OR_NAMED", "repr": "password: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "host", "kind": "POSITIONAL_OR_NAMED", "repr": "host: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "port", "kind": "POSITIONAL_OR_NAMED", "repr": "port: int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "charset", "kind": "POSITIONAL_OR_NAMED", "repr": "charset: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "config_file", "kind": "POSITIONAL_OR_NAMED", "repr": "config_file: str | None = db.cfg", "required": true, "defaultValue": "db.cfg", "types": ["Union"], "typedocs": []}, {"name": "autocommit", "kind": "POSITIONAL_OR_NAMED", "repr": "autocommit: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}], "doc": "Connect to database using DB API 2.0 module.\n\n**Note.** The SSL support had been added for mysql\nmodule in rpaframework==17.7.0. The extra configuration\nparameters can be given via configuration file. Extra\nparameters are:\n\n* ssl_ca\n\n* ssl_cert\n\n* ssl_key\n\n* client_flags\n\nExample configuration file:\n\n```ini\n[default]\nhost=hostname.mysql.database.azure.com\nport=3306\nusername=username@hostname\ndatabase=databasename\nclient_flags=SSL,FOUND_ROWS\nssl_ca=DigiCertGlobalRootG2.crt.pem\n```\n\nparam module_name\n\n:   database module to use\n\nparam database\n\n:   name of the database\n\nparam username\n\n:   of the user accessing the database\n\nparam password\n\n:   of the user accessing the database\n\nparam host\n\n:   SQL server address\n\nparam port\n\n:   SQL server port\n\nparam charset\n\n:   for example, \"utf-8\", defaults to None\n\nparam config_file\n\n:   location of configuration file, defaults to \"db.cfg\"\n\nparam autocommit\n\n:   set autocommit value for connect\n\nExample:\n\n```robotframework\nConnect To Database  pymysql  database  username  password  host  port\nConnect To Database  ${CURDIR}${/}resources${/}dbconfig.cfg\n\n${secrets}=    Get Secret    azuredb\nConnect To Database\n...    mysql.connector\n...    password=${secrets}[password]\n...    config_file=${CURDIR}${/}azure.cfg\n```\n", "tags": [], "source": null, "shortdoc": "Connect to database using DB API 2.0 module.", "lineno": 198}, {"name": "Description", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Get description of the SQL table\n\nparam table\n\n:   name of the SQL table\n\nreturns\n\n:   database descripton as a list\n\nExample:\n\n```robotframework\nConnect To Database    pymysql  mydb  user  pass  127.0.0.1\n${db_description}      Description  mytable\n```\n", "tags": [], "source": null, "shortdoc": "Get description of the SQL table", "lineno": 486}, {"name": "Disconnect From Database", "args": [], "doc": "Close connection to SQL database\n\nExample:\n\n```robotframework\nConnect To Database    pymysql  mydb  user  pass  127.0.0.1\n${result}              Query   Select firstname, lastname FROM table\nDisconnect From Database\n```\n", "tags": [], "source": null, "shortdoc": "Close connection to SQL database", "lineno": 509}, {"name": "Execute Sql Script", "args": [{"name": "filename", "kind": "POSITIONAL_OR_NAMED", "repr": "filename: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "sanstran", "kind": "POSITIONAL_OR_NAMED", "repr": "sanstran: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding: str | None = utf-8", "required": true, "defaultValue": "utf-8", "types": ["Union"], "typedocs": []}], "doc": "Execute content of SQL script as SQL commands.\n\nparam filename\n\n:   filepath to SQL script to execute\n\nparam sanstran\n\n:   Run the query without an implicit transaction commit or\n    rollback if such additional action was detected. (turned off by default)\n\nparam encoding\n\n:   character encoding of file (utf-8 by default)\n\nExample:\n\n```robotframework\nExecute SQL Script   script.sql\n```\n", "tags": [], "source": null, "shortdoc": "Execute content of SQL script as SQL commands.", "lineno": 525}, {"name": "Get Number Of Rows", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "conditions", "kind": "POSITIONAL_OR_NAMED", "repr": "conditions: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Get number of rows in a table. Conditions can be given\nas arguments for WHERE clause.\n\nparam table\n\n:   name of the SQL table\n\nparam conditions\n\n:   restrictions for selections, defaults to None\n\nreturns\n\n:   number or rows\n\nExample:\n\n```robotframework\n${count}   Get Number Of Rows  tablename\n${count}   Get Number Of Rows  tablename  column1=5 and column2='x'\n```\n", "tags": [], "source": null, "shortdoc": "Get number of rows in a table. Conditions can be given as arguments for WHERE clause.", "lineno": 778}, {"name": "Get Rows", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "columns", "kind": "POSITIONAL_OR_NAMED", "repr": "columns: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "conditions", "kind": "POSITIONAL_OR_NAMED", "repr": "conditions: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "as_table", "kind": "POSITIONAL_OR_NAMED", "repr": "as_table: bool | None = True", "required": true, "defaultValue": "True", "types": ["Union"], "typedocs": []}], "doc": "Get rows from table. Columns and conditions can be\nset to filter result.\n\nparam table\n\n:   name of the SQL table\n\nparam columns\n\n:   name of columns to return, defaults to None\n    means that all columns are returned\n\nparam conditions\n\n:   limiting result by WHERE clause, defaults to None\n\nparam as_table\n\n:   if result should be instance of `Table`, defaults to True\n    False means that return type would be list\n\nreturns\n\n:   table or list based on param as_table arguement\n\nExample:\n\n```robotframework\n@{res}   Get Rows  tablename  arvo\n@{res}   Get Rows  tablename  arvo  columns=id,name\n@{res}   Get Rows  tablename  columns=id  conditions=column1='newvalue'\n@{res}   Get Rows  tablename  conditions=column2='updatedvalue'\n```\n", "tags": [], "source": null, "shortdoc": "Get rows from table. Columns and conditions can be set to filter result.", "lineno": 744}, {"name": "Query", "args": [{"name": "statement", "kind": "POSITIONAL_OR_NAMED", "repr": "statement: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "assertion", "kind": "POSITIONAL_OR_NAMED", "repr": "assertion: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "sanstran", "kind": "POSITIONAL_OR_NAMED", "repr": "sanstran: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "as_table", "kind": "POSITIONAL_OR_NAMED", "repr": "as_table: bool | None = True", "required": true, "defaultValue": "True", "types": ["Union"], "typedocs": []}, {"name": "returning", "kind": "POSITIONAL_OR_NAMED", "repr": "returning: bool | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "data", "kind": "POSITIONAL_OR_NAMED", "repr": "data: Dict | Tuple | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Execute a SQL query and optionally return the execution result.\n\nSecurity Warning: In order to safely include untrusted data in SQL queries\nit is advisable to use parameterized queries. For more information about\nformatting for specific databases, please see [https://bobby-tables.com/python](https://bobby-tables.com/python)\n\nparam statement\n\n:   SQL statement to execute.\n\nparam assertion\n\n:   Assert on query result, row_count or columns.\n    Works only for SELECT statements. (defaults to None)\n\nparam sanstran\n\n:   Run the query without an implicit transaction commit or\n    rollback if such additional action was detected and this is set to True.\n    (turned off by default, meaning that *commit* is performed on successful\n    queries and *rollback* on failing ones automatically)\n\nparam as_table\n\n:   If the result should be an instance of Table, otherwise a\n    list will be returned. (defaults to True)\n\nparam returning\n\n:   Set this to True if you want to have rows explicitly\n    returned (instead of the query result), False otherwise. (by default a\n    heuristic detects if it should return or not)\n\nparam data\n\n:   The data to use if the SQL statement is parameterized\n\nreturns\n\n:   Fetched rows when returning is True or if the heuristic decides\n    that the statement should return (raw rows or as Table if as\\_table is\n    True), otherwise the object produced by the execution is returned.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Database\n\n*** Tasks ***\nSelect Values From Table\n    @{rows} =    Query   SELECT id,value FROM table\n    FOR  ${row}  IN  @{rows}\n        Log   ${row}\n    END\n    @{res} =    Query   Select * FROM table   row_count > ${EXPECTED}\n    @{res} =    Query   Select * FROM table   'value' in columns\n    @{res} =    Query   Select * FROM table   columns == ['id', 'value']\n    @{res} =    Query   Select * FROM table WHERE value = ?  data=(\"${d}\", )\n    # Calling Stored Procedure with Query keyword requires that parameter\n    # 'returning' is set to 'True'\n    @{res} =    Query   Exec stored_procedure  returning=True\n```\n\n**Python**\n\n```python\nfrom RPA.Database import Database\n\nlib = Database()\n\ndef insert_and_return_names():\n    lib.connect_to_database(\"sqlite3\", \"sqlite.db\")\n    lib.query(\"DROP TABLE IF EXISTS orders;\")\n    lib.query(\"CREATE TABLE orders(id INTEGER PRIMARY KEY, name TEXT);\")\n    data1 = \"my-1st-order\"\n    data2 = \"my-2nd-order\"\n    lib.query(\n        'INSERT INTO orders(id, name) VALUES(1, ?), (2, ?);',\n        data=(data1, data2)\n    )\n    rows = lib.query(\n        'SELECT * FROM orders'\n    )\n    print([row[\"name\"] for row in rows])  # ['my-1st-order', 'my-2nd-order']\n```\n", "tags": [], "source": null, "shortdoc": "Execute a SQL query and optionally return the execution result.", "lineno": 583}, {"name": "Set Auto Commit", "args": [{"name": "autocommit", "kind": "POSITIONAL_OR_NAMED", "repr": "autocommit: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Set database auto commit mode.\n\nparam autocommit\n\n:   boolean value for auto commit, defaults to True\n\nExample:\n\n```robotframework\nSet Auto Commit             # auto commit is set on\nSet Auto Commit   False     # auto commit is turned off\n```\n", "tags": [], "source": null, "shortdoc": "Set database auto commit mode.", "lineno": 729}], "dataTypes": {}, "typedocs": []}
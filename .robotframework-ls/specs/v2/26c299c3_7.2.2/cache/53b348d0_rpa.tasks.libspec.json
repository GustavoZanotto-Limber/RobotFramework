mtime:1741376705.4169586
{"name": "RPA.Tasks", "doc": "Tasks is a library for controlling task execution during a Robot Framework run.\n\nIt allows conditional branching between tasks, loops and jumps, and optionally\nvalidating the execution through a schema file. It can also be used to\nvisualize the tasks as a graph.\n\n**Execution model**\n\nIn a typical Robot Framework run, tasks are ordered linearly in a file and\nthey're executed in definition order. Events that happen during\nthe execution can not affect the order and only have the option to fail the task\nor continue as defined.\n\nUsing the Tasks library, it's possible to change this model according\nto different states or inputs. The execution will start by running a single\nstart task from the suite, and then according to user-defined keywords or\nschema rules select the next task. Any task which is defined in the same file\ncan be used, and the same task can also be used multiple times during a single\nexecution.\n\nExample:\n\nAs an example, the following Robot Framework file describes a process where\na task would have to be executed multiple times before a condition is reached.\nIn a real-world scenario, these tasks would be more complicated, instead of just\nincrementing numbers.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Tasks\n\n*** Variables ***\n${CURRENT}    ${1}\n${TARGET}     ${5}\n\n*** Tasks ***\nCheck loop condition\n    Log    I'm trying to count to ${TARGET}\n    Set next task if    ${CURRENT} >= ${TARGET}\n    ...    Target reached\n    ...    Increment current number\n\nThis will not run\n    Fail    This should never run\n\nIncrement current number\n    Set suite variable    ${CURRENT}    ${CURRENT + 1}\n    Log    Number is now ${CURRENT}\n    Jump to task    Check loop condition\n\nTarget reached\n    Log    Those are some good numbers!\n```\n\nThe execution for this example would go as follows:\n\n1. It starts from `Check loop condition`, as it's the first task in the file.\n\n1. During the first task, the keyword `Set next task if` is called, which queues\n   up the next task according to a condition.\n\n1. In the initial state, we have not reached the target number, and will next run\n   the task `Increment current number`.\n\n1. The second task executes normally and in the end jumps back to the first\n   task using the keyword `Jump to task`.\n\n1. The above sequence is repeated until the condition is met, and we move to\n   the final task of the file. This final task does not schedule further tasks\n   and the execution ends.\n\nYou can also note the task `This will not run`, which as the name implies\nis never executed, as no other task schedules or jumps to it.\n\nThe console log from the above execution shows how the same task is executed\nmultiple times:\n\n```console\n==============================================================================\nIncrementing Process\n==============================================================================\n#1   Check loop condition                                             | PASS |\nTransition: Set by keyword\n------------------------------------------------------------------------------\n#2   Increment current number                                         | PASS |\nTransition: Set by keyword\n------------------------------------------------------------------------------\n#3   Check loop condition                                             | PASS |\nTransition: Set by keyword\n------------------------------------------------------------------------------\n#4   Increment current number                                         | PASS |\nTransition: Set by keyword\n------------------------------------------------------------------------------\n#5   Check loop condition                                             | PASS |\nTransition: Set by keyword\n------------------------------------------------------------------------------\n#6   Increment current number                                         | PASS |\nTransition: Set by keyword\n------------------------------------------------------------------------------\n#7   Check loop condition                                             | PASS |\nTransition: Set by keyword\n------------------------------------------------------------------------------\n#8   Increment current number                                         | PASS |\nTransition: Set by keyword\n------------------------------------------------------------------------------\n#9   Check loop condition                                             | PASS |\nTransition: Set by keyword\n------------------------------------------------------------------------------\n#10  Target reached                                                   | PASS |\n------------------------------------------------------------------------------\nIncrementing Process:: [/graph_incrementing_process.svg]              | PASS |\n10 critical tasks, 10 passed, 0 failed\n10 tasks total, 10 passed, 0 failed\n==============================================================================\n```\n\n**Graph**\n\nA common way to document a process is through a directed graph. These graphs\nare usually drawn manually and describe the expected higher level steps.\nThe actual implementation itself follows a different path through a graph,\ndepending on inputs or implementation details. This library visualizes this\nexecution graph using the [Graphviz](https://graphviz.org) tool.\n\nAfter the execution is finished, it will create a\n[DOT](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) file\nand render it as an image. This image will automatically be appended\nto the suite's documentation field.\n\n**Requirements**\n\nDrawing the graph requires a working installation of\n[Graphviz](https://graphviz.org). This can be installed through their\nwebsite or by using [Conda](https://docs.conda.io/).\n\nThis requirement is optional for the functioning of this library, and will\ndisplay a warning if the tool is not available. The visualization\ncan be entirely disabled with the `graph` argument during library\ninitialization.\n\n**Schema**\n\nThere is an option to define a schema file for the suite, which is written in JSON.\nThis file will be used to validate the actual execution and fail it if an unexpected\ntransition between tasks happens. It can also define rules for selecting the next\ntask, which allows separating the task and process definitions.\n\nExample:\n\nThe execution-example shown previously used keywords to control\nthe execution. This can also be done using the following schema:\n\n```json\n{\n    \"tasks\": {\n        \"Check loop condition\": {\n            \"alias\": \"check\",\n            \"start\": true,\n            \"next\": [\n                \"increment\",\n                \"target\"\n            ],\n            \"actions\": [\n                {\n                    \"condition\": \"$CURRENT >= $TARGET\",\n                    \"task\": \"target\"\n                },\n                {\n                    \"condition\": \"$CURRENT < $TARGET\",\n                    \"task\": \"increment\"\n                }\n            ]\n        },\n        \"Increment current number\": {\n            \"alias\": \"increment\",\n            \"next\": [\n                \"check\"\n            ],\n            \"actions\": [\n                {\n                    \"status\": \"PASS\",\n                    \"task\": \"check\"\n                }\n            ]\n        },\n        \"Target reached\": {\n            \"alias\": \"target\",\n            \"end\": true,\n            \"next\": []\n        }\n    }\n}\n```\n\nThis has the added benefit of protecting against implementation errors,\nas the library will validate the start and end tasks, and transitions between\ndifferent tasks.\n\nAfter this schema has been taken into use, the aforementioned example\nwill reduce to the following:\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Tasks    schema=counter-schema.json\n\n*** Variables ***\n${CURRENT}    ${1}\n${TARGET}     ${5}\n\n*** Tasks ***\nCheck loop condition\n    Log    I'm trying to count to ${TARGET}\n\nThis will not run\n    Fail    This should never run\n\nIncrement current number\n    Set suite variable    ${CURRENT}    ${CURRENT + 1}\n    Log    Number is now ${CURRENT}\n\nTarget reached\n    Log    Those are some good numbers!\n```\n\n**Format**\n\nThe current format is JSON with the following structure:\n\n```javascript\n{\n    \"tasks\": {\n        [name: string]: {\n            \"alias\": string,\n            \"start\": boolean,\n            \"end\": boolean,\n            \"next\": string[],\n            \"actions\": action[],\n        }\n    }\n}\n```\n\nEach schema is a map of tasks with various properties. The keys must\nmatch the task names in the Robot Framework file definition. All properties\ninside the task are optional.\n\nThe available properties and their uses:\n\n* *alias*:   Define a short name for the task, which can be used as a reference\n\n  :   inside the schema.\n\n* *start*:   Start task for execution. There can be only one task with this\n\n  :   enabled. If not defined, will default to first task in the file.\n\n* *end*:     Valid end task for execution. There can be multiple tasks with this\n\n  :   enabled. Fails the execution if this is defined for any task and the\n      execution stops in a non-end task.\n\n* *next*:    List of valid tasks to transition to from this task. Supports\n\n  :   alias definitions.\n\n* *actions*: List of actions that are executed at the end of the task.\n\n  :   See section below for details.\n\nThe types of actions:\n\n* *exception*: Set the next task if a matching exception occurs.\n\n  :   Matches the exception message as regex.\n\n* *condition*: Set the next task if a conditional expression is true.\n\n  :   Allows using Robot Framework variables.\n\n* *status*:    Set the next task if the current task's result matches,\n\n  :   e.g. PASS or FAIL.\n\nExamples of actions:\n\n```json\n[\n    {\"exception\": \".*ValueError.*\", \"task\": \"Invalid input values\"},\n    {\"condition\": \"$ATTEMPTS > 10\", \"task\": \"Too many attempts\"},\n    {\"status\": \"PASS\", \"task\": \"Success state\"}\n]\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\RPA\\Tasks.py", "lineno": 334, "tags": [], "inits": [{"name": "__init__", "args": [{"name": "execution_limit", "kind": "POSITIONAL_OR_NAMED", "repr": "execution_limit=1024", "required": true, "defaultValue": "1024", "types": [], "typedocs": []}, {"name": "schema", "kind": "POSITIONAL_OR_NAMED", "repr": "schema=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "graph", "kind": "POSITIONAL_OR_NAMED", "repr": "graph=True", "required": true, "defaultValue": "True", "types": [], "typedocs": []}, {"name": "graph_inline", "kind": "POSITIONAL_OR_NAMED", "repr": "graph_inline=True", "required": true, "defaultValue": "True", "types": [], "typedocs": []}], "doc": "There are a few arguments for controlling the Tasks library.\n\nparam execution_limit\n\n:   Maximum number of tasks to run in suite,\n    used to prevent infinite loops\n\nparam schema\n\n:   Path to optional schema file\n\nparam graph\n\n:   Render execution result as graph using graphviz\n\nparam graph_inline\n\n:   Inline graph into log, instead of saving as file\n", "tags": [], "source": null, "shortdoc": "There are a few arguments for controlling the Tasks library.", "lineno": 623}], "keywords": [{"name": "Jump To Task", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Jump directly to given task, skipping the rest of the task\nexecution. If run inside a teardown, also skips the rest of the\nteardown sequence.\n", "tags": [], "source": null, "shortdoc": "Jump directly to given task, skipping the rest of the task execution. If run inside a teardown, also skips the rest of the teardown sequence.", "lineno": 826}, {"name": "Jump To Task If", "args": [{"name": "condition", "kind": "POSITIONAL_OR_NAMED", "repr": "condition", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "default", "kind": "POSITIONAL_OR_NAMED", "repr": "default=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Jump directly to given task according to the condition.\n", "tags": [], "source": null, "shortdoc": "Jump directly to given task according to the condition.", "lineno": 834}, {"name": "Jump To Task If Keyword Fails", "args": [{"name": "task", "kind": "POSITIONAL_OR_NAMED", "repr": "task", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "keyword", "kind": "POSITIONAL_OR_NAMED", "repr": "keyword", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Executes given keyword and jumps to given task if it fails.\n", "tags": [], "source": null, "shortdoc": "Executes given keyword and jumps to given task if it fails.", "lineno": 852}, {"name": "Jump To Task If Keyword Succeeds", "args": [{"name": "task", "kind": "POSITIONAL_OR_NAMED", "repr": "task", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "keyword", "kind": "POSITIONAL_OR_NAMED", "repr": "keyword", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Executes given keyword and jumps to given task if it succeeds.\n", "tags": [], "source": null, "shortdoc": "Executes given keyword and jumps to given task if it succeeds.", "lineno": 858}, {"name": "Set Next Task", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Set the next task to be executed.\nShould be a task in the same suite.\n\nparam name\n\n:   Name of next task\n", "tags": [], "source": null, "shortdoc": "Set the next task to be executed. Should be a task in the same suite.", "lineno": 785}, {"name": "Set Next Task If", "args": [{"name": "condition", "kind": "POSITIONAL_OR_NAMED", "repr": "condition", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "default", "kind": "POSITIONAL_OR_NAMED", "repr": "default=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Set the next task according to the condition.\nIf no default is given, does not modify execution order.\n\nparam condition\n\n:   Condition expression to evaluate\n\nparam name\n\n:   Name of next task, if successful\n\nparam default\n\n:   Name of next task, if unsuccessful\n", "tags": [], "source": null, "shortdoc": "Set the next task according to the condition. If no default is given, does not modify execution order.", "lineno": 806}, {"name": "Set Next Task If Keyword Fails", "args": [{"name": "task", "kind": "POSITIONAL_OR_NAMED", "repr": "task", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "keyword", "kind": "POSITIONAL_OR_NAMED", "repr": "keyword", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Executes given keyword and sets the next task if it fails.\n", "tags": [], "source": null, "shortdoc": "Executes given keyword and sets the next task if it fails.", "lineno": 840}, {"name": "Set Next Task If Keyword Succeeds", "args": [{"name": "task", "kind": "POSITIONAL_OR_NAMED", "repr": "task", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "keyword", "kind": "POSITIONAL_OR_NAMED", "repr": "keyword", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Executes given keyword and sets the next task if it succeeds.\n", "tags": [], "source": null, "shortdoc": "Executes given keyword and sets the next task if it succeeds.", "lineno": 846}], "dataTypes": {}, "typedocs": []}
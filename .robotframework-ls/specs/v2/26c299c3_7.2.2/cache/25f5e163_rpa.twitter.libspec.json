mtime:1741376692.179488
{"name": "RPA.Twitter", "doc": "Twitter is a library for accessing Twitter using developer API.\nThe library extends [tweepy](http://docs.tweepy.org/en/latest/index.html) library.\n\nAuthorization credentials can be given as parameters for `authorize` keyword\nor keyword can read them in as environment variables:\n\n* TWITTER\\_CONSUMER\\_KEY\n\n* TWITTER\\_CONSUMER\\_SECRET\n\n* TWITTER\\_ACCESS\\_TOKEN\n\n* TWITTER\\_ACCESS\\_TOKEN\\_SECRET\n\nLibrary usage requires Twitter developer credentials.\nThose can be requested from [Twitter developer site](https://developer.twitter.com/)\n\n**Examples**\n\n```robotframework\n*** Settings ***\nLibrary   RPA.Twitter\n\n*** Tasks ***\nGet user tweets and like them\n    [Setup]   Authorize\n    @{tweets}=   Get User Tweets   username=niinisto   count=5\n    FOR   ${tweet}  IN   @{tweets}\n        Like   ${tweet}\n    END\n```\n\n```python\nfrom RPA.Twitter import Twitter\n\nlibrary = Twitter()\nlibrary.authorize()\ntweets = library.get_user_tweets(username=\"niinisto\", count=5)\nfor tw in tweets:\n    library.like(tw)\ntweets = library.text_search_tweets(query=\"corona trump\")\nfor tw in tweets:\n    print(tw.text)\nuser = library.get_user_profile(\"niinisto\")\nlibrary.follow(user)\nlibrary.tweet(\"first tweet\")\nme = library.get_me()\nprint(me)\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\RPA\\Twitter.py", "lineno": 41, "tags": [], "inits": [], "keywords": [{"name": "Authorize", "args": [{"name": "consumer_key", "kind": "POSITIONAL_OR_NAMED", "repr": "consumer_key: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "consumer_secret", "kind": "POSITIONAL_OR_NAMED", "repr": "consumer_secret: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "access_token", "kind": "POSITIONAL_OR_NAMED", "repr": "access_token: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "access_token_secret", "kind": "POSITIONAL_OR_NAMED", "repr": "access_token_secret: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Authorize to Twitter API\n\nparam consumer_key\n\n:   app consumer key\n\nparam consumer_secret\n\n:   app consumer secret\n\nparam access_token\n\n:   user access token\n\nparam access_token_secret\n\n:   user access token secret\n", "tags": [], "source": null, "shortdoc": "Authorize to Twitter API", "lineno": 118}, {"name": "Follow", "args": [{"name": "user", "kind": "POSITIONAL_OR_NAMED", "repr": "user: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Follow Twitter user\n\nparam user\n\n:   screen name of the user\n\nreturn\n\n:   True if user was followed, False if not\n", "tags": [], "source": null, "shortdoc": "Follow Twitter user", "lineno": 321}, {"name": "Get Me", "args": [], "doc": "Get Twitter profile of authenticated user\n\nreturn\n\n:   user profile as dictionary or None\n", "tags": [], "source": null, "shortdoc": "Get Twitter profile of authenticated user", "lineno": 151}, {"name": "Get User Profile", "args": [{"name": "username", "kind": "POSITIONAL_OR_NAMED", "repr": "username: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Get user's Twitter profile\n\nparam username\n\n:   whose profile to get\n\nreturn\n\n:   profile as dictionary\n", "tags": [], "source": null, "shortdoc": "Get user's Twitter profile", "lineno": 262}, {"name": "Get User Tweets", "args": [{"name": "username", "kind": "POSITIONAL_OR_NAMED", "repr": "username: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "count", "kind": "POSITIONAL_OR_NAMED", "repr": "count: int = 100", "required": true, "defaultValue": "100", "types": ["int"], "typedocs": []}], "doc": "Get user tweets\n\nparam username\n\n:   whose tweets to get\n\nparam count\n\n:   maximum number of tweets, defaults to 100\n\nreturn\n\n:   list of user tweets\n", "tags": [], "source": null, "shortdoc": "Get user tweets", "lineno": 160}, {"name": "Like", "args": [{"name": "tweet", "kind": "POSITIONAL_OR_NAMED", "repr": "tweet: Tweet = None", "required": true, "defaultValue": "None", "types": ["Tweet"], "typedocs": []}], "doc": "Like a tweet\n\nparam tweet\n\n:   as a class Tweet\n\nreturn\n\n:   True if Tweet was liked, False if not\n", "tags": [], "source": null, "shortdoc": "Like a tweet", "lineno": 285}, {"name": "Text Search Tweets", "args": [{"name": "query", "kind": "POSITIONAL_OR_NAMED", "repr": "query: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "count", "kind": "POSITIONAL_OR_NAMED", "repr": "count: int = 100", "required": true, "defaultValue": "100", "types": ["int"], "typedocs": []}, {"name": "geocode", "kind": "POSITIONAL_OR_NAMED", "repr": "geocode: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "lang", "kind": "POSITIONAL_OR_NAMED", "repr": "lang: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "locale", "kind": "POSITIONAL_OR_NAMED", "repr": "locale: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "result_type", "kind": "POSITIONAL_OR_NAMED", "repr": "result_type: str = mixed", "required": true, "defaultValue": "mixed", "types": ["str"], "typedocs": []}, {"name": "until", "kind": "POSITIONAL_OR_NAMED", "repr": "until: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "since_id", "kind": "POSITIONAL_OR_NAMED", "repr": "since_id: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}, {"name": "max_id", "kind": "POSITIONAL_OR_NAMED", "repr": "max_id: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Search tweets defined by search query\n\nResults types:\n\n* mixed : include both popular and real time results in the response\n\n* recent : return only the most recent results in the response\n\n* popular : return only the most popular results in the response\n\nparam query\n\n:   search query string of 500 characters maximum,\n    including operators\n\nparam count\n\n:   maximum number of tweets, defaults to 100\n\nparam geocode\n\n:   tweets by users located within a given\n    radius of the given latitude/longitude\n\nparam lang\n\n:   language code of tweets\n\nparam locale\n\n:   language of the query you are sending\n\nparam result_type\n\n:   type of search results you would prefer to receive,\n    default \"mixed\"\n\nparam until\n\n:   tweets created before the given date\n\nparam since_id\n\n:   Returns only statuses with an ID greater than\n\nparam max_id\n\n:   only statuses with an ID less than\n\nreturn\n\n:   list of matching tweets\n", "tags": [], "source": null, "shortdoc": "Search tweets defined by search query", "lineno": 193}, {"name": "Tweet", "args": [{"name": "content", "kind": "POSITIONAL_OR_NAMED", "repr": "content: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Make a tweet with content\n\nparam content\n\n:   text for the status update\n", "tags": [], "source": null, "shortdoc": "Make a tweet with content", "lineno": 277}, {"name": "Unfollow", "args": [{"name": "user", "kind": "POSITIONAL_OR_NAMED", "repr": "user: str = None", "required": true, "defaultValue": "None", "types": ["str"], "typedocs": []}], "doc": "Unfollow Twitter user\n\nparam user\n\n:   screen name of the user\n\nreturn\n\n:   True if user was followed, False if not\n", "tags": [], "source": null, "shortdoc": "Unfollow Twitter user", "lineno": 335}, {"name": "Unlike", "args": [{"name": "tweet", "kind": "POSITIONAL_OR_NAMED", "repr": "tweet: Tweet = None", "required": true, "defaultValue": "None", "types": ["Tweet"], "typedocs": []}], "doc": "Unlike a tweet\n\nparam tweet\n\n:   as a class Tweet\n\nreturn\n\n:   True if Tweet was unliked, False if not\n", "tags": [], "source": null, "shortdoc": "Unlike a tweet", "lineno": 303}], "dataTypes": {}, "typedocs": []}
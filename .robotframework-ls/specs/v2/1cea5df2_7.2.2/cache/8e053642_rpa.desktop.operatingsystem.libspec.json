mtime:1744200517.96067
{"name": "RPA.Desktop.OperatingSystem", "doc": "OperatingSystem is a cross-platform library for managing\ncomputer properties and actions.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Desktop.OperatingSystem\n\n*** Tasks ***\nGet computer information\n    ${boot_time}=   Get Boot Time  as_datetime=${TRUE}\n    ${machine}=     Get Machine Name\n    ${username}=    Get Username\n    &{memory}=      Get Memory Stats\n    Log Many        ${memory}\n```\n\n**Python**\n\n```python\nfrom RPA.Desktop.OperatingSystem import OperatingSystem\n\ndef get_computer_information():\n    ops = OperatingSystem()\n    print(f\"Boot time    : { ops.get_boot_time(as_datetime=True) }\"\n          f\"Machine name : { ops.get_machine_name() }\"\n          f\"Username     : { ops.get_username() }\"\n          f\"Memory       : { ops.get_memory_stats() }\")\n\nif __name__ == \"__main__\":\n    get_computer_information()\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py", "lineno": 21, "tags": [], "inits": [], "keywords": [{"name": "Boot Time In Seconds From Epoch", "args": [], "doc": "Get machine boot time\n\nreturn\n\n:   boot time in seconds from Epoch\n\nExample:\n\n```robotframework\n${epoch}  Boot Time In Seconds From Epoch\n```\n", "tags": [], "source": null, "shortdoc": "Get machine boot time", "lineno": 92}, {"name": "Get Boot Time", "args": [{"name": "as_datetime", "kind": "POSITIONAL_OR_NAMED", "repr": "as_datetime: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "datetime_format", "kind": "POSITIONAL_OR_NAMED", "repr": "datetime_format: str = %Y-%m-%d %H:%M:%S", "required": true, "defaultValue": "%Y-%m-%d %H:%M:%S", "types": ["str"], "typedocs": []}], "doc": "Get computer boot time in seconds from Epoch or in datetime string.\n\nparam as_datetime\n\n:   if True returns datetime string, otherwise seconds,\n    defaults to False\n\nparam datetime_format\n\n:   datetime string format, defaults to \"%Y-%m-%d %H:%M:%S\"\n\nreturn\n\n:   seconds from Epoch or datetime string\n\nExample:\n\n```robotframework\n${boottime}  Get Boot Time\n${boottime}  Get Boot Time   as_datetime=True\n${boottime}  Get Boot Time   as_datetime=True  datetime_format=%d.%m.%Y\n```\n", "tags": [], "source": null, "shortdoc": "Get computer boot time in seconds from Epoch or in datetime string.", "lineno": 67}, {"name": "Get Machine Name", "args": [], "doc": "Get machine name\n\nreturn\n\n:   machine name as string\n\nExample:\n\n```robotframework\n${machine}  Get Machine Name\n```\n", "tags": [], "source": null, "shortdoc": "Get machine name", "lineno": 106}, {"name": "Get Memory Stats", "args": [{"name": "humanized", "kind": "POSITIONAL_OR_NAMED", "repr": "humanized: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Get computer memory stats and return those in bytes\nor in humanized memory format.\n\nparam humanized\n\n:   if False returns memory information in bytes, defaults to True\n\nreturn\n\n:   memory information in dictionary format\n\nExample:\n\n```robotframework\n&{mem}     Get Memory Stats\n&{mem}     Get Memory Stats   humanized=False\n```\n", "tags": [], "source": null, "shortdoc": "Get computer memory stats and return those in bytes or in humanized memory format.", "lineno": 234}, {"name": "Get Username", "args": [], "doc": "Get username of logged in user\n\nreturn\n\n:   username as string\n\nExample:\n\n```robotframework\n${user}  Get Username\n```\n", "tags": [], "source": null, "shortdoc": "Get username of logged in user", "lineno": 120}, {"name": "Kill Process", "args": [{"name": "process_name", "kind": "POSITIONAL_OR_NAMED", "repr": "process_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Kill process by name\n\nparam process_name\n\n:   name of the process\n\nreturn\n\n:   True if succeeds False if not\n\nExample:\n\n```robotframework\n${process}  Process Exists  calc  strict=False\n${status}   Kill Process    ${process.name()}\n```\n", "tags": [], "source": null, "shortdoc": "Kill process by name", "lineno": 197}, {"name": "Kill Process By Pid", "args": [{"name": "pid", "kind": "POSITIONAL_OR_NAMED", "repr": "pid: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}], "doc": "Kill process by pid\n\nparam pid\n\n:   process identifier\n\nExample:\n\n```robotframework\n${process}  Process Exists  calc  strict=False\n${status}   Kill Process By PID   ${process.pid}\n```\n", "tags": [], "source": null, "shortdoc": "Kill process by pid", "lineno": 218}, {"name": "Process Exists", "args": [{"name": "process_name", "kind": "POSITIONAL_OR_NAMED", "repr": "process_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "strict", "kind": "POSITIONAL_OR_NAMED", "repr": "strict: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Check if process exists by its name\n\nparam process_name\n\n:   search for this process\n\nparam strict\n\n:   defines how match is made, default True\n    which means that process name needs to be exact match\n    and False does inclusive matching\n\nreturn\n\n:   process instance or False\n\nExample:\n\n```robotframework\n${process}  Process Exists  calc\n${process}  Process Exists  calc  strict=False\n```\n", "tags": [], "source": null, "shortdoc": "Check if process exists by its name", "lineno": 151}, {"name": "Process Id Exists", "args": [{"name": "pid", "kind": "POSITIONAL_OR_NAMED", "repr": "pid: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}], "doc": "Check if process exists by its id\n\nparam pid\n\n:   process identifier\n\nreturn\n\n:   process instance or False\n\nExample:\n\n```robotframework\n${process}  Process ID Exists  4567\nRun Keyword If   ${process}  Log  Process exists\n```\n", "tags": [], "source": null, "shortdoc": "Check if process exists by its id", "lineno": 177}, {"name": "Put System To Sleep", "args": [], "doc": "Puts system to sleep mode\n\nExample:\n\n```robotframework\nPut System To Sleep\n```\n", "tags": [], "source": null, "shortdoc": "Puts system to sleep mode", "lineno": 135}], "dataTypes": {}, "typedocs": []}
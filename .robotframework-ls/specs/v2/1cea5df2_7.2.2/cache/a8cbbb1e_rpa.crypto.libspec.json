mtime:1744200483.4179173
{"name": "RPA.Crypto", "doc": "Library for common encryption and hashing operations.\n\nLibrary uses by default the\n[Fernet](https://github.com/fernet/spec/blob/master/Spec.md) format\nfor encryption. More specifically, it uses AES in CBC mode with\na 128-bit key for encryption and HMAC with SHA256 for authentication.\n\nAlternative encryption format for the library is\n[AES256](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard).\n\nTo use the encryption features, generate a key with the command line\nutility `rpa-crypto` or with the keyword `Generate Key`. Store\nthe key in a secure place, such as Robocorp Vault, and load it within\nthe execution before calling encryption/decryption keywords.\n\n**Example usage with Robocorp Vault**\n\nCreate an encryption key with the CLI utility:\n\n```console\n> rpa-crypto key\nrGx1edA07yz7uD08ChiPSunn8vaauRxw0pAbsal9zjM=\n```\n\nStore the key in Robocorp Vault, in this case with the name `EncryptionKey`.\n\nLoad the key from the vault before encryption operations:\n\n```robotframework\nUse encryption key from vault    EncryptionKey\n${encrypted}=   Encrypt file    orders.xlsx\nAdd work item file    ${encrypted}    name=Orders\n```\n\nIn another task, this same key can be used to decrypt the file:\n\n```robotframework\nUse encryption key from vault    EncryptionKey\n${encrypted}=    Get work item file    Orders\n${orders}=   Decrypt file    ${encrypted}\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Crypto.py", "lineno": 71, "tags": [], "inits": [{"name": "__init__", "args": [{"name": "encryption_type", "kind": "POSITIONAL_OR_NAMED", "repr": "encryption_type: str | EncryptionType | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Initialize self.  See help(type(self)) for accurate signature.\n", "tags": [], "source": null, "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.", "lineno": 118}], "keywords": [{"name": "Decrypt File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "output", "kind": "POSITIONAL_OR_NAMED", "repr": "output: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "encryption_type", "kind": "POSITIONAL_OR_NAMED", "repr": "encryption_type: str | EncryptionType | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Decrypt a file.\n\nparam path\n\n:   Path to encrypted input file\n\nparam output\n\n:   Path to decrypted output file\n\nreturn\n\n:   Path to the decrypted file\n\nIf no output path is given, it will generate one from the input path.\nThe resulting output path is returned.\n\nExample:\n\n```robotframework\nUse encryption key    ${key}\n${path}=    Decrypt file    orders.xlsx.enc\nLog    Path to decrypted file is: ${path}\n```\n", "tags": [], "source": null, "shortdoc": "Decrypt a file.", "lineno": 401}, {"name": "Decrypt String", "args": [{"name": "data", "kind": "POSITIONAL_OR_NAMED", "repr": "data: bytes | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding: str = utf-8", "required": true, "defaultValue": "utf-8", "types": ["str"], "typedocs": []}, {"name": "encryption_type", "kind": "POSITIONAL_OR_NAMED", "repr": "encryption_type: str | EncryptionType | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Decrypt a string.\n\nparam data\n\n:   Encrypted data as base64 string\n\nparam encoding\n\n:   Original encoding of string\n\nreturn\n\n:   Decrypted string or raw bytes, if None given as encoding\n\nReturns the decrypted string that is parsed with the given encoding,\nor if the encoding is `None` the raw bytes are returned.\n\nExample:\n\n```robotframework\nUse encryption key    ${key}\n${text}=    Decrypt string    ${token}\nLog    Secret string is: ${text}\n```\n", "tags": [], "source": null, "shortdoc": "Decrypt a string.", "lineno": 300}, {"name": "Encrypt File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "output", "kind": "POSITIONAL_OR_NAMED", "repr": "output: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "encryption_type", "kind": "POSITIONAL_OR_NAMED", "repr": "encryption_type: str | EncryptionType | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Encrypt a file.\n\nparam path\n\n:   Path to source input file\n\nparam output\n\n:   Path to encrypted output file\n\nreturn\n\n:   Path to the encrypted file\n\nIf no output path is given, it will generate one from the input path.\nThe resulting output path is returned.\n\nExample:\n\n```robotframework\nUse encryption key    ${key}\n${path}=    Encrypt file    orders.xlsx\nLog    Path to encrypted file is: ${path}\n```\n", "tags": [], "source": null, "shortdoc": "Encrypt a file.", "lineno": 355}, {"name": "Encrypt String", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: bytes | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding: str = utf-8", "required": true, "defaultValue": "utf-8", "types": ["str"], "typedocs": []}, {"name": "encryption_type", "kind": "POSITIONAL_OR_NAMED", "repr": "encryption_type: str | EncryptionType | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Encrypt a string.\n\nparam text\n\n:   Source text to encrypt\n\nparam encoding\n\n:   Used text encoding\n\nreturn\n\n:   Token of the encrypted string in bytes\n\nExample:\n\n```robotframework\nUse encryption key    ${key}\n${token}=    Encrypt string    This is a secret, don't share it\n```\n", "tags": [], "source": null, "shortdoc": "Encrypt a string.", "lineno": 266}, {"name": "Generate Key", "args": [{"name": "encryption_type", "kind": "POSITIONAL_OR_NAMED", "repr": "encryption_type: str | EncryptionType | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Generate a Fernet encryption key as base64 string.\n\nreturn\n\n:   Generated key as a string\n\nThis key can be used for encryption/decryption operations\nwith this library.\n\n*NOTE:* Store the generated key in a secure place!\nIf the key is lost, the encrypted data can not be recovered.\nIf anyone else gains access to it, they can decrypt your data.\n", "tags": [], "source": null, "shortdoc": "Generate a Fernet encryption key as base64 string.", "lineno": 129}, {"name": "Hash File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "method", "kind": "POSITIONAL_OR_NAMED", "repr": "method: Hash = SHA1", "required": true, "defaultValue": "SHA1", "types": ["Hash"], "typedocs": []}], "doc": "Calculate a hash from a file, in base64 format.\n\nparam path\n\n:   Path to file\n\nparam method\n\n:   The used hashing method\n\nreturn\n\n:   Hash digest of the file\n\nExample:\n\n```robotframework\n${digest}=    Hash file    orders.xlsx    method=MD5\nShould not be equal    ${digest}    uSlyRHlbu8NzY29YMZhDUpdErP4=\n```\n", "tags": [], "source": null, "shortdoc": "Calculate a hash from a file, in base64 format.", "lineno": 241}, {"name": "Hash String", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "method", "kind": "POSITIONAL_OR_NAMED", "repr": "method: Hash = SHA1", "required": true, "defaultValue": "SHA1", "types": ["Hash"], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding=utf-8", "required": true, "defaultValue": "utf-8", "types": [], "typedocs": []}], "doc": "Calculate a hash from a string, in base64 format.\n\nparam text\n\n:   String to hash\n\nparam method\n\n:   Used hashing method\n\nparam encoding\n\n:   Used text encoding\n\nreturn\n\n:   Hash digest of the string\n\nExample:\n\n```robotframework\n${digest}=    Hash string    A value that will be hashed\nShould be equal    ${digest}    uSlyRHlbu8NzY29YMZhDUpdErP4=\n```\n", "tags": [], "source": null, "shortdoc": "Calculate a hash from a string, in base64 format.", "lineno": 217}, {"name": "Use Encryption Key", "args": [{"name": "key", "kind": "POSITIONAL_OR_NAMED", "repr": "key: bytes | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "encryption_type", "kind": "POSITIONAL_OR_NAMED", "repr": "encryption_type: str | EncryptionType | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Set key for all following encryption/decryption operations.\n\nparam key\n\n:   Encryption key as base64 string\n\nAssumes the given key has been generated previously using\neither the keyword `Generate Key` or with the matching command\nline utility.\n\nExample:\n\n```robotframework\n${key}=    Read file    encryption.key\nUse encryption key      ${key}\n```\n", "tags": [], "source": null, "shortdoc": "Set key for all following encryption/decryption operations.", "lineno": 151}, {"name": "Use Encryption Key From Vault", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "key", "kind": "POSITIONAL_OR_NAMED", "repr": "key: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "encryption_type", "kind": "POSITIONAL_OR_NAMED", "repr": "encryption_type: str | EncryptionType | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Load an encryption key from Robocorp Vault.\n\nparam name\n\n:   Name of secret in Vault\n\nparam key\n\n:   Name of encryption key in secret\n\nIf the secret only has one value, the key argument is optional.\n\nExample:\n\n```robotframework\n# Secret with one value\nUse encryption key from vault    Encryption\n# Secret with multiple values\nUse encryption key from vault    name=Encryption    key=CryptoKey\n```\n", "tags": [], "source": null, "shortdoc": "Load an encryption key from Robocorp Vault.", "lineno": 180}], "dataTypes": {}, "typedocs": []}
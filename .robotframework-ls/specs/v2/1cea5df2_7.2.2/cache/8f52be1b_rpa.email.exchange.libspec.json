mtime:1744200494.679893
{"name": "RPA.Email.Exchange", "doc": "Exchange is a library for sending, reading, and deleting emails.\nExchange is interfacing with Exchange Web Services (EWS).\n\nFor more information about server settings, see\n[this Microsoft support article](https://support.microsoft.com/en-us/office/server-settings-you-ll-need-from-your-email-provider-c82de912-adcc-4787-8283-45a1161f3cc3).\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary     RPA.Email.Exchange\n...     vault_name=email_oauth_microsoft    vault_token_key=token\n...     tenant=ztzvn.onmicrosoft.com  # your custom tenant here\nTask Setup      Ensure Auth\n\n*** Variables ***\n${ACCOUNT}              ACCOUNT_NAME\n${RECIPIENT_ADDRESS}    RECIPIENT\n${IMAGES}               myimage.png\n${ATTACHMENTS}          C:${/}files${/}mydocument.pdf\n\n*** Keywords ***\nEnsure Auth\n    ${secrets} =    Get Secret    email_oauth_microsoft\n    RPA.Email.Exchange.Authorize    ${ACCOUNT}\n    ...    is_oauth=${True}  # use the OAuth2 auth code flow (required)\n    ...    client_id=${secrets}[client_id]  # app ID\n    ...    client_secret=${secrets}[client_secret]  # app password\n    ...    token=${secrets}[token]  # token dict (access, refresh, scope etc.)\n\n*** Tasks ***\nTask of sending email\n    Send Message  recipients=${RECIPIENT_ADDRESS}\n    ...           subject=Exchange Message from RPA Robot\n    ...           body=<p>Exchange RPA Robot message body<br><img src='myimage.png'/></p>\n    ...           save=${TRUE}\n    ...           html=${TRUE}\n    ...           images=${IMAGES}\n    ...           cc=EMAIL_ADDRESS\n    ...           bcc=EMAIL_ADDRESS\n    ...           attachments=${ATTACHMENTS}\n\nTask of listing messages\n    # Attachments are saved specifically with a keyword Save Attachments\n    ${messages}=    List Messages\n    FOR    ${msg}    IN    @{messages}\n        Log Many    ${msg}\n        ${attachments}=    Run Keyword If    \"${msg}[subject]\"==\"about my orders\"\n        ...    Save Attachments\n        ...    ${msg}\n        ...    save_dir=${CURDIR}${/}savedir\n    END\n    # Using save_dir all attachments in listed messages are saved\n    ${messages}=    List Messages\n    ...    INBOX/Problems/sub1\n    ...    criterion=subject:'about my orders'\n    ...    save_dir=${CURDIR}${/}savedir2\n    FOR    ${msg}    IN    @{messages}\n        Log Many    ${msg}\n    END\n\nTask of moving messages\n    Move Messages    criterion=subject:'about my orders'\n    ...    source=INBOX/Processed Purchase Invoices/sub2\n    ...    target=INBOX/Problems/sub1\n```\n\n**Python**\n\n```python\nfrom RPA.Email.Exchange import Exchange\nfrom RPA.Robocorp.Vault import Vault\n\nvault_name = \"email_oauth_microsoft\"\nsecrets = Vault().get_secret(vault_name)\nex_account = \"ACCOUNT_NAME\"\n\nmail = Exchange(\n    vault_name=vault_name,\n    vault_token_key=\"token\",\n    tenant=\"ztzvn.onmicrosoft.com\"\n)\nmail.authorize(\n    username=ex_account,\n    is_oauth=True,\n    client_id=secrets[\"client_id\"],\n    client_secret=secrets[\"client_secret\"],\n    token=secrets[\"token\"]\n)\nmail.send_message(\n    recipients=\"RECIPIENT\",\n    subject=\"Message from RPA Python\",\n    body=\"RPA Python message body\",\n)\n```\n\n**OAuth2**\n\nThe OAuth2 flow is the only way of authorizing at the moment as Microsoft disabled\nentirely the usage of passwords, even App Passwords. And since you have to work\nwith tokens now and because this library has the capability to automatically\nrefresh an expired token, please don't forget to initialize the library with the\nfollowing parameters: vault\\_name, vault\\_token\\_key and tenant.\n\nLearn more on how to use the OAuth2 flow in this Portal robot\n[example-oauth-email](https://github.com/robocorp/example-oauth-email).\n\n**About criterion parameter**\n\nFollowing table shows possible criterion keys that can be used to filter emails.\nThere apply to all keywords which have `criterion` parameter.\n\n\n\n\n\nKey\n\nEffective search\n\nsubject\n\nsubject to match\n\nsubject\\_contains\n\nsubject to contain\n\nbody\n\nbody to match\n\nbody\\_contains\n\nbody to contain\n\nsender\n\nsender (from) to match\n\nsender\\_contains\n\nsender (from) to contain\n\nbefore\n\nreceived time before this time\n\nafter\n\nreceived time after this time\n\nbetween\n\nreceived time between start and end\n\ncategory\n\ncategories to match\n\ncategory\\_contains\n\ncategories to contain\n\nimportance\n\nimportance to matchKeys before, after and between at the moment support two\ndifferent timeformats either %d-%m-%Y %H:%M or %d-%m-%Y. These\nkeys also support special string NOW which can be used especially\ntogether with keyword `Wait for message  criterion=after:NOW`.\n\nWhen giving time which includes hours and minutes then the whole\ntime string needs to be enclosed into single quotes.\n\n```bash\nbefore:25-02-2022\nafter:NOW\nbetween:'31-12-2021 23:50 and 01-01-2022 00:10'\n```\n\nDifferent criterion keys can be combined.\n\n```bash\nsubject_contains:'new year' between:'31-12-2021 23:50 and 01-01-2022 00:10'\n```\n\nPlease **note** that all values in the criterion that contain spaces need\nto be enclosed within single quotes.\n\nIn the following example the email subject is going to matched\nonly against new not new year.\n\n```bash\nsubject_contains:new year\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Email\\Exchange.py", "lineno": 121, "tags": [], "inits": [{"name": "__init__", "args": [{"name": "vault_name", "kind": "POSITIONAL_OR_NAMED", "repr": "vault_name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "vault_token_key", "kind": "POSITIONAL_OR_NAMED", "repr": "vault_token_key: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "tenant", "kind": "POSITIONAL_OR_NAMED", "repr": "tenant: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Initialize self.  See help(type(self)) for accurate signature.\n", "tags": [], "source": null, "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.", "lineno": 290}], "keywords": [{"name": "Authorize", "args": [{"name": "username", "kind": "POSITIONAL_OR_NAMED", "repr": "username: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "password", "kind": "POSITIONAL_OR_NAMED", "repr": "password: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "autodiscover", "kind": "POSITIONAL_OR_NAMED", "repr": "autodiscover: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "access_type", "kind": "POSITIONAL_OR_NAMED", "repr": "access_type: AccessType | str = DELEGATE", "required": true, "defaultValue": "DELEGATE", "types": ["Union"], "typedocs": []}, {"name": "server", "kind": "POSITIONAL_OR_NAMED", "repr": "server: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "primary_smtp_address", "kind": "POSITIONAL_OR_NAMED", "repr": "primary_smtp_address: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "is_oauth", "kind": "POSITIONAL_OR_NAMED", "repr": "is_oauth: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "client_id", "kind": "POSITIONAL_OR_NAMED", "repr": "client_id: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "client_secret", "kind": "POSITIONAL_OR_NAMED", "repr": "client_secret: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "token", "kind": "POSITIONAL_OR_NAMED", "repr": "token: dict | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Connect to Exchange account\n\nparam username\n\n:   account username\n\nparam password\n\n:   account password (can be skipped with OAuth2)\n\nparam autodiscover\n\n:   use autodiscover or set it off (on by default)\n\nparam access_type\n\n:   default \"DELEGATE\", other option \"IMPERSONATION\"\n\nparam server\n\n:   required for configuration setting (with autodiscover off)\n\nparam primary_smtp_address\n\n:   by default set to username, but can be\n    set to be different from username\n\nparam is_oauth\n\n:   use the OAuth2 authorization code flow (instead of basic auth)\n\nparam client_id\n\n:   registered application ID\n\nparam client_secret\n\n:   registered application secret (password)\n\nparam token\n\n:   contains access and refresh tokens, type, scope, expiry etc.\n", "tags": [], "source": null, "shortdoc": "Connect to Exchange account", "lineno": 334}, {"name": "Create Folder", "args": [{"name": "folder_name", "kind": "POSITIONAL_OR_NAMED", "repr": "folder_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "parent_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "parent_folder: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Create email folder.\n\nparam folder_name\n\n:   name for the new folder (required)\n\nparam parent_folder\n\n:   name for the parent folder, by default INBOX\n", "tags": [], "source": null, "shortdoc": "Create email folder.", "lineno": 655}, {"name": "Delete Folder", "args": [{"name": "folder_name", "kind": "POSITIONAL_OR_NAMED", "repr": "folder_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "parent_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "parent_folder: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Delete email folder.\n\nparam folder_name\n\n:   current folder name (required)\n\nparam parent_folder\n\n:   name for the parent folder, by default INBOX\n", "tags": [], "source": null, "shortdoc": "Delete email folder.", "lineno": 667}, {"name": "Delete Message", "args": [{"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: Dict", "required": true, "defaultValue": null, "types": ["Dict"], "typedocs": []}], "doc": "Delete message.\n\nparam message\n\n:   dictionary containing message details\n", "tags": [], "source": null, "shortdoc": "Delete message.", "lineno": 1142}, {"name": "Empty Folder", "args": [{"name": "folder_name", "kind": "POSITIONAL_OR_NAMED", "repr": "folder_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "parent_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "parent_folder: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "delete_sub_folders", "kind": "POSITIONAL_OR_NAMED", "repr": "delete_sub_folders: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}], "doc": "Empty email folder of all items\n\nparam folder_name\n\n:   current folder name (required)\n\nparam parent_folder\n\n:   name for the parent folder, by default INBOX\n\nparam delete_sub_folders\n\n:   delete sub folders or not, by default False\n\nreturn\n\n:   True if operation was successful, False if not\n", "tags": [], "source": null, "shortdoc": "Empty email folder of all items", "lineno": 699}, {"name": "Forward Message", "args": [{"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: Dict", "required": true, "defaultValue": null, "types": ["Dict"], "typedocs": []}, {"name": "recipients", "kind": "POSITIONAL_OR_NAMED", "repr": "recipients: str | List", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Forward message.\n\nparam message\n\n:   dictionary containing message details\n\nparam recipients\n\n:   email address or list of email addresses\n", "tags": [], "source": null, "shortdoc": "Forward message.", "lineno": 1131}, {"name": "Generate Oauth Url", "args": [{"name": "client_id", "kind": "POSITIONAL_OR_NAMED", "repr": "client_id: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Generates an authorization URL which must be opened by the user to start the\nOAuth2 flow and obtain an authorization code as response.\n\nparam client_id\n\n:   Client app ID. (generated by the provider)\n\nreturns\n\n:   Authorization URL string not containing any sensitive info in it.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nStart OAuth Flow\n    ${auth_url} =    Generate OAuth URL\n    ...     client_id=810482312368-19htmcgcj*******googleusercontent.com\n    Log     Start OAuth2 flow: ${auth_url}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Email\\common.py", "shortdoc": "Generates an authorization URL which must be opened by the user to start the OAuth2 flow and obtain an authorization code as response.", "lineno": 73}, {"name": "Get Oauth Token", "args": [{"name": "client_secret", "kind": "POSITIONAL_OR_NAMED", "repr": "client_secret: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "response_url", "kind": "POSITIONAL_OR_NAMED", "repr": "response_url: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Exchanges the code obtained previously with `Generate OAuth URL` for a\ntoken.\n\nparam client_secret\n\n:   Client app secret. (generated by the provider)\n\nparam response_url\n\n:   The final URL containing the authorization code found in\n    the address bar after authenticating and authorizing the Client app\n    through the authorization URL.\n\nreturns\n\n:   A dictionary containing the access & refresh token, plus metadata.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nFinish OAuth Flow\n    ${token} =      Get OAuth Token\n    ...     client_secret=GOCSPX-******mqZAW89\n    ...     response_url=${resp_url}  # redirect of `Generate OAuth URL`\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Email\\common.py", "shortdoc": "Exchanges the code obtained previously with `Generate OAuth URL` for a token.", "lineno": 113}, {"name": "List Messages", "args": [{"name": "folder_name", "kind": "POSITIONAL_OR_NAMED", "repr": "folder_name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "contains", "kind": "POSITIONAL_OR_NAMED", "repr": "contains: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "count", "kind": "POSITIONAL_OR_NAMED", "repr": "count: int | None = 100", "required": true, "defaultValue": "100", "types": ["Union"], "typedocs": []}, {"name": "save_dir", "kind": "POSITIONAL_OR_NAMED", "repr": "save_dir: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "items_only", "kind": "POSITIONAL_OR_NAMED", "repr": "items_only: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}], "doc": "List messages in the account inbox. Order by descending\nreceived time.\n\nparam folder_name\n\n:   name of the email folder, default INBOX\n\nparam criterion\n\n:   list messages matching criterion\n\nparam contains\n\n:   if matching should be done using contains matching\n    and not equals matching, default False is means equals matching\n\nparam count\n\n:   number of messages to list\n\nparam save_dir\n\n:   set to path where attachments should be saved,\n    default None (attachments are not saved)\n\nparam items_only\n\n:   return only list of Message objects (instead of dictionaries)\n", "tags": [], "source": null, "shortdoc": "List messages in the account inbox. Order by descending received time.", "lineno": 407}, {"name": "List Unread Messages", "args": [{"name": "folder_name", "kind": "POSITIONAL_OR_NAMED", "repr": "folder_name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "contains", "kind": "POSITIONAL_OR_NAMED", "repr": "contains: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "count", "kind": "POSITIONAL_OR_NAMED", "repr": "count: int | None = 100", "required": true, "defaultValue": "100", "types": ["Union"], "typedocs": []}, {"name": "save_dir", "kind": "POSITIONAL_OR_NAMED", "repr": "save_dir: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "List unread messages in the account inbox. Order by descending\nreceived time.\n\nparam folder_name\n\n:   name of the email folder, default INBOX\n\nparam criterion\n\n:   list messages matching criterion\n\nparam contains\n\n:   if matching should be done using contains matching\n    and not equals matching, default False is means equals matching\n\nparam count\n\n:   number of messages to list\n\nparam save_dir\n\n:   set to path where attachments should be saved,\n    default None (attachments are not saved)\n", "tags": [], "source": null, "shortdoc": "List unread messages in the account inbox. Order by descending received time.", "lineno": 446}, {"name": "Move Message", "args": [{"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg: dict | None", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "target", "kind": "POSITIONAL_OR_NAMED", "repr": "target: str | None", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Move a message into target folder\n\nparam msg\n\n:   dictionary of the message\n\nparam target\n\n:   path to target folder\n\nraises AttributeError\n\n:   if msg is not a dictionary containing\n    id and changekey attributes\n\nExample:\n\n```robotframework\n${messages}=    List Messages\n...    INBOX\n...    criterion=subject:about my orders\nFOR    ${msg}    IN    @{messages}\n    Run Keyword If    \"${msg}[sender][email_address]\"==\"${priority_account}\"\n    ...    Move Message    ${msg}    target=INBOX / Problems / priority\nEND\n```\n", "tags": [], "source": null, "shortdoc": "Move a message into target folder", "lineno": 754}, {"name": "Move Messages", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str | None = ", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "source", "kind": "POSITIONAL_OR_NAMED", "repr": "source: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "target", "kind": "POSITIONAL_OR_NAMED", "repr": "target: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "contains", "kind": "POSITIONAL_OR_NAMED", "repr": "contains: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}], "doc": "Move message(s) from source folder to target folder\n\nparam criterion\n\n:   move messages matching this criterion\n\nparam source\n\n:   source folder\n\nparam target\n\n:   target folder\n\nparam contains\n\n:   if matching should be done using contains matching\n    and not equals matching, default False is means equals matching\n\nreturn\n\n:   boolean result of operation, True if 1+ items were moved else False\n\nCriterion examples:\n\n* subject:my message subject\n\n* body:something in body\n\n* sender:sender@domain.com\n", "tags": [], "source": null, "shortdoc": "Move message(s) from source folder to target folder", "lineno": 719}, {"name": "Refresh Oauth Token", "args": [{"name": "client_id", "kind": "POSITIONAL_OR_NAMED", "repr": "client_id: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "client_secret", "kind": "POSITIONAL_OR_NAMED", "repr": "client_secret: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "token", "kind": "POSITIONAL_OR_NAMED", "repr": "token: dict", "required": true, "defaultValue": null, "types": ["dict"], "typedocs": []}], "doc": "Refreshes the token as the access one usually expires after 1h and the\nrefresh one never expires. (as long as it doesn't get revoked)\n\nparam client_id\n\n:   Client app ID. (generated by the provider)\n\nparam client_secret\n\n:   Client app secret. (generated by the provider)\n\nparam token\n\n:   Full token dictionary previously obtained with\n    `Get OAuth Token`.\n\nreturns\n\n:   A token dictionary containing a new access token and updated\n    metadata.\n\n**Example: Robot Framework**\n\n```robotframework\n*** Tasks ***\nRefresh OAuth Flow\n    ${token} =      Refresh OAuth Token\n    ...     client_id=810482312368-19htmcgcj*******googleusercontent.com\n    ...     client_secret=GOCSPX-******mqZAW89\n    ...     token=${token}  # from `Get OAuth Token`\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Email\\common.py", "shortdoc": "Refreshes the token as the access one usually expires after 1h and the refresh one never expires. (as long as it doesn't get revoked)", "lineno": 142}, {"name": "Rename Folder", "args": [{"name": "oldname", "kind": "POSITIONAL_OR_NAMED", "repr": "oldname: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "newname", "kind": "POSITIONAL_OR_NAMED", "repr": "newname: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "parent_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "parent_folder: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Rename email folder\n\nparam oldname\n\n:   current folder name\n\nparam newname\n\n:   new name for the folder\n\nparam parent_folder\n\n:   name for the parent folder, by default INBOX\n\nreturn\n\n:   True if operation was successful, False if not\n", "tags": [], "source": null, "shortdoc": "Rename email folder", "lineno": 677}, {"name": "Save Attachments", "args": [{"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: dict | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "save_dir", "kind": "POSITIONAL_OR_NAMED", "repr": "save_dir: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "attachments_from_emls", "kind": "POSITIONAL_OR_NAMED", "repr": "attachments_from_emls: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "overwrite", "kind": "POSITIONAL_OR_NAMED", "repr": "overwrite: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Save attachments from message into given directory.\n\nparam message\n\n:   dictionary or .eml file path containing message details\n\nparam save_dir\n\n:   file path where attachments will be saved\n\nparam attachments_from_emls\n\n:   pass True if the attachment is an EML file (for\n    saving attachments from that EML file instead), False otherwise (default)\n\nparam overwrite\n\n:   overwrite existing downloaded attachments with the same name\n    if set to True, False otherwise (default)\n\nreturn\n\n:   list of saved attachments\n\nExample:\n\n```robotframework\n${messages} =    List Messages\nFOR    ${msg}    IN    @{messages}\n    Save Attachments    ${msg}    %{ROBOT_ARTIFACTS}\n    ...    attachments_from_emls=${True}\nEND\n\n${attachments} =    Save Attachments    ${CURDIR}${/}saved.eml\n...    %{ROBOT_ARTIFACTS}    overwrite=${True}\n```\n", "tags": [], "source": null, "shortdoc": "Save attachments from message into given directory.", "lineno": 1037}, {"name": "Save Message", "args": [{"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: dict", "required": true, "defaultValue": null, "types": ["dict"], "typedocs": []}, {"name": "filename", "kind": "POSITIONAL_OR_NAMED", "repr": "filename: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Save email as .eml file.\n\nparam message\n\n:   dictionary containing message details\n\nparam filename\n\n:   name of the file to save message into\n", "tags": [], "source": null, "shortdoc": "Save email as .eml file.", "lineno": 1119}, {"name": "Send Message", "args": [{"name": "recipients", "kind": "POSITIONAL_OR_NAMED", "repr": "recipients: List[str] | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "subject", "kind": "POSITIONAL_OR_NAMED", "repr": "subject: str | None = ", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "body", "kind": "POSITIONAL_OR_NAMED", "repr": "body: str | None = ", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "attachments", "kind": "POSITIONAL_OR_NAMED", "repr": "attachments: List[str] | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "html", "kind": "POSITIONAL_OR_NAMED", "repr": "html: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "images", "kind": "POSITIONAL_OR_NAMED", "repr": "images: List[str] | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "cc", "kind": "POSITIONAL_OR_NAMED", "repr": "cc: List[str] | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "bcc", "kind": "POSITIONAL_OR_NAMED", "repr": "bcc: List[str] | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "save", "kind": "POSITIONAL_OR_NAMED", "repr": "save: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "reply_to", "kind": "POSITIONAL_OR_NAMED", "repr": "reply_to: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Keyword for sending message through connected Exchange account.\n\nparam recipients\n\n:   list of email addresses\n\nparam subject\n\n:   message subject, defaults to \"\"\n\nparam body\n\n:   message body, defaults to \"\"\n\nparam attachments\n\n:   list of filepaths to attach, defaults to None\n\nparam html\n\n:   if message content is in HTML, default False\n\nparam images\n\n:   list of filepaths for inline use, defaults to None\n\nparam cc\n\n:   list of email addresses\n\nparam bcc\n\n:   list of email addresses\n\nparam save\n\n:   is sent message saved to Sent messages folder or not,\n    defaults to False\n\nparam reply_to\n\n:   email address to reply to\n\nEmail addresses can be prefixed with `ex:` to indicate an Exchange\naccount address.\n\nAt least one target needs to exist for recipients, cc or bcc.\n", "tags": [], "source": null, "shortdoc": "Keyword for sending message through connected Exchange account.", "lineno": 484}, {"name": "Send Reply Message", "args": [{"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: Message | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "body", "kind": "POSITIONAL_OR_NAMED", "repr": "body: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "subject", "kind": "POSITIONAL_OR_NAMED", "repr": "subject: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "reply_all", "kind": "POSITIONAL_OR_NAMED", "repr": "reply_all: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Send reply to a message.\n\nparam message\n\n:   either Message object or ID of the message\n    for the message which this is replying to\n\nparam body\n\n:   message body for the reply\n\nparam subject\n\n:   optional subject for the reply, defaults to None\n\nparam reply_all\n\n:   if True then reply is sent to all recipients,\n    defaults to False\n\n**Robot Framework example**\n\n```robotframework\n${messages}=    List Messages    criterion=subject:'I have new query'\nFOR    ${m}    IN    @{messages}\n    # Verifying that this is email that I want to reply to\n    ${now}=    RPA.Calendar.Time Now   UTC  return_format=YYYY-MM-DD HH:mm\n    ${received}=    Evaluate    str($m[\"datetime_received\"])\n    ${diff}=   RPA.Calendar.Time Difference In Minutes   ${received}  ${now}\n    # message was received less than 5 minutes\n    # and it came from the expected address\n    IF    $diff < 5 and \"${m}[sender]\" == \"mika@robocorp.com\"\n        Send Reply Message\n        ...  ${m}[id]\n        ...  body=I totally agree\n    END\nEND\n```\n", "tags": [], "source": null, "shortdoc": "Send reply to a message.", "lineno": 554}, {"name": "Wait For Message", "args": [{"name": "criterion", "kind": "POSITIONAL_OR_NAMED", "repr": "criterion: str | None = ", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float | None = 5.0", "required": true, "defaultValue": "5.0", "types": ["Union"], "typedocs": []}, {"name": "interval", "kind": "POSITIONAL_OR_NAMED", "repr": "interval: float | None = 1.0", "required": true, "defaultValue": "1.0", "types": ["Union"], "typedocs": []}, {"name": "contains", "kind": "POSITIONAL_OR_NAMED", "repr": "contains: bool | None = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "save_dir", "kind": "POSITIONAL_OR_NAMED", "repr": "save_dir: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Wait for email matching criterion to arrive into INBOX.\n\nparam criterion\n\n:   wait for message matching criterion\n\nparam timeout\n\n:   total time in seconds to wait for email, defaults to 5.0\n\nparam interval\n\n:   time in seconds for new check, defaults to 1.0 (minimum)\n\nparam contains\n\n:   if matching should be done using contains matching\n    and not equals matching, default False is means equals matching\n    THIS PARAMETER IS DEPRECATED AS OF rpaframework 12.9.0\n\nparam save_dir\n\n:   set to path where attachments should be saved,\n    default None (attachments are not saved)\n\nreturn\n\n:   list of messages\n", "tags": [], "source": null, "shortdoc": "Wait for email matching criterion to arrive into INBOX.", "lineno": 905}], "dataTypes": {}, "typedocs": []}
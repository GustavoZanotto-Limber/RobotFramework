mtime:1744200436.6618004
{"name": "RPA.Tables", "doc": "Tables is a library for manipulating tabular data inside Robot Framework.\n\nIt can import data from various sources and apply different operations to it.\nCommon use-cases are reading and writing CSV files, inspecting files in\ndirectories, or running tasks using existing Excel data.\n\n**Import types**\n\nThe data a table can be created from can be of two main types:\n\n1. An iterable of individual rows, like a list of lists, or list of dictionaries\n\n1. A dictionary of columns, where each dictionary value is a list of values\n\nFor instance, these two input values:\n\n```python\ndata1 = [\n    {\"name\": \"Mark\", \"age\": 58},\n    {\"name\": \"John\", \"age\": 22},\n    {\"name\": \"Adam\", \"age\": 67},\n]\n\ndata2 = {\n    \"name\": [\"Mark\", \"John\", \"Adam\"],\n    \"age\":  [    58,     22,     67],\n}\n```\n\nWould both result in the following table:\n\n\n\n\n\n\n\nIndex\n\nName\n\nAge\n\n0\n\nMark\n\n58\n\n1\n\nJohn\n\n22\n\n2\n\nAdam\n\n67**Indexing columns and rows**\n\nColumns can be referred to in two ways: either with a unique string\nname or their position as an integer. Columns can be named either when\nthe table is created, or they can be (re)named dynamically with keywords.\nThe integer position can always be used, and it starts from zero.\n\nFor instance, a table with columns \"Name\", \"Age\", and \"Address\" would\nallow referring to the \"Age\" column with either the name \"Age\" or the\nnumber 1.\n\nRows do not have a name, but instead only have an integer index. This\nindex also starts from zero. Keywords where rows are indexed also support\nnegative values, which start counting backwards from the end.\n\nFor instance, in a table with five rows, the first row could be referred\nto with the number 0. The last row could be accessed with either 4 or\n-1.\n\n**Examples**\n\n**Robot Framework**\n\nThe Tables library can load tabular data from various other libraries\nand manipulate it inside Robot Framework.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Tables\n\n*** Keywords ***\nFiles to Table\n    ${files}=    List files in directory    ${CURDIR}\n    ${files}=    Create table    ${files}\n    Filter table by column    ${files}    size  >=  ${1024}\n    FOR    ${file}    IN    @{files}\n        Log    ${file}[name]\n    END\n    Write table to CSV    ${files}    ${OUTPUT_DIR}${/}files.csv\n```\n\n**Python**\n\nThe library is also available directly through Python, where it\nis easier to handle multiple different tables or do more bespoke\nmanipulation operations.\n\n```python\nfrom RPA.Tables import Tables\n\nlibrary = Tables()\norders = library.read_table_from_csv(\n    \"orders.csv\", columns=[\"name\", \"mail\", \"product\"]\n)\n\ncustomers = library.group_table_by_column(rows, \"mail\")\nfor customer in customers:\n    for order in customer:\n        add_cart(order)\n    make_order()\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Tables.py", "lineno": 882, "tags": [], "inits": [], "keywords": [{"name": "Add Table Column", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "values", "kind": "POSITIONAL_OR_NAMED", "repr": "values: Any | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Append a column to a table.\n\nparam table\n\n:   Table to modify\n\nparam name\n\n:   Name of new column\n\nparam values\n\n:   Value(s) for new column\n\nThe `values` can either be a list of values, one for each row, or\none single value that is set for all rows.\n\nExamples:\n\n```robotframework\n# Add empty column\nAdd table column    ${table}\n\n# Add empty column with name\nAdd table column    ${table}    name=Home Address\n\n# Add new column where every every row has the same value\nAdd table column    ${table}    name=TOS    values=${FALSE}\n\n# Add new column where every row has a unique value\n${is_first}=    Create list    ${TRUE}    ${FALSE}    ${FALSE}\nAdd table column    ${table}    name=IsFirst    values=${is_first}\n```\n", "tags": [], "source": null, "shortdoc": "Append a column to a table.", "lineno": 1238}, {"name": "Add Table Row", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "values", "kind": "POSITIONAL_OR_NAMED", "repr": "values: Any | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Append rows to a table.\n\nparam table\n\n:   Table to modify\n\nparam values\n\n:   Value(s) for new row\n\nThe `values` can either be a list of values, or a dictionary\nwhere the keys match current column names. Values for unknown\nkeys are discarded.\n\nIt can also be a single value that is set for all columns,\nwhich is `None` by default.\n\nExamples:\n\n```robotframework\n# Add empty row\nAdd table row    ${table}\n\n# Add row where every column has the same value\nAdd table row    ${table}    Unknown\n\n# Add values per column\n${values}=    Create dictionary    Username=Mark    Mail=mark@robocorp.com\nAdd table row    ${table}    ${values}\n```\n", "tags": [], "source": null, "shortdoc": "Append rows to a table.", "lineno": 1270}, {"name": "Clear Table", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}], "doc": "Clear table in-place, but keep columns.\n\nparam table\n\n:   Table to clear\n\nExample:\n\n```robotframework\nClear table    ${table}\n```\n", "tags": [], "source": null, "shortdoc": "Clear table in-place, but keep columns.", "lineno": 1075}, {"name": "Copy Table", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}], "doc": "Make a copy of a table object.\n\nparam table\n\n:   Table to copy\n\nreturn\n\n:   Table object\n\n${table_copy}=    Copy table    ${table}\n", "tags": [], "source": null, "shortdoc": "Make a copy of a table object.", "lineno": 1064}, {"name": "Create Table", "args": [{"name": "data", "kind": "POSITIONAL_OR_NAMED", "repr": "data: Dict[int | str, Dict | List | Tuple | <function NamedTuple at 0x000001CD81483B80> | set] | List[Dict | List | Tuple | <function NamedTuple at 0x000001CD81483B80> | set] | Table | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "trim", "kind": "POSITIONAL_OR_NAMED", "repr": "trim: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "columns", "kind": "POSITIONAL_OR_NAMED", "repr": "columns: List[str] | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Create Table object from data.\n\nData can be a combination of various iterable containers, e.g.\nlist of lists, list of dicts, dict of lists.\n\nparam data\n\n:   Source data for table\n\nparam trim\n\n:   Remove all empty rows from the end of the worksheet,\n    default False\n\nparam columns\n\n:   Names of columns (optional)\n\nreturn\n\n:   Table object\n\nSee the main library documentation for more information about\nsupported data types.\n\nExample:\n\n```robotframework\n# Create a new table using a Dictionary of Lists\n# Because of the dictionary keys the column names will be automatically set\n@{Table_Data_name}=    Create List    Mark    John    Amy\n@{Table_Data_age}=    Create List    ${58}    ${22}    ${67}\n&{Table_Data}=    Create Dictionary\n...    name=${Table_Data_name}\n...    age=${Table_Data_age}\n${table}=    Create Table    ${Table_Data}\n```\n", "tags": [], "source": null, "shortdoc": "Create Table object from data.", "lineno": 997}, {"name": "Export Table", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "with_index", "kind": "POSITIONAL_OR_NAMED", "repr": "with_index: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "as_list", "kind": "POSITIONAL_OR_NAMED", "repr": "as_list: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Convert a table object into standard Python containers.\n\nparam table\n\n:   Table to convert to dict\n\nparam with_index\n\n:   Include index in values\n\nparam as_list\n\n:   Export data as list instead of dict\n\nreturn\n\n:   A List or Dictionary that represents the table\n\nExample:\n\n```robotframework\n${orders}=       Read worksheet as table    orders.xlsx\nSort table by column    ${orders}    CustomerId\n${export}=       Export table    ${orders}\n# The following keyword expects a dictionary:\nWrite as JSON    ${export}\n```\n", "tags": [], "source": null, "shortdoc": "Convert a table object into standard Python containers.", "lineno": 1038}, {"name": "Filter Empty Rows", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}], "doc": "Remove all rows from a table which have only `None` values.\n\nparam table\n\n:   Table to filter\n\nThe filtering will be done in-place.\n\nExample:\n\n```robotframework\nFilter empty rows    ${table}\n```\n", "tags": [], "source": null, "shortdoc": "Remove all rows from a table which have only `None` values.", "lineno": 1785}, {"name": "Filter Table By Column", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "operator", "kind": "POSITIONAL_OR_NAMED", "repr": "operator: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}], "doc": "Remove all rows where column values don't match the\ngiven condition.\n\nparam table\n\n:   Table to filter\n\nparam column\n\n:   Column to filter with\n\nparam operator\n\n:   Filtering operator, e.g. >, <, ==, contains\n\nparam value\n\n:   Value to compare column to (using operator)\n\nSee the keyword `Find table rows` for all supported operators\nand their descriptions.\n\nThe filtering will be done in-place.\n\nExamples:\n\n```robotframework\n# Only accept prices that are non-zero\nFilter table by column    ${table}   price  !=  ${0}\n\n# Remove uwnanted product types\n@{types}=    Create list    Unknown    Removed\nFilter table by column    ${table}   product_type  not in  ${types}\n```\n", "tags": [], "source": null, "shortdoc": "Remove all rows where column values don't match the given condition.", "lineno": 1692}, {"name": "Filter Table With Keyword", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Run a keyword for each row of a table, then remove all rows where the called\nkeyword returns a falsy value.\n\nCan be used to create custom RF keyword based filters.\n\nparam table\n\n:   Table to modify.\n\nparam name\n\n:   Keyword name used as filter.\n\nparam args\n\n:   Additional keyword arguments to be passed. (optional)\n\nThe row object will be given as the first argument to the filtering keyword.\n", "tags": [], "source": null, "shortdoc": "Run a keyword for each row of a table, then remove all rows where the called keyword returns a falsy value.", "lineno": 1729}, {"name": "Find Table Rows", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "operator", "kind": "POSITIONAL_OR_NAMED", "repr": "operator: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}], "doc": "Find all the rows in a table which match a condition for a given column.\n\nparam table\n\n:   Table to search into.\n\nparam column\n\n:   Name or position of the column to compare with.\n\nparam operator\n\n:   Comparison operator used with every cell value on the\n    specified column.\n\nparam value\n\n:   Value to compare against.\n\nreturn\n\n:   New Table object containing all the rows matching the condition.\n\nSupported operators:\n\n\n\n\n\nOperator\n\nDescription\n\n>\n\nCell value is larger than\n\n<\n\nCell value is smaller than\n\n>=\n\nCell value is larger or equal than\n\n<=\n\nCell value is smaller or equal than\n\n==\n\nCell value is equal to\n\n!=\n\nCell value is not equal to\n\nis\n\nCell value is the same object\n\nnot is\n\nCell value is not the same object\n\ncontains\n\nCell value contains given value\n\nnot contains\n\nCell value does not contain given value\n\nin\n\nCell value is in given value\n\nnot in\n\nCell value is not in given valueReturns the matches as a new Table instance.\n\nExamples:\n\n```robotframework\n# Find all rows where price is over 200\n@{rows} =    Find table rows    ${table}    Price  >  ${200}\n\n# Find all rows where the status does not contain \"removed\"\n@{rows} =    Find table rows    ${table}    Status  not contains  removed\n```\n", "tags": [], "source": null, "shortdoc": "Find all the rows in a table which match a condition for a given column.", "lineno": 1592}, {"name": "Get Table Cell", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Get a cell value from a table.\n\nparam table\n\n:   Table to read from\n\nparam row\n\n:   Row of cell\n\nparam column\n\n:   Column of cell\n\nreturn\n\n:   Cell value\n\nExamples:\n\n```robotframework\n# Get the value in the first row and first column\nGet table cell    ${table}    0    0\n\n# Get the value in the last row and first column\nGet table cell    ${table}   -1    0\n\n# Get the value in the last row and last column\nGet table cell    ${table}   -1    -1\n\n# Get the value in the third row and column \"Name\"\nGet table cell    ${table}    2    Name\n```\n", "tags": [], "source": null, "shortdoc": "Get a cell value from a table.", "lineno": 1538}, {"name": "Get Table Column", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Get all values for a single column in a table.\n\nparam table\n\n:   Table to read\n\nparam column\n\n:   Column to read\n\nreturn\n\n:   List of the rows in the selected column\n\nExample:\n\n```robotframework\n${emails}=    Get table column    ${users}    E-Mail Address\n```\n", "tags": [], "source": null, "shortdoc": "Get all values for a single column in a table.", "lineno": 1325}, {"name": "Get Table Dimensions", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}], "doc": "Return table dimensions, as (rows, columns).\n\nparam table\n\n:   Table to inspect\n\nreturn\n\n:   Two integer values that represent the number\n    of rows and columns\n\nExample:\n\n```robotframework\n${rows}  ${columns}=    Get table dimensions    ${table}\nLog    Table has ${rows} rows and ${columns} columns.\n```\n", "tags": [], "source": null, "shortdoc": "Return table dimensions, as (rows, columns).", "lineno": 1176}, {"name": "Get Table Row", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "as_list", "kind": "POSITIONAL_OR_NAMED", "repr": "as_list: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Get a single row from a table.\n\nparam table\n\n:   Table to read\n\nparam row\n\n:   Row to read\n\nparam as_list\n\n:   Return list instead of dictionary\n\nreturn\n\n:   Dictionary or List of table row\n\nExamples:\n\n```robotframework\n# returns the first row in the table\n${first}=    Get table row    ${orders}\n\n# returns the last row in the table\n${last}=      Get table row    ${orders}    -1    as_list=${TRUE}\n```\n", "tags": [], "source": null, "shortdoc": "Get a single row from a table.", "lineno": 1300}, {"name": "Get Table Slice", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "start", "kind": "POSITIONAL_OR_NAMED", "repr": "start: int | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "end", "kind": "POSITIONAL_OR_NAMED", "repr": "end: int | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Return a new Table from a range of given Table rows.\n\nparam table\n\n:   Table to read from\n\nparam start\n\n:   Start index (inclusive)\n\nparam start\n\n:   End index (exclusive)\n\nreturn\n\n:   Table object of the selected rows\n\nIf `start` is not defined, starts from the first row.\nIf `end` is not defined, stops at the last row.\n\nExamples:\n\n```robotframework\n# Get all rows except first five\n${slice}=    Get table slice    ${table}    start=5\n\n# Get rows at indexes 5, 6, 7, 8, and 9\n${slice}=    Get table slice    ${table}    start=5    end=10\n\n# Get all rows except last five\n${slice}=    Get table slice    ${table}    end=-5\n```\n", "tags": [], "source": null, "shortdoc": "Return a new Table from a range of given Table rows.", "lineno": 1453}, {"name": "Group Table By Column", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Group a table by `column` and return a list of grouped Tables.\n\nparam table\n\n:   Table to use for grouping\n\nparam column\n\n:   Column which is used as grouping criteria\n\nreturn\n\n:   List of Table objects\n\nExample:\n\n```robotframework\n# Groups rows of matching customers from the `customer` column\n# and returns the groups or rows as Tables\n@{groups}=    Group table by column    ${orders}    customer\n# An example of how to use the List of Tables once returned\nFOR    ${group}    IN    @{groups}\n    # Process all orders for the customer at once\n    Process order    ${group}\nEND\n```\n", "tags": [], "source": null, "shortdoc": "Group a table by `column` and return a list of grouped Tables.", "lineno": 1667}, {"name": "Map Column Values", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Run a keyword for each cell in a given column, and replace its content with\nthe return value.\n\nCan be used to easily convert column types or values in-place.\n\nparam table\n\n:   Table to modify.\n\nparam column\n\n:   Column to modify.\n\nparam name\n\n:   Mapping keyword name.\n\nparam args\n\n:   Additional keyword arguments. (optional)\n\nThe cell value will be given as the first argument to the mapping keyword.\n\nExamples:\n\n```robotframework\n# Convert all columns values to a different type\nMap column values    ${table}    Price    Convert to integer\n\n# Look up values with a custom keyword\nMap column values    ${table}    User     Map user ID to name\n```\n", "tags": [], "source": null, "shortdoc": "Run a keyword for each cell in a given column, and replace its content with the return value.", "lineno": 1752}, {"name": "Merge Tables", "args": [{"name": "@tables: Table", "kind": "VAR_POSITIONAL", "repr": "*tables: Table", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "index", "kind": "NAMED_ONLY", "repr": "index: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Create a union of two tables and their contents.\n\nparam tables\n\n:   Tables to merge\n\nparam index\n\n:   Column name to use as index for merge\n\nreturn\n\n:   Table object\n\nBy default rows from all tables are appended one after the other.\nOptionally a column name can be given with `index`, which is\nused to merge rows together.\n\nExample:\n\nFor instance, a `name` column could be used to identify\nunique rows and the merge operation should overwrite values\ninstead of appending multiple copies of the same name.\n\n\n\n\n\nName\n\nPrice\n\nEgg\n\n10.0\n\nCheese\n\n15.0\n\nHam\n\n20.0\n\n\n\nName\n\nStock\n\nEgg\n\n12.0\n\nCheese\n\n99.0\n\nHam\n\n0.0```robotframework\n${products}=    Merge tables    ${prices}    ${stock}    index=Name\nFOR    ${product}    IN    @{products}\n    Log many\n    ...    Product: ${product}[Name]\n    ...    Price: ${product}[Price]\n    ...    Stock: ${product}[Stock]\nEND\n```\n", "tags": [], "source": null, "shortdoc": "Create a union of two tables and their contents.", "lineno": 1089}, {"name": "Pop Table Column", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Remove column from table and return it.\n\nparam table\n\n:   Table to modify\n\nparam column\n\n:   Column to remove\n\nreturn\n\n:   Dictionary or List of the removed, popped, column\n\nExamples:\n\n```robotframework\n# Remove column from table and discard it\nPop table column    ${users}   userId\n\n# Remove column from table and iterate over it\n${ids}=    Pop table column    ${users}    userId\nFOR    ${id}    IN    @{ids}\n    Log    User id: ${id}\nEND\n```\n", "tags": [], "source": null, "shortdoc": "Remove column from table and return it.", "lineno": 1424}, {"name": "Pop Table Row", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "as_list", "kind": "POSITIONAL_OR_NAMED", "repr": "as_list: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Remove row from table and return it.\n\nparam table\n\n:   Table to modify\n\nparam row\n\n:   Row index, pops first row if none given\n\nparam as_list\n\n:   Return list instead of dictionary\n\nreturn\n\n:   Dictionary or List of the removed, popped, row\n\nExamples:\n\n```robotframework\n# Pop the firt row in the table and discard it\nPop table row    ${orders}\n\n# Pop the last row in the table and store it\n${row}=      Pop table row    ${data}    -1    as_list=${TRUE}\n```\n", "tags": [], "source": null, "shortdoc": "Remove row from table and return it.", "lineno": 1397}, {"name": "Read table from CSV", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "header", "kind": "POSITIONAL_OR_NAMED", "repr": "header: bool | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "columns", "kind": "POSITIONAL_OR_NAMED", "repr": "columns: List[str] | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "dialect", "kind": "POSITIONAL_OR_NAMED", "repr": "dialect: str | Dialect | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "delimiters", "kind": "POSITIONAL_OR_NAMED", "repr": "delimiters: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "column_unknown", "kind": "POSITIONAL_OR_NAMED", "repr": "column_unknown: str = Unknown", "required": true, "defaultValue": "Unknown", "types": ["str"], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Read a CSV file as a table.\n\nparam path\n\n:   Path to CSV file\n\nparam header\n\n:   CSV file includes header\n\nparam columns\n\n:   Names of columns in resulting table\n\nparam dialect\n\n:   Format of CSV file\n\nparam delimiters\n\n:   String of possible delimiters\n\nparam column_unknown\n\n:   Column name for unknown fields\n\nparam encoding\n\n:   Text encoding for input file,\n    uses system encoding by default\n\nreturn\n\n:   Table object\n\nBy default attempts to deduce the CSV format and headers\nfrom a sample of the input file. If it's unable to determine\nthe format automatically, the dialect and header will\nhave to be defined manually.\n\nBuiltin `dialect` values are `excel`, `excel-tab`, and `unix`,\nand `header` is boolean argument (`True`/`False`). Optionally a\nset of valid `delimiters` can be given as a string.\n\nThe `columns` argument can be used to override the names of columns\nin the resulting table. The amount of columns must match the input\ndata.\n\nIf the source data has a header and rows have more fields than\nthe header defines, the remaining values are put into the column\ngiven by `column_unknown`. By default it has the value \"Unknown\".\n\nExamples:\n\n```robotframework\n# Source dialect is deduced automatically\n${table}=    Read table from CSV    export.csv\nLog   Found columns: ${table.columns}\n\n# Source dialect is known and given explicitly\n${table}=    Read table from CSV    export-excel.csv    dialect=excel\nLog   Found columns: ${table.columns}\n```\n", "tags": [], "source": null, "shortdoc": "Read a CSV file as a table.", "lineno": 1856}, {"name": "Rename Table Columns", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "names", "kind": "POSITIONAL_OR_NAMED", "repr": "names: List[str | None]", "required": true, "defaultValue": null, "types": ["List"], "typedocs": []}, {"name": "strict", "kind": "POSITIONAL_OR_NAMED", "repr": "strict: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Renames columns in the Table with given values. Columns with\nname as `None` will use the previous value.\n\nparam table\n\n:   Table to modify\n\nparam names\n\n:   List of new column names\n\nparam strict\n\n:   If True, raises ValueError if column lengths\n    do not match\n\nThe renaming will be done in-place.\n\nExamples:\n\n```robotframework\n# Initially set the column names\n${columns}=    Create list   First  Second  Third\nRename table columns    ${table}    ${columns}\n# First, Second, Third\n\n# Update the first and second column names to Uno and Dos\n${columns}=    Create list   Uno  Dos\nRename table columns    ${table}    ${columns}\n# Uno, Dos, Third\n```\n", "tags": [], "source": null, "shortdoc": "Renames columns in the Table with given values. Columns with name as `None` will use the previous value.", "lineno": 1194}, {"name": "Set Row As Column Names", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Set existing row as names for columns.\n\nparam table\n\n:   Table to modify\n\nparam row\n\n:   Row to use as column names\n\nExample:\n\n```robotframework\n# Set the column names based on the first row\nSet row as column names    ${table}    0\n```\n", "tags": [], "source": null, "shortdoc": "Set existing row as names for columns.", "lineno": 1482}, {"name": "Set Table Cell", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}], "doc": "Set a cell value in a table.\n\nparam table\n\n:   Table to modify to\n\nparam row\n\n:   Row of cell\n\nparam column\n\n:   Column of cell\n\nparam value\n\n:   Value to set\n\nExamples:\n\n```robotframework\n# Set the value in the first row and first column to \"First\"\nSet table cell    ${table}    0    0       First\n\n# Set the value in the last row and first column to \"Last\"\nSet table cell    ${table}   -1    0       Last\n\n# Set the value in the last row and last column to \"Corner\"\nSet table cell    ${table}   -1    -1       Corner\n\n# Set the value in the third row and column \"Name\" to \"Unknown\"\nSet table cell    ${table}    2    Name    Unknown\n```\n", "tags": [], "source": null, "shortdoc": "Set a cell value in a table.", "lineno": 1565}, {"name": "Set Table Column", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "values", "kind": "POSITIONAL_OR_NAMED", "repr": "values: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}], "doc": "Assign values to a column in the table.\n\nparam table\n\n:   Table to modify\n\nparam column\n\n:   Column to modify\n\nparam values\n\n:   Value(s) to set\n\nThe `values` can either be a list of values, one for each row, or\none single value that is set for all rows.\n\nExamples:\n\n```robotframework\n# Set different value for each row (sizes must match)\n${ids}=    Create list    1  2  3  4  5\nSet table column    ${users}    userId    ${ids}\n\n# Set the same value for all rows\nSet table column    ${users}    email     ${NONE}\n```\n", "tags": [], "source": null, "shortdoc": "Assign values to a column in the table.", "lineno": 1373}, {"name": "Set Table Row", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "values", "kind": "POSITIONAL_OR_NAMED", "repr": "values: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}], "doc": "Assign values to a row in the table.\n\nparam table\n\n:   Table to modify\n\nparam row\n\n:   Row to modify\n\nparam values\n\n:   Value(s) to set\n\nThe `values` can either be a list of values, or a dictionary\nwhere the keys match current column names. Values for unknown\nkeys are discarded.\n\nIt can also be a single value that is set for all columns.\n\nExamples:\n\n```robotframework\n${columns}=  Create list     One  Two  Three\n${table}=    Create table    columns=${columns}\n\n${values}=   Create list     1  2  3\nSet table row    ${table}    0    ${values}\n\n${values}=   Create dictionary    One=1  Two=2  Three=3\nSet table row    ${table}    1    ${values}\n\nSet table row    ${table}    2    ${NONE}\n```\n", "tags": [], "source": null, "shortdoc": "Assign values to a row in the table.", "lineno": 1342}, {"name": "Sort Table By Column", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "ascending", "kind": "POSITIONAL_OR_NAMED", "repr": "ascending: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Sort a table in-place according to `column`.\n\nparam table\n\n:   Table to sort\n\nparam column\n\n:   Column to sort with\n\nparam ascending\n\n:   Table sort order\n\nExamples:\n\n```robotframework\n# Sorts the `order_date` column ascending\nSort table by column    ${orders}    order_date\n\n# Sorts the `order_date` column descending\nSort table by column    ${orders}    order_date    ascending=${FALSE}\n```\n", "tags": [], "source": null, "shortdoc": "Sort a table in-place according to `column`.", "lineno": 1645}, {"name": "Table Head", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "count", "kind": "POSITIONAL_OR_NAMED", "repr": "count: int = 5", "required": true, "defaultValue": "5", "types": ["int"], "typedocs": []}, {"name": "as_list", "kind": "POSITIONAL_OR_NAMED", "repr": "as_list: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Return first `count` rows from a table.\n\nparam table\n\n:   Table to read from\n\nparam count\n\n:   Number of lines to read\n\nparam as_list\n\n:   Return list instead of Table\n\nreturn\n\n:   Return Table object or List of the selected rows\n\nExample:\n\n```robotframework\n# Get the first 10 employees\n${first}=    Table head    ${employees}    10\n```\n", "tags": [], "source": null, "shortdoc": "Return first `count` rows from a table.", "lineno": 1498}, {"name": "Table Tail", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "count", "kind": "POSITIONAL_OR_NAMED", "repr": "count: int = 5", "required": true, "defaultValue": "5", "types": ["int"], "typedocs": []}, {"name": "as_list", "kind": "POSITIONAL_OR_NAMED", "repr": "as_list: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Return last `count` rows from a table.\n\nparam table\n\n:   Table to read from\n\nparam count\n\n:   Number of lines to read\n\nparam as_list\n\n:   Return list instead of Table\n\nreturn\n\n:   Return Table object or List of the selected rows\n\nExample:\n\n```robotframework\n# Get the last 10 orders\n${latest}=    Table tail    ${orders}    10\n```\n", "tags": [], "source": null, "shortdoc": "Return last `count` rows from a table.", "lineno": 1518}, {"name": "Trim Column Names", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}], "doc": "Remove all extraneous whitespace from column names.\n\nparam table\n\n:   Table to filter\n\nThe filtering will be done in-place.\n\nExample:\n\n```robotframework\n# This example will take colums such as:\n# \"One\", \"Two \", \"  Three \"\n# and trim them to become the below:\n# \"One\", \"Two\", \"Three\"\nTrim column names     ${table}\n```\n", "tags": [], "source": null, "shortdoc": "Remove all extraneous whitespace from column names.", "lineno": 1832}, {"name": "Trim Empty Rows", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}], "doc": "Remove all rows from the *end* of a table\nwhich have only `None` as values.\n\nparam table\n\n:   Table to filter\n\nThe filtering will be done in-place.\n\nExample:\n\n```robotframework\nTrim empty rows    ${table}\n```\n", "tags": [], "source": null, "shortdoc": "Remove all rows from the *end* of a table which have only `None` as values.", "lineno": 1807}, {"name": "Write table to CSV", "args": [{"name": "table", "kind": "POSITIONAL_OR_NAMED", "repr": "table: Table", "required": true, "defaultValue": null, "types": ["Table"], "typedocs": []}, {"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "header", "kind": "POSITIONAL_OR_NAMED", "repr": "header: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "dialect", "kind": "POSITIONAL_OR_NAMED", "repr": "dialect: str | Dialect = Excel", "required": true, "defaultValue": "Excel", "types": ["Union"], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "delimiter", "kind": "POSITIONAL_OR_NAMED", "repr": "delimiter: str | None = ,", "required": true, "defaultValue": ",", "types": ["Union"], "typedocs": []}], "doc": "Write a table as a CSV file.\n\nparam table\n\n:   Table to write\n\nparam path\n\n:   Path to write to\n\nparam header\n\n:   Write columns as header to CSV file\n\nparam dialect\n\n:   The format of output CSV\n\nparam encoding\n\n:   Text encoding for output file,\n    uses system encoding by default\n\nparam delimiter\n\n:   Delimiter character between columns\n\nBuiltin `dialect` values are `excel`, `excel-tab`, and `unix`.\n\nExample:\n\n```robotframework\n${sheet}=    Read worksheet as table    orders.xlsx    header=${TRUE}\nWrite table to CSV    ${sheet}    output.csv\n```\n", "tags": [], "source": null, "shortdoc": "Write a table as a CSV file.", "lineno": 1943}], "dataTypes": {}, "typedocs": []}
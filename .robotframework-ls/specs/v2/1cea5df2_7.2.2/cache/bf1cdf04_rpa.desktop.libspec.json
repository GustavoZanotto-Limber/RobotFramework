mtime:1744200510.9375353
{"name": "RPA.Desktop", "doc": "Desktop is a cross-platform library for navigating and interacting with\ndesktop environments. It can be used to automate applications through\nthe same interfaces that are available to human users.\n\nThe library includes the following features:\n\n* Mouse and keyboard input emulation\n\n* Starting and stopping applications\n\n* Finding elements through image template matching\n\n* Scraping text from given regions\n\n* Taking screenshots\n\n* Clipboard management\n\nWindows element selectors are not currently supported, and require the use of RPA.Desktop.Windows**Installation**\n\nThe basic features such as mouse and keyboard input and application\ncontrol work with a default `rpaframework` install.\n\nAdvanced computer-vision features such as image template matching and\nOCR require an additional library called `rpaframework-recognition`.\n\nThe dependency should be added separately by specifing it in your *conda.yaml*\nas `rpaframework-recognition==5.0.1` for example. If installing recognition\nthrough `pip` instead of `conda`, the OCR feature also requires `tesseract`.\n\n**Locating elements**\n\nTo automate actions on the desktop, a robot needs to interact with various\ngraphical elements such as buttons or input fields. The locations of these\nelements can be found using a feature called locators.\n\nA locator describes the properties or features of an element. This information\ncan be later used to locate similar elements even when window positions or\nstates change.\n\nThe currently supported locator types are:\n\n\n\n\n\n\n\nName\n\nArguments\n\nDescription\n\nalias\n\nname (str)\n\nA custom named locator from the locator database, the default.\n\nimage\n\npath (str)\n\nImage of an element that is matched to current screen content.\n\npoint\n\nx (int), y (int)\n\nPixel coordinates as absolute position.\n\noffset\n\nx (int), y (int)\n\nPixel coordinates relative to current mouse position.\n\nsize\n\nwidth (int), height (int)\n\nRegion of fixed size, around point or screen top-left\n\nregion\n\nleft (int), top (int), right (int), bottom (int)\n\nBounding coordinates for a rectangular region.\n\nocr\n\ntext (str), confidence (float, optional)\n\nText to find from the current screen.A locator is defined by its type and arguments, divided by a colon.\nSome example usages are shown below. Note that the prefix for `alias` can\nbe omitted as its the default type.\n\n```robotframework\nClick       point:50,100\nClick       region:20,20,100,30\n\nMove mouse  image:%{ROBOT_ROOT}/logo.png\nMove mouse  offset:200,0\nClick\n\nClick       alias:SpareBin.Login\nClick       SpareBin.Login\n\nClick       ocr:\"Create New Account\"\n```\n\nYou can also pass internal `region` objects as locators:\n\n```robotframework\n${region}=  Find Element  ocr:\"Customer name\"\nClick       ${region}\n```\n\n**Locator chaining**\n\nOften it is not enough to have one locator, but instead an element\nis defined through a relationship of various locators. For this use\ncase the library supports a special syntax, which we will call\nlocator chaining.\n\nAn example of chaining:\n\n```robotframework\n# Read text from area on the right side of logo\nRead text    image:logo.png + offset:600,0 + size:400,200\n```\n\nThe supported operators are:\n\n\n\n\n\nOperator\n\nDescription\n\nthen, +\n\nBase locator relative to the previous one\n\nand, &&, &\n\nBoth locators should be found\n\nor, ||, |\n\nEither of the locators should be found\n\nnot, !\n\nThe locator should not be foundFurther examples:\n\n```robotframework\n# Click below either label\nClick    (image:name.png or image:email.png) then offset:0,300\n\n# Wait until dialog disappears\nWait for element    not image:cookie.png\n```\n\n**Named locators**\n\nThe library supports storing locators in a database, which contains\nall of the required fields and various bits of metadata. This enables\nhaving one source of truth, which can be updated if a website's or applications's\nUI changes. Robot Framework scripts can then only contain a reference\nto a stored locator by name.\n\nThe main way to create named locators is with [VSCode](https://robocorp.com/docs/developer-tools/visual-studio-code/overview).\n\nRead more on identifying elements and crafting locators:\n\n* [Desktop automation and RPA](https://robocorp.com/docs-robot-framework/development-guide/desktop)\n\n* [How to find user interface elements using locators and keyboard shortcuts in Windows applications](https://robocorp.com/docs-robot-framework/development-guide/desktop/how-to-find-user-interface-elements-using-locators-and-keyboard-shortcuts-in-windows-applications)\n\n**Keyboard and mouse**\n\nKeyboard keywords can emulate typing text, but also pressing various function keys.\nThe name of a key is case-insensitive and spaces will be converted to underscores,\ni.e. the key `Page Down` and `page_down` are equivalent.\n\nThe following function keys are supported:\n\n\n\n\n\nKey\n\nDescription\n\nshift\n\nA generic Shift key. This is a modifier.\n\nshift\\_l\n\nThe left Shift key. This is a modifier.\n\nshift\\_r\n\nThe right Shift key. This is a modifier.\n\nctrl\n\nA generic Ctrl key. This is a modifier.\n\nctrl\\_l\n\nhe left Ctrl key. This is a modifier.\n\nctrl\\_r\n\nThe right Ctrl key. This is a modifier.\n\nalt\n\nA generic Alt key. This is a modifier.\n\nalt\\_l\n\nThe left Alt key. This is a modifier.\n\nalt\\_r\n\nThe right Alt key. This is a modifier.\n\nalt\\_gr\n\nThe AltGr key. This is a modifier.\n\ncmd\n\nA generic command button (Windows / Command / Super key). This may be a modifier.\n\ncmd\\_l\n\nThe left command button (Windows / Command / Super key). This may be a modifier.\n\ncmd\\_r\n\nThe right command button (Windows / Command / Super key). This may be a modifier.\n\nup\n\nAn up arrow key.\n\ndown\n\nA down arrow key.\n\nleft\n\nA left arrow key.\n\nright\n\nA right arrow key.\n\nenter\n\nThe Enter or Return key.\n\nspace\n\nThe Space key.\n\ntab\n\nThe Tab key.\n\nbackspace\n\nThe Backspace key.\n\ndelete\n\nThe Delete key.\n\nesc\n\nThe Esc key.\n\nhome\n\nThe Home key.\n\nend\n\nThe End key.\n\npage\\_down\n\nThe Page Down key.\n\npage\\_up\n\nThe Page Up key.\n\ncaps\\_lock\n\nThe Caps Lock key.\n\nf1 to f20\n\nThe function keys.\n\ninsert\n\nThe Insert key. This may be undefined for some platforms.\n\nmenu\n\nThe Menu key. This may be undefined for some platforms.\n\nnum\\_lock\n\nThe Num Lock key. This may be undefined for some platforms.\n\npause\n\nThe Pause / Break key. This may be undefined for some platforms.\n\nprint\\_screen\n\nThe Print Screen key. This may be undefined for some platforms.\n\nscroll\\_lock\n\nThe Scroll Lock key. This may be undefined for some platforms.When controlling the mouse, there are different types of actions that can be\ndone. Same formatting rules as function keys apply. They are as follows:\n\n\n\n\n\nAction\n\nDescription\n\nclick\n\nClick with left mouse button\n\nleft\\_click\n\nClick with left mouse button\n\ndouble\\_click\n\nDouble click with left mouse button\n\ntriple\\_click\n\nTriple click with left mouse button\n\nright\\_click\n\nClick with right mouse buttonThe supported mouse button types are `left`, `right`, and `middle`.\n\n**Examples**\n\nBoth Robot Framework and Python examples follow.\n\nThe library must be imported first.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Desktop\n```\n\n```python\nfrom RPA.Desktop import Desktop\ndesktop = Desktop()\n```\n\nThe library can open applications and interact with them through\nkeyboard and mouse events.\n\n```robotframework\n*** Keywords ***\nWrite entry in accounting\n    [Arguments]    ${entry}\n    Open application    erp_client.exe\n    Click         image:%{ROBOT_ROOT}/images/create.png\n    Type text     ${entry}\n    Press keys    ctrl    s\n    Press keys    enter\n```\n\n```python\ndef write_entry_in_accounting(entry):\n    desktop.open_application(\"erp_client.exe\")\n    desktop.click(f\"image:{ROBOT_ROOT}/images/create.png\")\n    desktop.type_text(entry)\n    desktop.press_keys(\"ctrl\", \"s\")\n    desktop.press_keys(\"enter\")\n```\n\nTargeting can be currently done using coordinates (absolute or relative),\nbut using template matching is preferred.\n\n```robotframework\n*** Keywords ***\nWrite to field\n    [Arguments]  ${text}\n    Move mouse   image:input_label.png\n    Move mouse   offset:200,0\n    Click\n    Type text    ${text}\n    Press keys   enter\n```\n\n```python\ndef write_to_field(text):\n    desktop.move_mouse(\"image:input_label.png\")\n    desktop.move_mouse(\"offset:200,0\")\n    desktop.click()\n    desktop.type_text(text)\n    desktop.press_keys(\"enter\")\n```\n\nElements can be found by text too.\n\n```robotframework\n*** Keywords ***\nClick New\n    Click       ocr:New\n```\n\n```python\ndef click_new():\n    desktop.click('ocr:\"New\"')\n```\n\nIt is recommended to wait for the elements to be visible before\ntrying any interaction. You can also pass `region` objects as locators.\n\n```robotframework\n*** Keywords ***\nClick New\n    ${region}=  Wait For element  ocr:New\n    Click       ${region}\n```\n\n```python\ndef click_new():\n    region = desktop.wait_for_element(\"ocr:New\")\n    desktop.click(region)\n```\n\nAnother way to find elements by offsetting from an anchor:\n\n```robotframework\n*** Keywords ***\nType Notes\n    [Arguments]        ${text}\n    Click With Offset  ocr:Notes  500  0\n    Type Text          ${text}\n```\n\n```python\ndef type_notes(text):\n    desktop.click_with_offset(\"ocr:Notes\", 500, 0)\n    desktop.type_text(text)\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\__init__.py", "lineno": 37, "tags": [], "inits": [{"name": "__init__", "args": [{"name": "locators_path", "kind": "POSITIONAL_OR_NAMED", "repr": "locators_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Initialize self.  See help(type(self)) for accurate signature.\n", "tags": [], "source": null, "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.", "lineno": 344}], "keywords": [{"name": "Clear Clipboard", "args": [], "doc": "Clear the system clipboard.\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\clipboard.py", "shortdoc": "Clear the system clipboard.", "lineno": 52}, {"name": "Click", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str | Locator | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "action", "kind": "POSITIONAL_OR_NAMED", "repr": "action: Action = click", "required": true, "defaultValue": "click", "types": ["Action"], "typedocs": []}], "doc": "Click at the element indicated by locator.\n\nparam locator\n\n:   Locator for click position\n\nparam action\n\n:   Click action, e.g. right click\n\nExample:\n\n```robotframework\nClick\nClick    LoginForm.Button\nClick    coordinates:500,200    triple click\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py", "shortdoc": "Click at the element indicated by locator.", "lineno": 110}, {"name": "Click With Offset", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str | Locator | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "x", "kind": "POSITIONAL_OR_NAMED", "repr": "x: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}, {"name": "y", "kind": "POSITIONAL_OR_NAMED", "repr": "y: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}, {"name": "action", "kind": "POSITIONAL_OR_NAMED", "repr": "action: Action = click", "required": true, "defaultValue": "click", "types": ["Action"], "typedocs": []}], "doc": "Click at a given pixel offset from the given locator.\n\nparam locator\n\n:   Locator for click start position\n\nparam x\n\n:   Click horizontal offset in pixels\n\nparam y\n\n:   Click vertical offset in pixels\n\nparam action\n\n:   Click action, e.g. right click\n\nExample:\n\n```robotframework\nClick with offset    Robocorp.Logo    y=400\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py", "shortdoc": "Click at a given pixel offset from the given locator.", "lineno": 140}, {"name": "Close All Applications", "args": [], "doc": "Close all opened applications.\n\nExample:\n\n```robotframework\nOpen file    order1.docx\nOpen file    order2.docx\nOpen file    order3.docx\n# Do something with Word\nClose all applications\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\application.py", "shortdoc": "Close all opened applications.", "lineno": 202}, {"name": "Close Application", "args": [{"name": "app", "kind": "POSITIONAL_OR_NAMED", "repr": "app: Application", "required": true, "defaultValue": null, "types": ["Application"], "typedocs": []}], "doc": "Close given application. Needs to be started\nwith this library.\n\nparam app\n\n:   App instance\n\nExample:\n\n```robotframework\n# Open a file with a default application\n${word}=    Open file    template.docx\n# Do something with Word\nClose application    ${word}\n\n# Open a an application with a specific executable\n${ie}=    Open application    iexplore.exe\n# Do something with IE\nClose application    ${ie}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\application.py", "shortdoc": "Close given application. Needs to be started with this library.", "lineno": 178}, {"name": "Copy To Clipboard", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str | Locator", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Read value to system clipboard from given input element.\n\nparam locator\n\n:   Locator for element\n\nreturns\n\n:   Current clipboard value\n\nExample:\n\n```robotframework\n${value}=    Copy to clipboard    ResultPage.Counter\nLog    Copied text: ${value}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\clipboard.py", "shortdoc": "Read value to system clipboard from given input element.", "lineno": 11}, {"name": "Define Region", "args": [{"name": "left", "kind": "POSITIONAL_OR_NAMED", "repr": "left: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "top", "kind": "POSITIONAL_OR_NAMED", "repr": "top: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "right", "kind": "POSITIONAL_OR_NAMED", "repr": "right: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "bottom", "kind": "POSITIONAL_OR_NAMED", "repr": "bottom: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}], "doc": "Return a new `Region` with the given dimensions.\n\nparam left\n\n:   Left edge coordinate.\n\nparam top\n\n:   Top edge coordinate.\n\nparam right\n\n:   Right edge coordinate.\n\nparam bottom\n\n:   Bottom edge coordinate.\n\nUsage examples:\n\n```robotframework\n${region}=  Define Region  10  10  50  30\n```\n\n```python\nregion = desktop.define_region(10, 10, 50, 30)\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\screen.py", "shortdoc": "Return a new `Region` with the given dimensions.", "lineno": 189}, {"name": "Drag And Drop", "args": [{"name": "source", "kind": "POSITIONAL_OR_NAMED", "repr": "source: str | Locator", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "destination", "kind": "POSITIONAL_OR_NAMED", "repr": "destination: str | Locator", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "start_delay", "kind": "POSITIONAL_OR_NAMED", "repr": "start_delay: float = 2.0", "required": true, "defaultValue": "2.0", "types": ["float"], "typedocs": []}, {"name": "end_delay", "kind": "POSITIONAL_OR_NAMED", "repr": "end_delay: float = 0.5", "required": true, "defaultValue": "0.5", "types": ["float"], "typedocs": []}], "doc": "Drag mouse from source to destination while holding the left mouse button.\n\nparam source\n\n:   Locator for start position\n\nparam destination\n\n:   Locator for destination position\n\nparam start_delay\n\n:   Delay in seconds after pressing down mouse button\n\nparam end_delay\n\n:   Delay in seconds before releasing mouse button\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py", "shortdoc": "Drag mouse from source to destination while holding the left mouse button.", "lineno": 233}, {"name": "Find Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str | Locator", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Find an element defined by locator, and return its position.\nRaises `ElementNotFound` if\\` no matches were found, or\n`MultipleElementsFound` if there were multiple matches.\n\nparam locator\n\n:   Locator string\n\nExample:\n\n```robotframework\n${match}=    Find element    image:logo.png\nLog    Found logo at ${match.right}, ${match.top}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\finder.py", "shortdoc": "Find an element defined by locator, and return its position. Raises `ElementNotFound` if\\` no matches were found, or `MultipleElementsFound` if there were multiple matches.", "lineno": 294}, {"name": "Find Elements", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str | Locator", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Find all elements defined by locator, and return their positions.\n\nparam locator\n\n:   Locator string\n\nExample:\n\n```robotframework\n${matches}=    Find elements    image:icon.png\nFOR    ${match}  IN  @{matches}\n    Log    Found icon at ${match.right}, ${match.top}\nEND\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\finder.py", "shortdoc": "Find all elements defined by locator, and return their positions.", "lineno": 272}, {"name": "Get Clipboard Value", "args": [], "doc": "Read current value from system clipboard.\n\nExample:\n\n```robotframework\nCopy to clipboard       coordinates:401,198\n${text}=    Get clipboard value\nLog    We just copied '${text}'\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\clipboard.py", "shortdoc": "Read current value from system clipboard.", "lineno": 57}, {"name": "Get Display Dimensions", "args": [], "doc": "Returns the dimensions of the current virtual display,\nwhich is the combined size of all physical monitors.\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\screen.py", "shortdoc": "Returns the dimensions of the current virtual display, which is the combined size of all physical monitors.", "lineno": 163}, {"name": "Get Mouse Position", "args": [], "doc": "Get current mouse position in pixel coordinates.\n\nExample:\n\n```robotframework\n${position}=    Get mouse position\nLog    Current mouse position is ${position.x}, ${position.y}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py", "shortdoc": "Get current mouse position in pixel coordinates.", "lineno": 175}, {"name": "Highlight Elements", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str | Locator", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Draw an outline around all matching elements.\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\screen.py", "shortdoc": "Draw an outline around all matching elements.", "lineno": 171}, {"name": "Move Mouse", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str | Locator", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Move mouse to given coordinates.\n\nparam locator\n\n:   Locator for mouse position\n\nExample:\n\n```robotframework\nMove mouse    Robocorp.Logo\nMove mouse    offset:0,400\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py", "shortdoc": "Move mouse to given coordinates.", "lineno": 192}, {"name": "Move Region", "args": [{"name": "region", "kind": "POSITIONAL_OR_NAMED", "repr": "region: Region", "required": true, "defaultValue": null, "types": ["Region"], "typedocs": []}, {"name": "left", "kind": "POSITIONAL_OR_NAMED", "repr": "left: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "top", "kind": "POSITIONAL_OR_NAMED", "repr": "top: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}], "doc": "Return a new `Region` with an offset from the given region.\n\nparam region\n\n:   The region to move.\n\nparam left\n\n:   Amount of pixels to move left/right.\n\nparam top\n\n:   Amount of pixels to move up/down.\n\nUsage examples:\n\n```robotframework\n${region}=          Find Element  ocr:\"Net Assets\"\n${moved_region}=    Move Region  ${region}  500  0\n```\n\n```python\nregion = desktop.find_element('ocr:\"Net Assets\"')\nmoved_region = desktop.move_region(region, 500, 0)\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\screen.py", "shortdoc": "Return a new `Region` with an offset from the given region.", "lineno": 212}, {"name": "Open Application", "args": [{"name": "name_or_path", "kind": "POSITIONAL_OR_NAMED", "repr": "name_or_path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Start a given application by name (if in PATH),\nor by path to executable.\n\nparam name_or_path\n\n:   Name or path of application\n\nparam args\n\n:   Command line arguments for application\n\nreturns\n\n:   Application instance\n\nExample:\n\n```robotframework\nOpen application    notepad.exe\nOpen application    c:\\path\\to\\program.exe    --example-argument\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\application.py", "shortdoc": "Start a given application by name (if in PATH), or by path to executable.", "lineno": 82}, {"name": "Open File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Open a file with the default application.\n\nparam path\n\n:   Path to file\n\nExample:\n\n```robotframework\nOpen file    orders.xlsx\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\application.py", "shortdoc": "Open a file with the default application.", "lineno": 101}, {"name": "Paste From Clipboard", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str | Locator", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Paste value from system clipboard into given element.\n\nparam locator\n\n:   Locator for element\n\nExample:\n\n```robotframework\nCopy to clipboard       coordinates:401,198\nPaste from clipboard    coordinates:822,710\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\clipboard.py", "shortdoc": "Paste value from system clipboard into given element.", "lineno": 33}, {"name": "Press Keys", "args": [{"name": "@keys: str", "kind": "VAR_POSITIONAL", "repr": "*keys: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Press multiple keys down simultaneously.\n\nparam keys\n\n:   Keys to press\n\nExample:\n\n```robotframework\nPress keys    ctrl  alt  delete\n\nPress keys    ctrl  a\nPress keys    ctrl  c\n${all_text}=  Get clipboard value\nLog    Text box content was: ${all_text}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\keyboard.py", "shortdoc": "Press multiple keys down simultaneously.", "lineno": 73}, {"name": "Press Mouse Button", "args": [{"name": "button", "kind": "POSITIONAL_OR_NAMED", "repr": "button: Any = left", "required": true, "defaultValue": "left", "types": ["Any"], "typedocs": []}], "doc": "Press down mouse button and keep it pressed.\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py", "shortdoc": "Press down mouse button and keep it pressed.", "lineno": 211}, {"name": "Read Text", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "invert", "kind": "POSITIONAL_OR_NAMED", "repr": "invert: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "language", "kind": "POSITIONAL_OR_NAMED", "repr": "language: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "configuration", "kind": "POSITIONAL_OR_NAMED", "repr": "configuration: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Read text using OCR from the screen, or an area of the\nscreen defined by the given locator.\n\nparam locator\n\n:   Location of element to read text from\n\nparam invert\n\n:   Invert image colors, useful for reading white text\n    on dark background\n\nparam language\n\n:   3-character ISO 639-2 language code of the text.\n    This is passed directly to the pytesseract lib in the lang parameter.\n    See [https://tesseract-ocr.github.io/tessdoc/Command-Line-Usage.html#using-one-language](https://tesseract-ocr.github.io/tessdoc/Command-Line-Usage.html#using-one-language)\n\nparam configuration\n\n:   Tesseract specific parameters like Page Segmentation\n    Modes(psm) or OCR Engine Mode (oem). This is passed directly to the\n    pytesseract lib in the config parameter.\n    See [https://tesseract-ocr.github.io/tessdoc/Command-Line-Usage.html](https://tesseract-ocr.github.io/tessdoc/Command-Line-Usage.html)\n\nUsage examples:\n\n```robotframework\n${label_region}=  Find Element  image:label.png\n${value_region}=  Move Region   ${label_region}  100  0\n${text}=          Read Text     ${value_region}\n```\n\n```python\nlabel_region = desktop.find_element(\"image:label.png\")\nvalue_region = desktop.move_region(label_region, 100, 0)\ntext = desktop.read_text(value_region)\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\text.py", "shortdoc": "Read text using OCR from the screen, or an area of the screen defined by the given locator.", "lineno": 26}, {"name": "Release Mouse Button", "args": [{"name": "button", "kind": "POSITIONAL_OR_NAMED", "repr": "button: Any = left", "required": true, "defaultValue": "left", "types": ["Any"], "typedocs": []}], "doc": "Release mouse button that was previously pressed.\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py", "shortdoc": "Release mouse button that was previously pressed.", "lineno": 222}, {"name": "Resize Region", "args": [{"name": "region", "kind": "POSITIONAL_OR_NAMED", "repr": "region: Region", "required": true, "defaultValue": null, "types": ["Region"], "typedocs": []}, {"name": "left", "kind": "POSITIONAL_OR_NAMED", "repr": "left: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}, {"name": "top", "kind": "POSITIONAL_OR_NAMED", "repr": "top: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}, {"name": "right", "kind": "POSITIONAL_OR_NAMED", "repr": "right: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}, {"name": "bottom", "kind": "POSITIONAL_OR_NAMED", "repr": "bottom: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}], "doc": "Return a resized new `Region` from a given region.\n\nExtends edges the given amount outward from the center,\ni.e. positive left values move the left edge to the left.\n\nparam region\n\n:   The region to resize.\n\nparam left\n\n:   Amount of pixels to resize left edge.\n\nparam top\n\n:   Amount of pixels to resize top edge.\n\nparam right\n\n:   Amount of pixels to resize right edge.\n\nparam bottom\n\n:   Amount of pixels to resize bottom edge.\n\nUsage examples:\n\n```robotframework\n${region}=          Find Element  ocr:\"Net Assets\"\n${resized_region}=  Resize Region  ${region}  bottom=10\n```\n\n```python\nregion = desktop.find_element('ocr:\"Net Assets\"')\nresized_region = desktop.resize_region(region, bottom=10)\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\screen.py", "shortdoc": "Return a resized new `Region` from a given region.", "lineno": 236}, {"name": "Set Clipboard Value", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Write given value to system clipboard.\n\nExample:\n\n```robotframework\nSet clipboard value     This is some text.\nPaste from clipboard    coordinates:822,710\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\clipboard.py", "shortdoc": "Write given value to system clipboard.", "lineno": 71}, {"name": "Set Default Confidence", "args": [{"name": "confidence", "kind": "POSITIONAL_OR_NAMED", "repr": "confidence: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Set the default template matching confidence.\n\nparam confidence\n\n:   Value from 1 to 100\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\finder.py", "shortdoc": "Set the default template matching confidence.", "lineno": 371}, {"name": "Set Default Timeout", "args": [{"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float = 3.0", "required": true, "defaultValue": "3.0", "types": ["float"], "typedocs": []}], "doc": "Set the default time to wait for elements.\n\nparam timeout\n\n:   Time in seconds\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\finder.py", "shortdoc": "Set the default time to wait for elements.", "lineno": 363}, {"name": "Take Screenshot", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str | Locator | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "embed", "kind": "POSITIONAL_OR_NAMED", "repr": "embed: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Take a screenshot of the whole screen, or an element\nidentified by the given locator.\n\nparam path\n\n:   Path to screenshot. The string `{index}` will be replaced with\n    an index number to avoid overwriting previous screenshots.\n\nparam locator\n\n:   Element to crop screenshot to\n\nparam embed\n\n:   Embed screenshot into Robot Framework log\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\screen.py", "shortdoc": "Take a screenshot of the whole screen, or an element identified by the given locator.", "lineno": 125}, {"name": "Type Text", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "@modifiers: str", "kind": "VAR_POSITIONAL", "repr": "*modifiers: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "enter", "kind": "NAMED_ONLY", "repr": "enter: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Type text one letter at a time.\n\nparam text\n\n:   Text to write\n\nparam modifiers\n\n:   Modifier or functions keys held during typing\n\nparam enter\n\n:   Press Enter / Return key after typing text\n\nExample:\n\n```robotframework\nType text    this text will be uppercase    shift\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\keyboard.py", "shortdoc": "Type text one letter at a time.", "lineno": 47}, {"name": "Type Text Into", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str | Locator", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "clear", "kind": "POSITIONAL_OR_NAMED", "repr": "clear: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "enter", "kind": "POSITIONAL_OR_NAMED", "repr": "enter: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Type text at the position indicated by given locator.\n\nparam locator\n\n:   Locator of input element\n\nparam text\n\n:   Text to write\n\nparam clear\n\n:   Clear element before writing\n\nparam enter\n\n:   Press Enter / Return key after typing text\n\nExample:\n\n```robotframework\nType text into    LoginForm.Name      Marky Mark\nType text into    LoginForm.Password  ${PASSWORD}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\keyboard.py", "shortdoc": "Type text at the position indicated by given locator.", "lineno": 103}, {"name": "Wait For Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str | Locator", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "interval", "kind": "POSITIONAL_OR_NAMED", "repr": "interval: float = 0.5", "required": true, "defaultValue": "0.5", "types": ["float"], "typedocs": []}], "doc": "Wait for an element defined by locator to exist, or\nraise a TimeoutException if none were found within timeout.\n\nparam locator\n\n:   Locator string\n\nExample:\n\n```robotframework\nWait for element    alias:CookieConsent    timeout=30\nClick    image:%{ROBOT_ROOT}/accept.png\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Desktop\\keywords\\finder.py", "shortdoc": "Wait for an element defined by locator to exist, or raise a TimeoutException if none were found within timeout.", "lineno": 324}], "dataTypes": {}, "typedocs": []}
mtime:1741610817.5847552
{"name": "RPA.PDF", "doc": "PDF is a library for managing PDF documents.\n\nIt can be used to extract text from PDFs, add watermarks to pages, and\ndecrypt/encrypt documents.\n\nMerging and splitting PDFs is supported by `Add Files To PDF` keyword. Read\nthe keyword documentation for examples.\n\nThere is also limited support for updating form field values. (check\n`Set Field Value` and `Save Field Values` for more info)\n\nThe input PDF file can be passed as an argument to the keywords, or it can be\nomitted if you first call `Open PDF`. A reference to the current active PDF will\nbe stored in the library instance and can be changed by using the `Switch To PDF`\nkeyword with another PDF file path, therefore you can asynchronously work with\nmultiple PDFs.\n\nKeep in mind that this library works with text-based PDFs, and it can't\nextract information from an image-based (scan) PDF file. For accurate\nresults, you have to use specialized external services wrapped by the\nRPA.DocumentAI library.Portal example with video recording demo for parsing PDF invoices:\n[https://github.com/robocorp/example-parse-pdf-invoice](https://github.com/robocorp/example-parse-pdf-invoice)\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Settings ***\nLibrary    RPA.PDF\nLibrary    String\n\n*** Tasks ***\nExtract Data From First Page\n    ${text} =    Get Text From PDF    report.pdf\n    ${lines} =     Get Lines Matching Regexp    ${text}[${1}]    .+pain.+\n    Log    ${lines}\n\nGet Invoice Number\n    Open Pdf    invoice.pdf\n    ${matches} =  Find Text    Invoice Number\n    Log List      ${matches}\n\nFill Form Fields\n    Switch To Pdf    form.pdf\n    ${fields} =     Get Input Fields   encoding=utf-16\n    Log Dictionary    ${fields}\n    Set Field Value    Given Name Text Box    Mark\n    Save Field Values    output_path=${OUTPUT_DIR}${/}completed-form.pdf\n    ...                  use_appearances_writer=${True}\n```\n\n```python\nfrom RPA.PDF import PDF\nfrom robot.libraries.String import String\n\npdf = PDF()\nstring = String()\n\ndef extract_data_from_first_page():\n    text = pdf.get_text_from_pdf(\"report.pdf\")\n    lines = string.get_lines_matching_regexp(text[1], \".+pain.+\")\n    print(lines)\n\ndef get_invoice_number():\n    pdf.open_pdf(\"invoice.pdf\")\n    matches = pdf.find_text(\"Invoice Number\")\n    for match in matches:\n        print(match)\n\ndef fill_form_fields():\n    pdf.switch_to_pdf(\"form.pdf\")\n    fields = pdf.get_input_fields(encoding=\"utf-16\")\n    for key, value in fields.items():\n        print(f\"{key}: {value}\")\n    pdf.set_field_value(\"Given Name Text Box\", \"Mark\")\n    pdf.save_field_values(\n        output_path=\"completed-form.pdf\",\n        use_appearances_writer=True\n    )\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "./RPA/PDF/__init__.py", "lineno": 11, "tags": [], "inits": [], "keywords": [{"name": "Add Files To Pdf", "args": [{"name": "files", "kind": "POSITIONAL_OR_NAMED", "repr": "files: list | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "target_document", "kind": "POSITIONAL_OR_NAMED", "repr": "target_document: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "append", "kind": "POSITIONAL_OR_NAMED", "repr": "append: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Add images and/or pdfs to new PDF document.\n\nSupports merging and splitting PDFs.\n\nImage formats supported are JPEG, PNG and GIF.\n\nThe file can be added with extra properties by\ndenoting : at the end of the filename. Each\nproperty should be separated by comma.\n\nSupported extra properties for PDFs are:\n\n* page and/or page ranges\n\n* no extras means that all source PDF pages are added\n  into new PDF\n\nSupported extra properties for images are:\n\n* format, the PDF page format, for example. Letter or A4\n\n* rotate, how many degrees image is rotated counter-clockwise\n\n* align, only possible value at the moment is center\n\n* orientation, the PDF page orientation for the image, possible\n  values P (portrait) or L (landscape)\n\n* x/y, coordinates for adjusting image position on the page\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nAdd files to pdf\n    ${files}=    Create List\n    ...    ${TESTDATA_DIR}${/}invoice.pdf\n    ...    ${TESTDATA_DIR}${/}approved.png:align=center\n    ...    ${TESTDATA_DIR}${/}robot.pdf:1\n    ...    ${TESTDATA_DIR}${/}approved.png:x=0,y=0\n    ...    ${TESTDATA_DIR}${/}robot.pdf:2-10,15\n    ...    ${TESTDATA_DIR}${/}approved.png\n    ...    ${TESTDATA_DIR}${/}landscape_image.png:rotate=-90,orientation=L\n    ...    ${TESTDATA_DIR}${/}landscape_image.png:format=Letter\n    Add Files To PDF    ${files}    newdoc.pdf\n\nMerge pdfs\n    ${files}=    Create List\n    ...    ${TESTDATA_DIR}${/}invoice.pdf\n    ...    ${TESTDATA_DIR}${/}robot.pdf:1\n    ...    ${TESTDATA_DIR}${/}robot.pdf:2-10,15\n    Add Files To Pdf    ${files}    merged-doc.pdf\n\nSplit pdf\n    ${files}=    Create List\n    ...    ${OUTPUT_DIR}${/}robot.pdf:2-10,15\n    Add Files To Pdf     ${files}    split-doc.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_addfiles():\n    list_of_files = [\n        'invoice.pdf',\n        'approved.png:align=center',\n        'robot.pdf:1',\n        'approved.png:x=0,y=0',\n    ]\n    pdf.add_files_to_pdf(\n        files=list_of_files,\n        target_document=\"output/output.pdf\"\n    )\n\ndef example_merge():\n    list_of_files = [\n        'invoice.pdf',\n        'robot.pdf:1',\n        'robot.pdf:2-10,15',\n    ]\n    pdf.add_files_to_pdf(\n        files=list_of_files,\n        target_document=\"output/merged-doc.pdf\"\n    )\n\ndef example_split():\n    list_of_files = [\n        'robot.pdf:2-10,15',\n    ]\n    pdf.add_files_to_pdf(\n        files=list_of_files,\n        target_document=\"output/split-doc.pdf\"\n    )\n```\n\nparam files\n\n:   list of filepaths to add into PDF (can be either images or PDFs)\n\nparam target_document\n\n:   filepath of target PDF\n\nparam append\n\n:   appends files to existing document if append is True\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Add images and/or pdfs to new PDF document.", "lineno": 1205}, {"name": "Add Watermark Image To Pdf", "args": [{"name": "image_path", "kind": "POSITIONAL_OR_NAMED", "repr": "image_path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "output_path", "kind": "POSITIONAL_OR_NAMED", "repr": "output_path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | Path | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "coverage", "kind": "POSITIONAL_OR_NAMED", "repr": "coverage: float = 0.2", "required": true, "defaultValue": "0.2", "types": ["float"], "typedocs": []}], "doc": "Add an image into an existing or new PDF.\n\nIf no source path is given, assume a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keyword ***\nIndicate approved with watermark\n    Add Watermark Image To PDF\n    ...             image_path=approved.png\n    ...             source_path=/tmp/sample.pdf\n    ...             output_path=output/output.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef indicate_approved_with_watermark():\n    pdf.add_watermark_image_to_pdf(\n        image_path=\"approved.png\"\n        source_path=\"/tmp/sample.pdf\"\n        output_path=\"output/output.pdf\"\n    )\n```\n\nparam image_path\n\n:   filepath to image file to add into PDF\n\nparam source\n\n:   filepath to source, if not given add image to currently\n    active PDF\n\nparam output_path\n\n:   filepath of target PDF\n\nparam coverage\n\n:   how the watermark image should be scaled on page,\n    defaults to 0.2\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Add an image into an existing or new PDF.", "lineno": 890}, {"name": "Close All Pdfs", "args": [], "doc": "Close all opened PDF file descriptors.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nClose Multiple PDFs\n    Close all pdfs\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Close all opened PDF file descriptors.", "lineno": 102}, {"name": "Close Pdf", "args": [{"name": "source_pdf", "kind": "POSITIONAL_OR_NAMED", "repr": "source_pdf: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Close PDF file descriptor for a certain file.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nClose just one pdf\n    Close pdf   path/to/the/pdf/file.pdf\n```\n\nparam source_pdf\n\n:   filepath to the source pdf.\n\nraises ValueError\n\n:   if file descriptor for the file is not found.\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Close PDF file descriptor for a certain file.", "lineno": 120}, {"name": "Convert", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "trim", "kind": "POSITIONAL_OR_NAMED", "repr": "trim: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "pagenum", "kind": "POSITIONAL_OR_NAMED", "repr": "pagenum: str | int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Parse source PDF into entities.\n\nThese entities can be used for text searches or XML dumping for example. The\nconversion will be done automatically when using the dependent keywords\ndirectly.\n\nparam source_path\n\n:   source PDF filepath\n\nparam trim\n\n:   trim whitespace from the text is set to True (default)\n\nparam pagenum\n\n:   Page number where search is performed on, defaults to None.\n    (meaning all pages get converted -- numbers start from 1)\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n***Settings***\nLibrary    RPA.PDF\n\n***Tasks***\nExample Keyword\n    Convert    /tmp/sample.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    pdf.convert(\"/tmp/sample.pdf\")\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\model.py", "shortdoc": "Parse source PDF into entities.", "lineno": 397}, {"name": "Decrypt Pdf", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "output_path", "kind": "POSITIONAL_OR_NAMED", "repr": "output_path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "password", "kind": "POSITIONAL_OR_NAMED", "repr": "password: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Decrypt PDF with password.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nMake PDF human readable\n    ${success}=  Decrypt PDF    /tmp/sample.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef make_pdf_human_readable():\n    success = pdf.decrypt_pdf(\"/tmp/sample.pdf\")\n```\n\nparam source_path\n\n:   filepath to the source pdf.\n\nparam output_path\n\n:   filepath to the decrypted pdf.\n\nparam password\n\n:   password as a string.\n\nreturn\n\n:   True if decrypt was successful, else False or Exception.\n\nraises ValueError\n\n:   on decryption errors.\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Decrypt PDF with password.", "lineno": 791}, {"name": "Dump Pdf As Xml", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Get PDFMiner format XML dump of the PDF\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n***Settings***\nLibrary    RPA.PDF\n\n***Tasks***\nExample Keyword\n    ${xml}=  Dump PDF as XML    /tmp/sample.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    xml = pdf.dump_pdf_as_xml(\"/tmp/sample.pdf\")\n```\n\nparam source_path\n\n:   filepath to the source PDF\n\nreturn\n\n:   XML content as a string\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\model.py", "shortdoc": "Get PDFMiner format XML dump of the PDF", "lineno": 765}, {"name": "Encrypt Pdf", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "output_path", "kind": "POSITIONAL_OR_NAMED", "repr": "output_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "user_pwd", "kind": "POSITIONAL_OR_NAMED", "repr": "user_pwd: str = ", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "owner_pwd", "kind": "POSITIONAL_OR_NAMED", "repr": "owner_pwd: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "use_128bit", "kind": "POSITIONAL_OR_NAMED", "repr": "use_128bit: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Encrypt a PDF document.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nSecure this PDF\n    Encrypt PDF    /tmp/sample.pdf\n\nSecure this PDF and set passwords\n    Encrypt PDF\n    ...    source_path=/tmp/sample.pdf\n    ...    output_path=/tmp/new/sample_encrypted.pdf\n    ...    user_pwd=complex_password_here\n    ...    owner_pwd=different_complex_password_here\n    ...    use_128bit=${TRUE}\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef secure_this_pdf():\n    pdf.encrypt_pdf(\"/tmp/sample.pdf\")\n```\n\nparam source_path\n\n:   filepath to the source pdf.\n\nparam output_path\n\n:   filepath to the target pdf, stored by default\n    in the robot output directory as `output.pdf`\n\nparam user_pwd\n\n:   allows opening and reading PDF with restrictions.\n\nparam owner_pwd\n\n:   allows opening PDF without any restrictions, by\n    default same user\\_pwd.\n\nparam use_128bit\n\n:   whether to 128bit encryption, when false 40bit\n    encryption is used, default True.\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Encrypt a PDF document.", "lineno": 726}, {"name": "Extract Pages From Pdf", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "output_path", "kind": "POSITIONAL_OR_NAMED", "repr": "output_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "pages", "kind": "POSITIONAL_OR_NAMED", "repr": "pages: int | str | List[int] | List[str] | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Extract pages from source PDF and save to a new PDF document.\n\nPage numbers start from 1.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nSave PDF pages to a new document\n    ${pages}=    Extract Pages From PDF\n    ...          source_path=/tmp/sample.pdf\n    ...          output_path=/tmp/output.pdf\n    ...          pages=5\n\nSave PDF pages from open PDF to a new document\n    ${pages}=    Extract Pages From PDF\n    ...          output_path=/tmp/output.pdf\n    ...          pages=5\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef save_pdf_pages_to_a_new_document():\n    pages = pdf.extract_pages_from_pdf(\n        source_path=\"/tmp/sample.pdf\",\n        output_path=\"/tmp/output.pdf\",\n        pages=5\n    )\n```\n\nparam source_path\n\n:   filepath to the source pdf.\n\nparam output_path\n\n:   filepath to the target pdf, stored by default\n    in the robot output directory as `output.pdf`\n\nparam pages\n\n:   page numbers to extract from PDF (numbers start from 1)\n    if None then extracts all pages.\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Extract pages from source PDF and save to a new PDF document.", "lineno": 598}, {"name": "Find Text", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "pagenum", "kind": "POSITIONAL_OR_NAMED", "repr": "pagenum: int | str = 1", "required": true, "defaultValue": "1", "types": ["Union"], "typedocs": []}, {"name": "direction", "kind": "POSITIONAL_OR_NAMED", "repr": "direction: str = right", "required": true, "defaultValue": "right", "types": ["str"], "typedocs": []}, {"name": "closest_neighbours", "kind": "POSITIONAL_OR_NAMED", "repr": "closest_neighbours: str | int | None = 1", "required": true, "defaultValue": "1", "types": ["Union"], "typedocs": []}, {"name": "strict", "kind": "POSITIONAL_OR_NAMED", "repr": "strict: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "regexp", "kind": "POSITIONAL_OR_NAMED", "repr": "regexp: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "trim", "kind": "POSITIONAL_OR_NAMED", "repr": "trim: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Find the closest text elements near the set anchor(s) through locator.\n\nThe PDF will be parsed automatically before elements can be searched.\n\nparam locator\n\n:   Element to set anchor to. This can be prefixed with either\n    \"text:\", \"subtext:\", \"regex:\" or \"coords:\" to find the anchor by text or\n    coordinates. The \"text\" strategy is assumed if no such prefix is specified.\n    (text search is case-sensitive; use ignore\\_case param for controlling it)\n\nparam pagenum\n\n:   Page number where search is performed on, defaults to 1 (first\n    page).\n\nparam direction\n\n:   In which direction to search for text elements. This can be\n    any of 'top'/'up', 'bottom'/'down', 'left' or 'right'. (defaults to\n    'right')\n\nparam closest_neighbours\n\n:   How many neighbours to return at most, sorted by the\n    distance from the current anchor.\n\nparam strict\n\n:   If element's margins should be used for matching those which are\n    aligned to the anchor. (turned off by default)\n\nparam regexp\n\n:   Expected format of the searched text value. By default all the\n    candidates in range are considered valid neighbours.\n\nparam trim\n\n:   Automatically trim leading/trailing whitespace from the text\n    elements. (switched on by default)\n\nparam ignore_case\n\n:   Do a case-insensitive search when set to True. (affects\n    the passed locator and regexp filtering)\n\nreturns\n\n:   A list of Match objects where every match has the following\n    attributes: .anchor - the matched text with the locator; .neighbours -\n    a list of adjacent texts found on the specified direction\n\nKeep in mind that this keyword works with text-based PDFs, and it can't\nextract information from an image-based (scan) PDF file. For accurate\nresults, you have to use specialized external services wrapped by the\nRPA.DocumentAI library.Portal example with video recording demo for parsing PDF invoices:\n[https://github.com/robocorp/example-parse-pdf-invoice](https://github.com/robocorp/example-parse-pdf-invoice)\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\nPDF Invoice Parsing\n    Open Pdf    invoice.pdf\n    ${matches} =  Find Text    Invoice Number\n    Log List      ${matches}\n```\n\n```\nList has one item:\nMatch(anchor='Invoice Number', direction='right', neighbours=['INV-3337'])\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef pdf_invoice_parsing():\n    pdf.open_pdf(\"invoice.pdf\")\n    matches = pdf.find_text(\"Invoice Number\")\n    for match in matches:\n        print(match)\n\npdf_invoice_parsing()\n```\n\n```\nMatch(anchor='Invoice Number', direction='right', neighbours=['INV-3337'])\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\finder.py", "shortdoc": "Find the closest text elements near the set anchor(s) through locator.", "lineno": 90}, {"name": "Get All Figures", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Return all figures in the PDF document.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nImage fetch\n    &{figures}=  Get All Figures    /tmp/sample.pdf\n\nImage fetch from open PDF\n    &{figures}=  Get All Figures\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef image_fetch():\n    figures = pdf.get_all_figures(\"/tmp/sample.pdf\")\n```\n\nparam source_path\n\n:   filepath to the source pdf.\n\nreturn\n\n:   dictionary of figures divided into pages.\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Return all figures in the PDF document.", "lineno": 850}, {"name": "Get Input Fields", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "replace_none_value", "kind": "POSITIONAL_OR_NAMED", "repr": "replace_none_value: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding: str | None = iso-8859-1", "required": true, "defaultValue": "iso-8859-1", "types": ["Union"], "typedocs": []}], "doc": "Get input fields in the PDF.\n\nStores input fields internally so that they can be used without parsing the PDF\nagain.\n\nparam source_path\n\n:   Filepath to source, if not given use the currently active\n    PDF.\n\nparam replace_none_value\n\n:   Enable this to conveniently visualize the fields. (\n    replaces the null value with field's default or its name if absent)\n\nparam encoding\n\n:   Use an explicit encoding for field name/value parsing. (\n    defaults to \"iso-8859-1\" but \"utf-8/16\" might be the one working for you)\n\nreturns\n\n:   A dictionary with all the found fields. Use their key names when\n    setting values into them.\n\nraises KeyError\n\n:   If no input fields are enabled in the PDF.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\nExample Keyword\n    ${fields} =     Get Input Fields    form.pdf\n    Log Dictionary    ${fields}\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    fields = pdf.get_input_fields(\"form.pdf\")\n    print(fields)\n\nexample_keyword()\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\model.py", "shortdoc": "Get input fields in the PDF.", "lineno": 501}, {"name": "Get Number Of Pages", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Get number of pages in the document.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nNumber of pages in PDF\n    ${page_count}=    Get Number Of Pages    /tmp/sample.pdf\n\nNumber of pages in opened PDF\n    ${page_count}=    Get Number Of Pages\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef number_of_pages_in_pdf():\n    page_count = pdf.get_number_of_pages(\"/tmp/sample.pdf\")\n```\n\nparam source_path\n\n:   filepath to the source pdf\n\nraises PdfReadError\n\n:   if file is encrypted or other restrictions are in place\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Get number of pages in the document.", "lineno": 450}, {"name": "Get Pdf Info", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Get metadata from a PDF document.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nGet PDF metadata\n    ${metadata}=    Get PDF Info    /tmp/sample.pdf\n\n*** Keywords ***\nGet metadata from an already opened PDF\n    ${metadata}=    Get PDF Info\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef get_pdf_metadata():\n    metadata = pdf.get_pdf_info(\"/tmp/sample.pdf\")\n```\n\nparam source_path\n\n:   filepath to the source PDF.\n\nreturn\n\n:   dictionary of PDF information.\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Get metadata from a PDF document.", "lineno": 349}, {"name": "Get Text From Pdf", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "pages", "kind": "POSITIONAL_OR_NAMED", "repr": "pages: int | str | List[int] | List[str] | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "details", "kind": "POSITIONAL_OR_NAMED", "repr": "details: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "trim", "kind": "POSITIONAL_OR_NAMED", "repr": "trim: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Get text from set of pages in source PDF document.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nText extraction from PDF\n    ${text}=    Get Text From PDF    /tmp/sample.pdf\n\nText extraction from open PDF\n    ${text}=    Get Text From PDF\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef text_extraction_from_pdf():\n    text = pdf.get_text_from_pdf(\"/tmp/sample.pdf\")\n```\n\nparam source_path\n\n:   filepath to the source pdf.\n\nparam pages\n\n:   page numbers to get text (numbers start from 1).\n\nparam details\n\n:   set to True to return textboxes, default False.\n\nparam trim\n\n:   set to False to return raw texts, default True\n    means whitespace is trimmed from the text\n\nreturn\n\n:   dictionary of pages and their texts.\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Get text from set of pages in source PDF document.", "lineno": 537}, {"name": "Html To Pdf", "args": [{"name": "content", "kind": "POSITIONAL_OR_NAMED", "repr": "content: str | List[str]", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "output_path", "kind": "POSITIONAL_OR_NAMED", "repr": "output_path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding: str = utf-8", "required": true, "defaultValue": "utf-8", "types": ["str"], "typedocs": []}, {"name": "margin", "kind": "POSITIONAL_OR_NAMED", "repr": "margin: float = 0", "required": true, "defaultValue": "0", "types": ["float"], "typedocs": []}, {"name": "working_directory", "kind": "POSITIONAL_OR_NAMED", "repr": "working_directory: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Generate a PDF file from HTML content.\n\nNote that input must be well-formed and valid HTML.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nCreate PDF from HTML\n    HTML to PDF    ${html_content_as_string}  /tmp/output.pdf\n\nMulti Page PDF\n    @{pages}=    Create List    ${page1_html}    ${page2_html}\n    HTML To PDF   ${pages}    output.pdf\n    ...  margin=10\n    ...  working_directory=subdir\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef create_pdf_from_html():\n    pdf.html_to_pdf(html_content_as_string, \"/tmp/output.pdf\")\n\ndef multi_page_pdf():\n    pages = [page1_html, page2_html, page3_html]\n    pdf.html_to_pdf(pages, \"output.pdf\", margin=10)\n    # if I have images in the HTML in the 'subdir'\n    pdf.html_to_pdf(pages, \"output.pdf\",\n        margin=10, working_directory=\"subdir\"\n    )\n```\n\nparam content\n\n:   HTML content\n\nparam output_path\n\n:   filepath where to save the PDF document\n\nparam encoding\n\n:   codec used for text I/O\n\nparam margin\n\n:   page margin, default is set to 0\n\nparam working_directory\n\n:   directory where to look for HTML linked\n    resources, by default uses the current working directory\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Generate a PDF file from HTML content.", "lineno": 272}, {"name": "Is Pdf Encrypted", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Check if PDF is encrypted.\n\nIf no source path given, assumes a PDF is already opened.\n\nparam source_path\n\n:   filepath to the source pdf.\n\nreturn\n\n:   True if file is encrypted.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nIs PDF encrypted\n    ${is_encrypted}=    Is PDF Encrypted    /tmp/sample.pdf\n\n*** Keywords ***\nIs open PDF encrypted\n    ${is_encrypted}=    Is PDF Encrypted\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    is_encrypted = pdf.is_pdf_encrypted(\"/tmp/sample.pdf\")\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Check if PDF is encrypted.", "lineno": 412}, {"name": "Open Pdf", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | Path", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Open a PDF document for reading.\n\nThis is called automatically in the other PDF keywords\nwhen a path to the PDF file is given as an argument.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nOpen my pdf file\n    Open PDF    /tmp/sample.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    metadata = pdf.open_pdf(\"/tmp/sample.pdf\")\n```\n\nparam source_path\n\n:   filepath to the source pdf.\n\nraises ValueError\n\n:   if PDF is already open.\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Open a PDF document for reading.", "lineno": 152}, {"name": "Rotate Page", "args": [{"name": "pages", "kind": "POSITIONAL_OR_NAMED", "repr": "pages: int | str | List[int] | List[str] | None", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "output_path", "kind": "POSITIONAL_OR_NAMED", "repr": "output_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "clockwise", "kind": "POSITIONAL_OR_NAMED", "repr": "clockwise: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "angle", "kind": "POSITIONAL_OR_NAMED", "repr": "angle: int = 90", "required": true, "defaultValue": "90", "types": ["int"], "typedocs": []}], "doc": "Rotate pages in source PDF document and save to target PDF document.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nPDF page rotation\n    Rotate Page\n    ...          source_path=/tmp/sample.pdf\n    ...          output_path=/tmp/output.pdf\n    ...          pages=5\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef pdf_page_rotation():\n    pages = pdf.rotate_page(\n        source_path=\"/tmp/sample.pdf\",\n        output_path=\"/tmp/output.pdf\",\n        pages=5\n    )\n```\n\nparam pages\n\n:   page numbers to extract from PDF (numbers start from 1).\n\nparam source_path\n\n:   filepath to the source pdf.\n\nparam output_path\n\n:   filepath to the target pdf, stored by default\n    in the robot output directory as `output.pdf`\n\nparam clockwise\n\n:   directorion that page will be rotated to, default True.\n\nparam angle\n\n:   number of degrees to rotate, default 90.\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Rotate pages in source PDF document and save to target PDF document.", "lineno": 662}, {"name": "Save Field Values", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "output_path", "kind": "POSITIONAL_OR_NAMED", "repr": "output_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "newvals", "kind": "POSITIONAL_OR_NAMED", "repr": "newvals: dict | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "use_appearances_writer", "kind": "POSITIONAL_OR_NAMED", "repr": "use_appearances_writer: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Save field values in PDF if it has fields.\n\nparam source_path\n\n:   Source PDF with fields to update.\n\nparam output_path\n\n:   Updated target PDF.\n\nparam newvals\n\n:   New values when updating many at once.\n\nparam use_appearances_writer\n\n:   For some PDF documents the updated fields won't\n    be visible (or will look strange). When this happens, try to set this to\n    True so the previewer will re-render these based on the actual values.\n    (and viewing the output PDF in a browser might display the field values\n    correcly then)\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\nExample Keyword\n    Open PDF    ./tmp/sample.pdf\n    Set Field Value    phone_nr    077123123\n    Save Field Values    output_path=./tmp/output.pdf\n\nMultiple operations\n    &{new_fields}=       Create Dictionary\n    ...                  phone_nr=077123123\n    ...                  title=dr\n    Save Field Values    source_path=./tmp/sample.pdf\n    ...                  output_path=./tmp/output.pdf\n    ...                  newvals=${new_fields}\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    pdf.open_pdf(\"./tmp/sample.pdf\")\n    pdf.set_field_value(\"phone_nr\", \"077123123\")\n    pdf.save_field_values(output_path=\"./tmp/output.pdf\")\n\ndef multiple_operations():\n    new_fields = {\"phone_nr\": \"077123123\", \"title\": \"dr\"}\n    pdf.save_field_values(\n        source_path=\"./tmp/sample.pdf\",\n        output_path=\"./tmp/output.pdf\",\n        newvals=new_fields\n    )\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\model.py", "shortdoc": "Save field values in PDF if it has fields.", "lineno": 659}, {"name": "Save Figure As Image", "args": [{"name": "figure", "kind": "POSITIONAL_OR_NAMED", "repr": "figure: Figure", "required": true, "defaultValue": null, "types": ["Figure"], "typedocs": []}, {"name": "images_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "images_folder: str = .", "required": true, "defaultValue": ".", "types": ["str"], "typedocs": []}, {"name": "file_prefix", "kind": "POSITIONAL_OR_NAMED", "repr": "file_prefix: str = ", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Try to save the image data from Figure object, and return\nthe file name, if successful.\n\nFigure needs to have byte stream and that needs to be recognized\nas image format for successful save.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keyword ***\nFigure to Image\n    ${image_file_path} =     Save figure as image\n    ...             figure=pdf_figure_object\n    ...             images_folder=/tmp/images\n    ...             file_prefix=file_name_here\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef figure_to_image():\n    image_file_path = pdf.save_figure_as_image(\n        figure=\"pdf_figure_object\"\n        images_folder=\"/tmp/images\"\n        file_prefix=\"file_name_here\"\n    )\n```\n\nparam figure\n\n:   PDF Figure object which will be saved as an image.\n    The PDF Figure object can be determined from the Get All Figures keyword\n\nparam images_folder\n\n:   directory where image files will be created\n\nparam file_prefix\n\n:   image filename prefix\n\nreturn\n\n:   image filepath or None\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Try to save the image data from Figure object, and return the file name, if successful.", "lineno": 1069}, {"name": "Save Figures As Images", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "images_folder", "kind": "POSITIONAL_OR_NAMED", "repr": "images_folder: str = .", "required": true, "defaultValue": ".", "types": ["str"], "typedocs": []}, {"name": "pages", "kind": "POSITIONAL_OR_NAMED", "repr": "pages: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "file_prefix", "kind": "POSITIONAL_OR_NAMED", "repr": "file_prefix: str = ", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Save figures from given PDF document as image files.\n\nIf no source path given, assumes a PDF is already opened.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keyword ***\nFigures to Images\n    ${image_filenames} =    Save figures as images\n    ...             source_path=/tmp/sample.pdf\n    ...             images_folder=/tmp/images\n    ...             pages=${4}\n    ...             file_prefix=file_name_here\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef figures_to_images():\n    image_filenames = pdf.save_figures_as_image(\n        source_path=\"/tmp/sample.pdf\"\n        images_folder=\"/tmp/images\"\n        pages=4\n        file_prefix=\"file_name_here\"\n    )\n```\n\nparam source_path\n\n:   filepath to PDF document\n\nparam images_folder\n\n:   directory where image files will be created\n\nparam pages\n\n:   target figures in the pages, can be single page or range,\n    default None means that all pages are scanned for figures to save\n    (numbers start from 1)\n\nparam file_prefix\n\n:   image filename prefix\n\nreturn\n\n:   list of image filenames created\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Save figures from given PDF document as image files.", "lineno": 1142}, {"name": "Save Pdf", "args": [{"name": "output_path", "kind": "POSITIONAL_OR_NAMED", "repr": "output_path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "reader", "kind": "POSITIONAL_OR_NAMED", "repr": "reader: PdfReader | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Save the contents of a pypdf reader to a new file.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keyword ***\nSave changes to PDF\n    Save PDF    /tmp/output.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef save_changes_to_pdf():\n    pdf.save_pdf(output_path=\"output/output.pdf\")\n```\n\nparam output_path\n\n:   filepath to target PDF\n\nparam reader\n\n:   a pypdf reader (defaults to currently active document)\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Save the contents of a pypdf reader to a new file.", "lineno": 1004}, {"name": "Set Anchor To Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "trim", "kind": "POSITIONAL_OR_NAMED", "repr": "trim: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "pagenum", "kind": "POSITIONAL_OR_NAMED", "repr": "pagenum: int | str = 1", "required": true, "defaultValue": "1", "types": ["Union"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Sets main anchor point in the document for further searches.\n\nThis is used internally in the library and can work with multiple anchors at\nthe same time if such are found.\n\nparam locator\n\n:   Element to set anchor to. This can be prefixed with either\n    \"text:\", \"subtext:\", \"regex:\" or \"coords:\" to find the anchor by text or\n    coordinates. The \"text\" strategy is assumed if no such prefix is specified.\n    (text search is case-sensitive; use ignore\\_case param for controlling it)\n\nparam trim\n\n:   Automatically trim leading/trailing whitespace from the text\n    elements. (switched on by default)\n\nparam pagenum\n\n:   Page number where search is performed on, defaults to 1 (first\n    page).\n\nparam ignore_case\n\n:   Do a case-insensitive search when set to True.\n\nreturns\n\n:   True if at least one anchor was found.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\nExample Keyword\n     ${success} =  Set Anchor To Element    Invoice Number\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    success = pdf.set_anchor_to_element(\"Invoice Number\")\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\finder.py", "shortdoc": "Sets main anchor point in the document for further searches.", "lineno": 238}, {"name": "Set Convert Settings", "args": [{"name": "line_margin", "kind": "POSITIONAL_OR_NAMED", "repr": "line_margin: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "word_margin", "kind": "POSITIONAL_OR_NAMED", "repr": "word_margin: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "char_margin", "kind": "POSITIONAL_OR_NAMED", "repr": "char_margin: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "boxes_flow", "kind": "POSITIONAL_OR_NAMED", "repr": "boxes_flow: float | None = 0.5", "required": true, "defaultValue": "0.5", "types": ["Union"], "typedocs": []}], "doc": "Change settings for PDFMiner document conversion.\n\nline\\_margin controls how textboxes are grouped - if conversion results in\ntexts grouped into one group then set this to lower value\n\nword\\_margin controls how spaces are inserted between words - if conversion\nresults in text without spaces then set this to lower value\n\nchar\\_margin controls how characters are grouped into words - if conversion\nresults in individual characters instead of then set this to higher value\n\nboxes\\_flow controls how much horizontal and vertical position of the text\nmatters when determining the order of text boxes. Value can be between range\nof -1.0 (only horizontal position matters) to +1.0 (only vertical position\nmatters). This feature (advanced layout analysis) can be disabled by setting\nvalue to None thus bottom left corner of the text box is used to determine\norder of the text boxes.\n\nparam line_margin\n\n:   relative margin between bounding lines, default 0.5\n\nparam word_margin\n\n:   relative margin between words, default 0.1\n\nparam char_margin\n\n:   relative margin between characters, default 2.0\n\nparam boxes_flow\n\n:   positioning of the text boxes based on text, default 0.5\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n***Settings***\nLibrary    RPA.PDF\n\n***Tasks***\nExample Keyword\n    Set Convert Settings  line_margin=0.00000001\n    ${texts}=  Get Text From PDF  /tmp/sample.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    pdf.set_convert_settings(boxes_flow=None)\n    texts = pdf.get_text_from_pdf(\"/tmp/sample.pdf\")\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\model.py", "shortdoc": "Change settings for PDFMiner document conversion.", "lineno": 799}, {"name": "Set Field Value", "args": [{"name": "field_name", "kind": "POSITIONAL_OR_NAMED", "repr": "field_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: Any", "required": true, "defaultValue": null, "types": ["Any"], "typedocs": []}, {"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Set value for field with given name on the active document.\n\nTries to match with field's identifier directly or its label. When ticking\ncheckboxes, try with the /Yes string value as simply Yes might not work\nwith most previewing apps.\n\nparam field_name\n\n:   Field to update.\n\nparam value\n\n:   New value for the field.\n\nparam source_path\n\n:   Source PDF file path.\n\nraises ValueError\n\n:   When field can't be found or more than one field matches\n    the given field\\_name.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\nExample Keyword\n    Open PDF    ./tmp/sample.pdf\n    Set Field Value    phone_nr    077123123\n    Save Field Values    output_path=./tmp/output.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef example_keyword():\n    pdf.open_pdf(\"./tmp/sample.pdf\")\n    pdf.set_field_value(\"phone_nr\", \"077123123\")\n    pdf.save_field_values(output_path=\"./tmp/output.pdf\")\n```\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\model.py", "shortdoc": "Set value for field with given name on the active document.", "lineno": 592}, {"name": "Switch To Pdf", "args": [{"name": "source_path", "kind": "POSITIONAL_OR_NAMED", "repr": "source_path: str | Path | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Switch library's current fileobject to already opened file\nor open a new file if not opened.\n\nThis is done automatically in the PDF library keywords.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nJump to another PDF\n    Switch to PDF    /tmp/another.pdf\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\npdf = PDF()\n\ndef jump_to_another_pdf():\n    pdf.switch_to_pdf(\"/tmp/sample.pdf\")\n```\n\nparam source_path\n\n:   filepath to the source pdf.\n\nraises ValueError\n\n:   if PDF filepath is not given and there are no active\n    file to activate.\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Switch library's current fileobject to already opened file or open a new file if not opened.", "lineno": 487}, {"name": "Template Html To Pdf", "args": [{"name": "template", "kind": "POSITIONAL_OR_NAMED", "repr": "template: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "output_path", "kind": "POSITIONAL_OR_NAMED", "repr": "output_path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "variables", "kind": "POSITIONAL_OR_NAMED", "repr": "variables: dict | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding: str = utf-8", "required": true, "defaultValue": "utf-8", "types": ["str"], "typedocs": []}, {"name": "margin", "kind": "POSITIONAL_OR_NAMED", "repr": "margin: float = 0", "required": true, "defaultValue": "0", "types": ["float"], "typedocs": []}, {"name": "working_directory", "kind": "POSITIONAL_OR_NAMED", "repr": "working_directory: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Use HTML template file to generate PDF file.\n\nIt provides an easy method of generating a PDF document from an HTML formatted\ntemplate file.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Keywords ***\nCreate PDF from HTML template\n    ${TEMPLATE}=    Set Variable    order.template\n    ${PDF}=         Set Variable    result.pdf\n    &{DATA}=        Create Dictionary\n    ...             name=Robot Generated\n    ...             email=robot@domain.com\n    ...             zip=00100\n    ...             items=Item 1, Item 2\n    Template HTML to PDF\n    ...    template=${TEMPLATE}\n    ...    output_path=${PDF}\n    ...    variables=${DATA}\n```\n\n**Python**\n\n```python\nfrom RPA.PDF import PDF\n\np = PDF()\norders = [\"item 1\", \"item 2\", \"item 3\"]\ndata = {\n    \"name\": \"Robot Process\",\n    \"email\": \"robot@domain.com\",\n    \"zip\": \"00100\",\n    \"items\": \"<br/>\".join(orders),\n}\np.template_html_to_pdf(\"order.template\", \"order.pdf\", data)\n```\n\nparam template\n\n:   filepath to the HTML template\n\nparam output_path\n\n:   filepath where to save PDF document\n\nparam variables\n\n:   dictionary of variables to fill into template, defaults to {}\n\nparam encoding\n\n:   codec used for text I/O\n\nparam margin\n\n:   page margin, default is set to 0\n\nparam working_directory\n\n:   directory where to look for HTML linked\n    resources, by default uses the current working directory\n", "tags": [], "source": "c:\\users\\gustavo zanotto\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py", "shortdoc": "Use HTML template file to generate PDF file.", "lineno": 198}], "dataTypes": {}, "typedocs": []}
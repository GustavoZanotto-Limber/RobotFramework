mtime:1744200518.7834127
{"name": "RPA.Browser.Selenium", "doc": "SeleniumLibrary is a web testing library for Robot Framework.\n\n\nThis document explains how to use keywords provided by SeleniumLibrary. For information about installation, support, and more, please visit the [project pages](https://github.com/robotframework/SeleniumLibrary). For more information about Robot Framework, see [http://robotframework.org](http://robotframework.org).\n\n\nSeleniumLibrary uses the Selenium WebDriver modules internally to control a web browser. See [http://seleniumhq.org](http://seleniumhq.org) for more information about Selenium in general and SeleniumLibrary README.rst [Browser drivers chapter](https://github.com/robotframework/SeleniumLibrary\\#browser-drivers) for more details about WebDriver binary installation.\n\n\n- `Locating elements`\n- `Browser and Window`\n- `Browser and Driver options and service class`\n- `Timeouts, waits, and delays`\n- `Run-on-failure functionality`\n- `Boolean arguments`\n- `EventFiringWebDriver`\n- `Thread support`\n- `Plugins`\n- `Language`\n- `Auto closing browser`\n- `Importing`\n- `Keywords`\n\n\n## Locating elements\n\nAll keywords in SeleniumLibrary that need to interact with an element on a web page take an argument typically named `locator` that specifies how to find the element. Most often the locator is given as a string using the locator syntax described below, but `using WebElements` is possible too.\n\n\n### Locator syntax\n\nSeleniumLibrary supports finding elements based on different strategies such as the element id, XPath expressions, or CSS selectors. The strategy can either be explicitly specified with a prefix or the strategy can be implicit.\n\n\n#### Default locator strategy\n\nBy default, locators are considered to use the keyword specific default locator strategy. All keywords support finding elements based on `id` and `name` attributes, but some keywords support additional attributes or other values that make sense in their context. For example, `Click Link` supports the `href` attribute and the link text and addition to the normal `id` and `name`.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Click Element` | example | \\# Match based on `id` or `name`. |\n| `Click Link` | example | \\# Match also based on link text and `href`. |\n| `Click Button` | example | \\# Match based on `id`, `name` or `value`. |\n\n\nIf a locator accidentally starts with a prefix recognized as `explicit locator strategy` or `implicit XPath strategy`, it is possible to use the explicit `default` prefix to enable the default strategy.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Click Element` | name:foo | \\# Find element with name `foo`. |\n| `Click Element` | default:name:foo | \\# Use default strategy with value `name:foo`. |\n| `Click Element` | //foo | \\# Find element using XPath `//foo`. |\n| `Click Element` | default: //foo | \\# Use default strategy with value `//foo`. |\n\n\n#### Explicit locator strategy\n\nThe explicit locator strategy is specified with a prefix using either syntax `strategy:value` or `strategy=value`. The former syntax is preferred because the latter is identical to Robot Framework's [named argument syntax](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html\\#named-argument-syntax) and that can cause problems. Spaces around the separator are ignored, so `id:foo`, `id: foo` and `id : foo` are all equivalent.\n\n\nLocator strategies that are supported by default are listed in the table below. In addition to them, it is possible to register `custom locators`.\n\n\n| Strategy | Match based on | Example |\n| :--- | :--- | :--- |\n| id | Element `id`. | `id:example` |\n| name | `name` attribute. | `name:example` |\n| identifier | Either `id` or `name`. | `identifier:example` |\n| class | Element `class`. | `class:example` |\n| tag | Tag name. | `tag:div` |\n| xpath | XPath expression. | `xpath://div[@id=\"example\"]` |\n| css | CSS selector. | `css:div\\#example` |\n| dom | DOM expression. | `dom:document.images[5]` |\n| link | Exact text a link has. | `link:The example` |\n| partial link | Partial link text. | `partial link:he ex` |\n| sizzle | Sizzle selector deprecated. | `sizzle:div.example` |\n| data | Element `data-*` attribute | `data:id:my_id` |\n| jquery | jQuery expression. | `jquery:div.example` |\n| default | Keyword specific default behavior. | `default:example` |\n\n\nSee the `Default locator strategy` section below for more information about how the default strategy works. Using the explicit `default` prefix is only necessary if the locator value itself accidentally matches some of the explicit strategies.\n\n\nDifferent locator strategies have different pros and cons. Using ids, either explicitly like `id:foo` or by using the `default locator strategy` simply like `foo`, is recommended when possible, because the syntax is simple and locating elements by id is fast for browsers. If an element does not have an id or the id is not stable, other solutions need to be used. If an element has a unique tag name or class, using `tag`, `class` or `css` strategy like `tag:h1`, `class:example` or `css:h1.example` is often an easy solution. In more complex cases using XPath expressions is typically the best approach. They are very powerful but a downside is that they can also get complex.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Click Element` | id:foo | \\# Element with id 'foo'. |\n| `Click Element` | css:div\\#foo h1 | \\# h1 element under div with id 'foo'. |\n| `Click Element` | xpath: //div[@id=\"foo\"]//h1 | \\# Same as the above using XPath, not CSS. |\n| `Click Element` | xpath: //*[contains(text(), \"example\")] | \\# Element containing text 'example'. |\n\n\n**NOTE:**\n\n\n- The `strategy:value` syntax is only supported by SeleniumLibrary 3.0 and newer.\n- Using the `sizzle` strategy or its alias `jquery` requires that the system under test contains the jQuery library.\n- Prior to SeleniumLibrary 3.0, table related keywords only supported `xpath`, `css` and `sizzle/jquery` strategies.\n- `data` strategy is conveniance locator that will construct xpath from the parameters. If you have element like `\\<div data-automation=\"automation-id-2\">`, you locate the element via `data:automation:automation-id-2`. This feature was added in SeleniumLibrary 5.2.0\n\n\n#### Implicit XPath strategy\n\nIf the locator starts with `//`  or multiple opening parenthesis in front of the `//`, the locator is considered to be an XPath expression. In other words, using `//div` is equivalent to using explicit `xpath://div` and `((//div))` is equivalent to using explicit `xpath:((//div))`\n\n\nExamples:\n\n\n|  |  |\n| :--- | :--- |\n| `Click Element` | //div[@id=\"foo\"]//h1 |\n| `Click Element` | (//div)[2] |\n\n\nThe support for the `(//` prefix is new in SeleniumLibrary 3.0. Supporting multiple opening parenthesis is new in SeleniumLibrary 5.0.\n\n\n#### Chaining locators\n\nIt is possible chain multiple locators together as single locator. Each chained locator must start with locator strategy. Chained locators must be separated with single space, two greater than characters and followed with space. It is also possible mix different locator strategies, example css or xpath. Also a list can also be used to specify multiple locators. This is useful, is some part of locator would match as the locator separator but it should not. Or if there is need to existing WebElement as locator.\n\n\nAlthough all locators support chaining, some locator strategies do not abey the chaining. This is because some locator strategies use JavaScript to find elements and JavaScript is executed for the whole browser context and not for the element found be the previous locator. Chaining is supported by locator strategies which are based on Selenium API, like `xpath` or `css`, but example chaining is not supported by `sizzle` or `jquery\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Click Element` | css:.bar >> [xpath://a](xpath://a) | \\# To find a link which is present after an element with class \"bar\" |\n\n\nList examples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${locator_list} = | `Create List` | css:div\\#div_id | [xpath://*[text(](xpath://*[text()), \" >> \"] |\n| `Page Should Contain Element` | ${locator_list} |  |  |\n| ${element} = | Get WebElement | [xpath://*[text(](xpath://*[text()), \" >> \"] |  |\n| ${locator_list} = | `Create List` | css:div\\#div_id | ${element} |\n| `Page Should Contain Element` | ${locator_list} |  |  |\n\n\nChaining locators in new in SeleniumLibrary 5.0\n\n\n### Using WebElements\n\nIn addition to specifying a locator as a string, it is possible to use Selenium's WebElement objects. This requires first getting a WebElement, for example, by using the `Get WebElement` keyword.\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${elem} = | `Get WebElement` | id:example |\n| `Click Element` | ${elem} |  |\n\n\n### Custom locators\n\nIf more complex lookups are required than what is provided through the default locators, custom lookup strategies can be created. Using custom locators is a two part process. First, create a keyword that returns a WebElement that should be acted on:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| Custom Locator Strategy | [Arguments] | ${browser} | ${locator} | ${tag} | ${constraints} |\n|  | ${element}= | Execute Javascript | return window.document.getElementById('${locator}'); |  |  |\n|  | RETURN | ${element} |  |  |  |\n\n\nThis keyword is a reimplementation of the basic functionality of the `id` locator where `${browser}` is a reference to a WebDriver instance and `${locator}` is the name of the locator strategy. To use this locator, it must first be registered by using the `Add Location Strategy` keyword:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Add Location Strategy` | custom | Custom Locator Strategy |\n\n\nThe first argument of `Add Location Strategy` specifies the name of the strategy and it must be unique. After registering the strategy, the usage is the same as with other locators:\n\n\n|  |  |\n| :--- | :--- |\n| `Click Element` | custom:example |\n\n\nSee the `Add Location Strategy` keyword for more details.\n\n\n## Browser and Window\n\nThere is different conceptual meaning when SeleniumLibrary talks about windows or browsers. This chapter explains those differences.\n\n\n### Browser\n\nWhen `Open Browser` or `Create WebDriver` keyword is called, it will create a new Selenium WebDriver instance by using the [Selenium WebDriver](https://www.seleniumhq.org/docs/03_webdriver.jsp) API. In SeleniumLibrary terms, a new browser is created. It is possible to start multiple independent browsers (Selenium Webdriver instances) at the same time, by calling `Open Browser` or `Create WebDriver` multiple times. These browsers are usually independent of each other and do not share data like cookies, sessions or profiles. Typically when the browser starts, it creates a single window which is shown to the user.\n\n\n### Window\n\nWindows are the part of a browser that loads the web site and presents it to the user. All content of the site is the content of the window. Windows are children of a browser. In SeleniumLibrary browser is a synonym for WebDriver instance. One browser may have multiple windows. Windows can appear as tabs, as separate windows or pop-ups with different position and size. Windows belonging to the same browser typically share the sessions detail, like cookies. If there is a need to separate sessions detail, example login with two different users, two browsers (Selenium WebDriver instances) must be created. New windows can be opened example by the application under test or by example `Execute Javascript` keyword:\n\n\n```text\n`Execute Javascript`    window.open()    # Opens a new window with location about:blank\n```\n\nThe example below opens multiple browsers and windows, to demonstrate how the different keywords can be used to interact with browsers, and windows attached to these browsers.\n\n\nStructure:\n\n\n```text\nBrowserA\n           Window 1  (location=https://robotframework.org/)\n           Window 2  (location=https://robocon.io/)\n           Window 3  (location=https://github.com/robotframework/)\n\nBrowserB\n           Window 1  (location=https://github.com/)\n```\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Open Browser` | [https://robotframework.org](https://robotframework.org) | ${BROWSER} | alias=BrowserA | \\# BrowserA with first window is opened. |\n| `Execute Javascript` | window.open() |  |  | \\# In BrowserA second window is opened. |\n| `Switch Window` | locator=NEW |  |  | \\# Switched to second window in BrowserA |\n| `Go To` | [https://robocon.io](https://robocon.io) |  |  | \\# Second window navigates to robocon site. |\n| `Execute Javascript` | window.open() |  |  | \\# In BrowserA third window is opened. |\n| ${handle} | `Switch Window` | locator=NEW |  | \\# Switched to third window in BrowserA |\n| `Go To` | [https://github.com/robotframework/](https://github.com/robotframework/) |  |  | \\# Third windows goes to robot framework github site. |\n| `Open Browser` | [https://github.com](https://github.com) | ${BROWSER} | alias=BrowserB | \\# BrowserB with first windows is opened. |\n| ${location} | `Get Location` |  |  | \\# ${location} is: [https://www.github.com](https://www.github.com) |\n| `Switch Window` | ${handle} | browser=BrowserA |  | \\# BrowserA second windows is selected. |\n| ${location} | `Get Location` |  |  | \\# ${location} = [https://robocon.io/](https://robocon.io/) |\n| @{locations 1} | `Get Locations` |  |  | \\# By default, lists locations under the currectly active browser (BrowserA). |\n| @{locations 2} | `Get Locations` | browser=ALL |  | \\# By using browser=ALL argument keyword list all locations from all browsers. |\n\n\nThe above example, @{locations 1} contains the following items: [https://robotframework.org/](https://robotframework.org/), [https://robocon.io/](https://robocon.io/) and [https://github.com/robotframework/](https://github.com/robotframework/)'. The @{locations 2} contains the following items: [https://robotframework.org/](https://robotframework.org/), [https://robocon.io/](https://robocon.io/), [https://github.com/robotframework/](https://github.com/robotframework/)' and '[https://github.com/](https://github.com/).\n\n\n## Browser and Driver options and service class\n\nThis section talks about how to configure either the browser or the driver using the options and service arguments of the `Open Browser` keyword.\n\n\n### Configuring the browser using the Selenium Options\n\nAs noted within the keyword documentation for `Open Browser`, its `options` argument accepts Selenium options in two different formats: as a string and as Python object which is an instance of the Selenium options class.\n\n\n#### Options string format\n\nThe string format allows defining Selenium options methods or attributes and their arguments in Robot Framework test data. The method and attributes names are case and space sensitive and must match to the Selenium options methods and attributes names. When defining a method, it must be defined in a similar way as in python: method name, opening parenthesis, zero to many arguments and closing parenthesis. If there is a need to define multiple arguments for a single method, arguments must be separated with comma, just like in Python. Example: `add_argument(\"--headless\")` or `add_experimental_option(\"key\", \"value\")`. Attributes are defined in a similar way as in Python: attribute name, equal sign, and attribute value. Example, `headless=True`. Multiple methods and attributes must be separated by a semicolon. Example: `add_argument(\"--headless\");add_argument(\"--start-maximized\")`.\n\n\nArguments allow defining Python data types and arguments are evaluated by using Python [ast.literal_eval](https://docs.python.org/3/library/ast.html\\#ast.literal_eval). Strings must be quoted with single or double quotes, example \"value\" or 'value'. It is also possible to define other Python builtin data types, example `True` or `None`, by not using quotes around the arguments.\n\n\nThe string format is space friendly. Usually, spaces do not alter the defining methods or attributes. There are two exceptions. In some Robot Framework test data formats, two or more spaces are considered as cell separator and instead of defining a single argument, two or more arguments may be defined. Spaces in string arguments are not removed and are left as is. Example `add_argument ( \"--headless\" )` is same as `add_argument(\"--headless\")`. But `add_argument(\" --headless \")` is not same same as `add_argument ( \"--headless\" )`, because spaces inside of quotes are not removed. Please note that if options string contains backslash, example a Windows OS path, the backslash needs escaping both in Robot Framework data and in Python side. This means single backslash must be writen using four backslash characters. Example, Windows path: \"C:\\path\\to\\profile\" must be written as \"C:\\\\\\\\path\\\\\\to\\\\\\\\profile\". Another way to write backslash is use Python [raw strings](https://docs.python.org/3/reference/lexical_analysis.html\\#string-and-bytes-literals) and example write: r\"C:\\\\path\\\\to\\\\profile\".\n\n\n#### Selenium Options as Python class\n\nAs last format, `options` argument also supports receiving the Selenium options as Python class instance. In this case, the instance is used as-is and the SeleniumLibrary will not convert the instance to other formats. For example, if the following code return value is saved to `${options}` variable in the Robot Framework data:\n\n\n```text\noptions = webdriver.ChromeOptions()\noptions.add_argument('--disable-dev-shm-usage')\nreturn options\n```\n\nThen the `${options}` variable can be used as an argument to `options`.\n\n\nExample the `options` argument can be used to launch Chomium-based applications which utilize the [Chromium Embedded Framework](https://bitbucket.org/chromiumembedded/cef/wiki/UsingChromeDriver) . To launch Chromium-based application, use `options` to define `binary_location` attribute and use `add_argument` method to define `remote-debugging-port` port for the application. Once the browser is opened, the test can interact with the embedded web-content of the system under test.\n\n\n### Configuring the driver using the Service class\n\nWith the `service` argument, one can setup and configure the driver. For example one can set the driver location and/port or specify the command line arguments. There are several browser specific attributes related to logging as well. For the various Service Class attributes refer to [the Selenium documentation](https://www.selenium.dev/documentation/webdriver/drivers/service/) . Currently the `service` argument only accepts Selenium service in the string format.\n\n\n#### Service string format\n\nThe string format allows for defining Selenium service attributes and their values in the `Open Browser` keyword. The attributes names are case and space sensitive and must match to the Selenium attributes names. Attributes are defined in a similar way as in Python: attribute name, equal sign, and attribute value. Example, `port=1234`. Multiple attributes must be separated by a semicolon. Example: `executable_path='/path/to/driver';port=1234`. Don't have duplicate attributes, like `service_args=['--append-log', '--readable-timestamp']; service_args=['--log-level=DEBUG']` as the second will override the first. Instead combine them as in `service_args=['--append-log', '--readable-timestamp', '--log-level=DEBUG']`\n\n\nArguments allow defining Python data types and arguments are evaluated by using Python. Strings must be quoted with single or double quotes, example \"value\" or 'value'\n\n\n## Timeouts, waits, and delays\n\nThis section discusses different ways how to wait for elements to appear on web pages and to slow down execution speed otherwise. It also explains the `time format` that can be used when setting various timeouts, waits, and delays.\n\n\n### Timeout\n\nSeleniumLibrary contains various keywords that have an optional `timeout` argument that specifies how long these keywords should wait for certain events or actions. These keywords include, for example, `Wait ...` keywords and keywords related to alerts. Additionally `Execute Async Javascript`. Although it does not have `timeout`, argument, uses a timeout to define how long asynchronous JavaScript can run.\n\n\nThe default timeout these keywords use can be set globally either by using the `Set Selenium Timeout` keyword or with the `timeout` argument when `importing` the library. If no default timeout is set globally, the default is 5 seconds. If None is specified for the timeout argument in the keywords, the default is used. See `time format` below for supported timeout syntax.\n\n\n### Implicit wait\n\nImplicit wait specifies the maximum time how long Selenium waits when searching for elements. It can be set by using the `Set Selenium Implicit Wait` keyword or with the `implicit_wait` argument when `importing` the library. See [Selenium documentation](https://www.seleniumhq.org/docs/04_webdriver_advanced.jsp) for more information about this functionality.\n\n\nSee `time format` below for supported syntax.\n\n\n### Page load\n\nPage load timeout is the amount of time to wait for page load to complete until a timeout exception is raised.\n\n\nThe default page load timeout can be set globally when `importing` the library with the `page_load_timeout` argument or by using the `Set Selenium Page Load Timeout` keyword.\n\n\nSee `time format` below for supported timeout syntax.\n\n\nSupport for page load is new in SeleniumLibrary 6.1\n\n\n### Selenium speed\n\nSelenium execution speed can be slowed down globally by using `Set Selenium speed` keyword. This functionality is designed to be used for demonstrating or debugging purposes. Using it to make sure that elements appear on a page is not a good idea. The above-explained timeouts and waits should be used instead.\n\n\nSee `time format` below for supported syntax.\n\n\n### Time format\n\nAll timeouts and waits can be given as numbers considered seconds (e.g. `0.5` or `42`) or in Robot Framework's time syntax (e.g. `1.5 seconds` or `1 min 30 s`). For more information about the time syntax see the [Robot Framework User Guide](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html\\#time-format).\n\n\n## Run-on-failure functionality\n\nSeleniumLibrary has a handy feature that it can automatically execute a keyword if any of its own keywords fails. By default, it uses the `Capture Page Screenshot` keyword, but this can be changed either by using the `Register Keyword To Run On Failure` keyword or with the `run_on_failure` argument when `importing` the library. It is possible to use any keyword from any imported library or resource file.\n\n\nThe run-on-failure functionality can be disabled by using a special value `NOTHING` or anything considered false (see `Boolean arguments`) such as `NONE`.\n\n\n## Boolean arguments\n\nStarting from 5.0 SeleniumLibrary relies on Robot Framework to perform the boolean conversion based on keyword arguments [type hint](https://docs.python.org/3/library/typing.html). More details in Robot Framework [user guide](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html\\#supported-conversions)\n\n\nPlease note SeleniumLibrary 3 and 4 did have own custom methods to covert arguments to boolean values.\n\n\n## EventFiringWebDriver\n\nThe SeleniumLibrary offers support for [EventFiringWebDriver](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html\\#module-selenium.webdriver.support.event_firing_webdriver). See the Selenium and SeleniumLibrary [EventFiringWebDriver support](https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst\\#EventFiringWebDriver) documentation for further details.\n\n\nEventFiringWebDriver is new in SeleniumLibrary 4.0\n\n\n## Thread support\n\nSeleniumLibrary is not thread-safe. This is mainly due because the underlying [Selenium tool is not thread-safe](https://github.com/SeleniumHQ/selenium/wiki/Frequently-Asked-Questions\\#q-is-webdriver-thread-safe) within one browser/driver instance. Because of the limitation in the Selenium side, the keywords or the API provided by the SeleniumLibrary is not thread-safe.\n\n\n## Plugins\n\nSeleniumLibrary offers plugins as a way to modify and add library keywords and modify some of the internal functionality without creating a new library or hacking the source code. See [plugin API](https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst\\#Plugins) documentation for further details.\n\n\nPlugin API is new SeleniumLibrary 4.0\n\n\n## Language\n\nSeleniumLibrary offers the possibility to translate keyword names and documentation to new language. If language is defined, SeleniumLibrary will search from [module search path](https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html\\#module-search-path) for Python packages starting with `robotframework-seleniumlibrary-translation` by using the [Python pluging API](https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/). The Library is using naming convention to find Python plugins.\n\n\nThe package must implement a single API call, `get_language` without any arguments. The method must return a dictionary containing two keys: `language` and `path`. The language key value defines which language the package contains. Also the value should match (case insensitive) the library `language` import parameter. The path parameter value should be full path to the translation file.\n\n\n### Translation file\n\nThe file name or extension is not important, but data must be in [json](https://www.json.org/json-en.html) format. The keys of json are the methods names, not the keyword names, which implements keywords. Value of key is json object which contains two keys: `name` and `doc`. The `name` key contains the keyword translated name and `doc` contains translated documentation. Providing doc and name are optional, example translation json file can only provide translations to keyword names or only to documentation. But it is always recommended to provide translation to both name and doc. Special key `__intro__` is for class level documentation and `__init__` is for init level documentation. These special values `name` can not be translated, instead `name` should be kept the same.\n\n\n### Generating template translation file\n\nTemplate translation file, with English language can be created by running: `rfselib translation /path/to/translation.json` command. Command does not provide translations to other languages, it only provides easy way to create full list keywords and their documentation in correct format. It is also possible to add keywords from library plugins by providing `--plugins` arguments to command. Example: `rfselib translation --plugins myplugin.SomePlugin /path/to/translation.json` The generated json file contains `sha256` key, which contains the sha256 sum of the library documentation. The sha256 sum is used by `rfselib translation --compare /path/to/translation.json` command, which compares the translation to the library and prints outs a table which tells if there are changes needed for the translation file.\n\n\nExample project for translation can be found from [robotframework-seleniumlibrary-translation-fi](https://github.com/MarketSquare/robotframework-seleniumlibrary-translation-fi) repository.\n\n\n## Auto closing browser\n\nBy default, the browser instances created during a task execution are closed at the end of the task. This can be prevented with the `auto_close` parameter when **importing** the library.\n\n\nThe value of the parameter needs to be set to `False` or any object evaluated as false (see `Boolean arguments`).\n\n", "version": "6.7.1", "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Browser\\Selenium.py", "lineno": 195, "tags": [], "inits": [{"name": "__init__", "args": [{"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "&kwargs", "kind": "VAR_NAMED", "repr": "**kwargs", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "SeleniumLibrary can be imported with several optional arguments.\n\n\n- `timeout`: Default value for `timeouts` used with `Wait ...` keywords.\n- `implicit_wait`: Default value for `implicit wait` used when locating elements.\n- `run_on_failure`: Default action for the `run-on-failure functionality`.\n- `screenshot_root_directory`: Path to folder where possible screenshots are created or EMBED. See `Set Screenshot Directory` keyword for further details about EMBED. If not given, the directory where the log file is written is used.\n- `plugins`: Allows extending the SeleniumLibrary with external Python classes.\n- `event_firing_webdriver`: Class for wrapping Selenium with [EventFiringWebDriver](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html\\#module-selenium.webdriver.support.event_firing_webdriver)\n- `page_load_timeout`: Default value to wait for page load to complete until a timeout exception is raised.\n- `action_chain_delay`: Default value for `ActionChains` delay to wait in between actions.\n- `language`: Defines language which is used to translate keyword names and documentation.\n\n", "tags": [], "source": null, "shortdoc": "SeleniumLibrary can be imported with several optional arguments.", "lineno": 243}], "keywords": [{"name": "Add Cookie", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "domain", "kind": "POSITIONAL_OR_NAMED", "repr": "domain: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "secure", "kind": "POSITIONAL_OR_NAMED", "repr": "secure: bool | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "expiry", "kind": "POSITIONAL_OR_NAMED", "repr": "expiry: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Adds a cookie to your current session.\n\n\n`name` and `value` are required, `path`, `domain`, `secure` and `expiry` are optional.  Expiry supports the same formats as the [DateTime](http://robotframework.org/robotframework/latest/libraries/DateTime.html) library or an epoch timestamp.\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Add Cookie` | foo | bar |  |  |\n| `Add Cookie` | foo | bar | domain=example.com |  |\n| `Add Cookie` | foo | bar | expiry=2027-09-28 16:21:35 | \\# Expiry as timestamp. |\n| `Add Cookie` | foo | bar | expiry=1822137695 | \\# Expiry as epoch seconds. |\n\n\nPrior to SeleniumLibrary 3.0 setting expiry did not work.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py", "shortdoc": "Adds a cookie to your current session.", "lineno": 143}, {"name": "Add Location Strategy", "args": [{"name": "strategy_name", "kind": "POSITIONAL_OR_NAMED", "repr": "strategy_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "strategy_keyword", "kind": "POSITIONAL_OR_NAMED", "repr": "strategy_keyword: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "persist", "kind": "POSITIONAL_OR_NAMED", "repr": "persist: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Adds a custom location strategy.\n\n\nSee `Custom locators` for information on how to create and use custom strategies. `Remove Location Strategy` can be used to remove a registered strategy.\n\n\nLocation strategies are automatically removed after leaving the current scope by default. Setting `persist` to a true value (see `Boolean arguments`) will cause the location strategy to stay registered throughout the life of the test.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Adds a custom location strategy.", "lineno": 1148}, {"name": "Alert Should Be Present", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str = ", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "action", "kind": "POSITIONAL_OR_NAMED", "repr": "action: str = ACCEPT", "required": true, "defaultValue": "ACCEPT", "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Verifies that an alert is present and by default, accepts it.\n\n\nFails if no alert is present. If `text` is a non-empty string, then it is used to verify alert's message. The alert is accepted by default, but that behavior can be controlled by using the `action` argument same way as with `Handle Alert`.\n\n\n`timeout` specifies how long to wait for the alert to appear. If it is not given, the global default `timeout` is used instead.\n\n\n`action` and `timeout` arguments are new in SeleniumLibrary 3.0. In earlier versions, the alert was always accepted and a timeout was hardcoded to one second.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py", "shortdoc": "Verifies that an alert is present and by default, accepts it.", "lineno": 52}, {"name": "Alert Should Not Be Present", "args": [{"name": "action", "kind": "POSITIONAL_OR_NAMED", "repr": "action: str = ACCEPT", "required": true, "defaultValue": "ACCEPT", "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Verifies that no alert is present.\n\n\nIf the alert actually exists, the `action` argument determines how it should be handled. By default, the alert is accepted, but it can be also dismissed or left open the same way as with the `Handle Alert` keyword.\n\n\n`timeout` specifies how long to wait for the alert to appear. By default, is not waited for the alert at all, but a custom time can be given if alert may be delayed. See the `time format` section for information about the syntax.\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py", "shortdoc": "Verifies that no alert is present.", "lineno": 79}, {"name": "Assign Id To Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "id", "kind": "POSITIONAL_OR_NAMED", "repr": "id: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Assigns a temporary `id` to the element specified by `locator`.\n\n\nThis is mainly useful if the locator is complicated and/or slow XPath expression and it is needed multiple times. Identifier expires when the page is reloaded.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Assign ID to Element` | //ul[@class='example' and ./li[contains(., 'Stuff')]] | my id |\n| `Page Should Contain Element` | my id |  |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Assigns a temporary `id` to the element specified by `locator`.", "lineno": 227}, {"name": "Attach Chrome Browser", "args": [{"name": "port", "kind": "POSITIONAL_OR_NAMED", "repr": "port: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "alias", "kind": "POSITIONAL_OR_NAMED", "repr": "alias: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Attach to an existing instance of Chrome browser.\n\n\nRequires that the browser was started with the command line option `--remote-debugging-port=\\<port>`, where port is any 4-digit number not being used by other applications.\n\n\n**Note.** The first Chrome instance on the system needs to be started with this command line option or this won't have an effect.\n\n\nThat port can then be used to connect using this keyword.\n\n\nExample:\n\n\n|  |  |\n| :--- | :--- |\n| Attach Chrome Browser | port=9222 |\n\n", "tags": [], "source": null, "shortdoc": "Attach to an existing instance of Chrome browser.", "lineno": 1091}, {"name": "Capture Element Screenshot", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "filename", "kind": "POSITIONAL_OR_NAMED", "repr": "filename: str = selenium-element-screenshot-{index}.png", "required": true, "defaultValue": "selenium-element-screenshot-{index}.png", "types": ["str"], "typedocs": []}], "doc": "Captures a screenshot from the element identified by `locator` and embeds it into log file.\n\n\nSee `Capture Page Screenshot` for details about `filename` argument. See the `Locating elements` section for details about the locator syntax.\n\n\nAn absolute path to the created element screenshot is returned.\n\n\nSupport for capturing the screenshot from an element has limited support among browser vendors. Please check the browser vendor driver documentation does the browser support capturing a screenshot from an element.\n\n\nNew in SeleniumLibrary 3.3. Support for EMBED is new in SeleniumLibrary 4.2.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Capture Element Screenshot` | id:image_id |  |\n| `Capture Element Screenshot` | id:image_id | ${OUTPUTDIR}/id_image_id-1.png |\n| `Capture Element Screenshot` | id:image_id | EMBED |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py", "shortdoc": "Captures a screenshot from the element identified by `locator` and embeds it into log file.", "lineno": 132}, {"name": "Capture Page Screenshot", "args": [{"name": "filename", "kind": "POSITIONAL_OR_NAMED", "repr": "filename: str = selenium-screenshot-{index}.png", "required": true, "defaultValue": "selenium-screenshot-{index}.png", "types": ["str"], "typedocs": []}], "doc": "Takes a screenshot of the current page and embeds it into a log file.\n\n\n`filename` argument specifies the name of the file to write the screenshot into. The directory where screenshots are saved can be set when `importing` the library or by using the `Set Screenshot Directory` keyword. If the directory is not configured, screenshots are saved to the same directory where Robot Framework's log file is written.\n\n\nIf `filename` equals to EMBED (case insensitive), then screenshot is embedded as Base64 image to the log.html. In this case file is not created in the filesystem.\n\n\nStarting from SeleniumLibrary 1.8, if `filename` contains marker `{index}`, it will be automatically replaced with an unique running index, preventing files to be overwritten. Indices start from 1, and how they are represented can be customized using Python's [format string syntax](https://docs.python.org/3/library/string.html\\#format-string-syntax).\n\n\nAn absolute path to the created screenshot file is returned or if `filename`  equals to EMBED, word `EMBED` is returned.\n\n\nSupport for EMBED is new in SeleniumLibrary 4.2\n\n\nExamples:\n\n\n|  |  |\n| :--- | :--- |\n| `Capture Page Screenshot` |  |\n| `File Should Exist` | ${OUTPUTDIR}/selenium-screenshot-1.png |\n| ${path} = | `Capture Page Screenshot` |\n| `File Should Exist` | ${OUTPUTDIR}/selenium-screenshot-2.png |\n| `File Should Exist` | ${path} |\n| `Capture Page Screenshot` | custom_name.png |\n| `File Should Exist` | ${OUTPUTDIR}/custom_name.png |\n| `Capture Page Screenshot` | custom_with_index_{index}.png |\n| `File Should Exist` | ${OUTPUTDIR}/custom_with_index_1.png |\n| `Capture Page Screenshot` | formatted_index_{index:03}.png |\n| `File Should Exist` | ${OUTPUTDIR}/formatted_index_001.png |\n| `Capture Page Screenshot` | EMBED |\n| `File Should Not Exist` | EMBED |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py", "shortdoc": "Takes a screenshot of the current page and embeds it into a log file.", "lineno": 70}, {"name": "Checkbox Should Be Selected", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Verifies checkbox `locator` is selected/checked.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies checkbox `locator` is selected/checked.", "lineno": 44}, {"name": "Checkbox Should Not Be Selected", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Verifies checkbox `locator` is not selected/checked.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies checkbox `locator` is not selected/checked.", "lineno": 58}, {"name": "Choose File", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "file_path", "kind": "POSITIONAL_OR_NAMED", "repr": "file_path: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Inputs the `file_path` into the file input field `locator`.\n\n\nThis keyword is most often used to input files into upload forms. The keyword does not check `file_path` is the file or folder available on the machine where tests are executed. If the `file_path` points at a file and when using Selenium Grid, Selenium will [magically](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload\\#selenium.webdriver.remote.command.Command.UPLOAD_FILE), transfer the file from the machine where the tests are executed to the Selenium Grid node where the browser is running. Then Selenium will send the file path, from the nodes file system, to the browser.\n\n\nThat `file_path` is not checked, is new in SeleniumLibrary 4.0.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Choose File` | my_upload_field | ${CURDIR}/trades.csv |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Inputs the `file_path` into the file input field `locator`.", "lineno": 216}, {"name": "Clear All Highlights", "args": [], "doc": "Remove all highlighting made by `Highlight Elements`.\n\n", "tags": [], "source": null, "shortdoc": "Remove all highlighting made by `Highlight Elements`.", "lineno": 2108}, {"name": "Clear Element Text", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Clears the value of the text-input-element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Clears the value of the text-input-element identified by `locator`.", "lineno": 561}, {"name": "Click Button", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "modifier", "kind": "POSITIONAL_OR_NAMED", "repr": "modifier: bool | str = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}], "doc": "Clicks the button identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, buttons are searched using `id`, `name`, and `value`.\n\n\nSee the `Click Element` keyword for details about the `modifier` argument.\n\n\nThe `modifier` argument is new in SeleniumLibrary 3.3\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Clicks the button identified by `locator`.", "lineno": 584}, {"name": "Click Button When Visible", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "modifier", "kind": "POSITIONAL_OR_NAMED", "repr": "modifier: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Click button identified by `locator`, once it becomes visible.\n\n\n`locator` element locator\n\n\n`modifier` press given keys while clicking the element, e.g. CTRL\n\n\nExample:\n\n\n|  |  |\n| :--- | :--- |\n| Click Button When Visible | //button[@class=\"mybutton\"] |\n\n", "tags": [], "source": null, "shortdoc": "Click button identified by `locator`, once it becomes visible.", "lineno": 1211}, {"name": "Click Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "modifier", "kind": "POSITIONAL_OR_NAMED", "repr": "modifier: bool | str = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "action_chain", "kind": "POSITIONAL_OR_NAMED", "repr": "action_chain: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Click the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `modifier` argument can be used to pass [Selenium Keys](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html\\#selenium.webdriver.common.keys.Keys) when clicking the element. The `+` can be used as a separator for different Selenium Keys. The `CTRL` is internally translated to the `CONTROL` key. The `modifier` is space and case insensitive, example \"alt\" and \" aLt \" are supported formats to [ALT key](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html\\#selenium.webdriver.common.keys.Keys.ALT) . If `modifier` does not match to Selenium Keys, keyword fails.\n\n\nIf `action_chain` argument is true, see `Boolean arguments` for more details on how to set boolean argument, then keyword uses ActionChain based click instead of the \\<web_element>.click() function. If both `action_chain` and `modifier` are defined, the click will be performed using `modifier` and `action_chain` will be ignored.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Click Element | id:button |  | \\# Would click element without any modifiers. |\n| Click Element | id:button | CTRL | \\# Would click element with CTLR key pressed down. |\n| Click Element | id:button | CTRL+ALT | \\# Would click element with CTLR and ALT keys pressed down. |\n| Click Element | id:button | action_chain=True | \\# Clicks the button using an Selenium  ActionChains |\n\n\nThe `modifier` argument is new in SeleniumLibrary 3.2 The `action_chain` argument is new in SeleniumLibrary 4.1\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Click the element identified by `locator`.", "lineno": 654}, {"name": "Click Element At Coordinates", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "xoffset", "kind": "POSITIONAL_OR_NAMED", "repr": "xoffset: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "yoffset", "kind": "POSITIONAL_OR_NAMED", "repr": "yoffset: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}], "doc": "Click the element `locator` at `xoffset/yoffset`.\n\n\nThe Cursor is moved and the center of the element and x/y coordinates are calculated from that point.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Click the element `locator` at `xoffset/yoffset`.", "lineno": 722}, {"name": "Click Element If Visible", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Click element if it is visible\n\n\n`locator` element locator\n\n\nExample:\n\n\n|  |  |\n| :--- | :--- |\n| Click Element If Visible | //button[@class=\"mybutton\"] |\n\n", "tags": [], "source": null, "shortdoc": "Click element if it is visible", "lineno": 1231}, {"name": "Click Element When Clickable", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: str | int | timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits for and clicks an element until is fully ready to be clicked.\n\n\nIf a normal click doesn't work, then JavaScript-oriented workarounds are tried as a fallback mechanism.\n\n\nParameter `locator` targets the element to be clicked. Parameter `timeout` optionally configures a custom duration to wait for the element to become clickable, until it gives up.\n\n\nExample:\n\n\n|  |  |\n| :--- | :--- |\n| Click Element When Clickable | example |\n\n", "tags": [], "source": null, "shortdoc": "Waits for and clicks an element until is fully ready to be clicked.", "lineno": 2233}, {"name": "Click Element When Visible", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "modifier", "kind": "POSITIONAL_OR_NAMED", "repr": "modifier: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "action_chain", "kind": "POSITIONAL_OR_NAMED", "repr": "action_chain: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Click element identified by `locator`, once it becomes visible.\n\n\n`locator` element locator\n\n\n`modifier` press given keys while clicking the element, e.g. CTRL\n\n\n`action_chain` store action in Selenium ActionChain queue\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Click Element When Visible | q |  |\n| Click Element When Visible | id:button | CTRL+ALT |\n| Click Element When Visible | action_chain=True |  |\n\n", "tags": [], "source": null, "shortdoc": "Click element identified by `locator`, once it becomes visible.", "lineno": 1187}, {"name": "Click Image", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "modifier", "kind": "POSITIONAL_OR_NAMED", "repr": "modifier: bool | str = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}], "doc": "Clicks an image identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\n\nSee the `Click Element` keyword for details about the `modifier` argument.\n\n\nThe `modifier` argument is new in SeleniumLibrary 3.3\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Clicks an image identified by `locator`.", "lineno": 608}, {"name": "Click Link", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "modifier", "kind": "POSITIONAL_OR_NAMED", "repr": "modifier: bool | str = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}], "doc": "Clicks a link identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\n\nSee the `Click Element` keyword for details about the `modifier` argument.\n\n\nThe `modifier` argument is new in SeleniumLibrary 3.3\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Clicks a link identified by `locator`.", "lineno": 633}, {"name": "Close All Browsers", "args": [], "doc": "Closes all open browsers and resets the browser cache.\n\n\nAfter this keyword, new indexes returned from `Open Browser` keyword are reset to 1.\n\n\nThis keyword should be used in test or suite teardown to make sure all browsers are closed.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Closes all open browsers and resets the browser cache.", "lineno": 40}, {"name": "Close Browser", "args": [], "doc": "Closes the current browser.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Closes the current browser.", "lineno": 53}, {"name": "Close Window", "args": [], "doc": "Closes currently opened and selected browser window/tab.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Closes currently opened and selected browser window/tab.", "lineno": 125}, {"name": "Cover Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Will cover elements identified by `locator` with a blue div without breaking page layout.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nNew in SeleniumLibrary 3.3.0\n\n\nExample: |`Cover Element` | css:div\\#container |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Will cover elements identified by `locator` with a blue div without breaking page layout.", "lineno": 511}, {"name": "Create Webdriver", "args": [{"name": "driver_name", "kind": "POSITIONAL_OR_NAMED", "repr": "driver_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "alias", "kind": "POSITIONAL_OR_NAMED", "repr": "alias: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "kwargs", "kind": "POSITIONAL_OR_NAMED", "repr": "kwargs: dict | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "&init_kwargs", "kind": "VAR_NAMED", "repr": "**init_kwargs", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Creates an instance of Selenium WebDriver.\n\n\nLike `Open Browser`, but allows passing arguments to the created WebDriver instance directly. This keyword should only be used if the functionality provided by `Open Browser` is not adequate.\n\n\n`driver_name` must be a WebDriver implementation name like Firefox, Chrome, Ie, Edge, Safari, or Remote.\n\n\nThe initialized WebDriver can be configured either with a Python dictionary `kwargs` or by using keyword arguments `**init_kwargs`. These arguments are passed directly to WebDriver without any processing. See [Selenium API documentation](https://seleniumhq.github.io/selenium/docs/api/py/api.html) for details about the supported arguments.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| \\# Use proxy with Firefox |  |  |  |\n| ${proxy}= | `Evaluate` | selenium.webdriver.Proxy() | modules=selenium, selenium.webdriver |\n| ${proxy.http_proxy}= | `Set Variable` | localhost:8888 |  |\n| `Create Webdriver` | Firefox | proxy=${proxy} |  |\n\n\nReturns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when `Close All Browsers` keyword is used. See `Switch Browser` for an example.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Creates an instance of Selenium WebDriver.", "lineno": 277}, {"name": "Current Frame Should Contain", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies that the current frame contains `text`.\n\n\nSee `Page Should Contain` for an explanation about the `loglevel` argument.\n\n\nPrior to SeleniumLibrary 3.0 this keyword was named `Current Frame Contains`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py", "shortdoc": "Verifies that the current frame contains `text`.", "lineno": 53}, {"name": "Current Frame Should Not Contain", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies that the current frame does not contain `text`.\n\n\nSee `Page Should Contain` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py", "shortdoc": "Verifies that the current frame does not contain `text`.", "lineno": 70}, {"name": "Delete All Cookies", "args": [], "doc": "Deletes all cookies.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py", "shortdoc": "Deletes all cookies.", "lineno": 57}, {"name": "Delete Cookie", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Deletes the cookie matching `name`.\n\n\nIf the cookie is not found, nothing happens.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py", "shortdoc": "Deletes the cookie matching `name`.", "lineno": 62}, {"name": "Does Alert Contain", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: str | int | timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Does alert contain text.\n\n\n`text` check if alert includes text, will raise ValueError is text does not exist\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Does Alert Contain | alert message |\n\n", "tags": [], "source": null, "shortdoc": "Does alert contain text.", "lineno": 1373}, {"name": "Does Alert Not Contain", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: str | int | timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Does alert not contain text.\n\n\n`text` check that alert does not include text, will raise ValueError if text does exist\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Does Alert Not Contain | unexpected message |\n\n", "tags": [], "source": null, "shortdoc": "Does alert not contain text.", "lineno": 1392}, {"name": "Does Element Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Does element contain expected text\n\n\n`locator` element locator\n\n\n`expected` expected element text\n\n\n`ignore_case` should check be case insensitive, default `False`\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| ${res} | Does Element Contain | id:spec | specification complete | ignore_case=True |\n\n", "tags": [], "source": null, "shortdoc": "Does element contain expected text", "lineno": 1444}, {"name": "Does Frame Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Does frame contain expected text\n\n\n`locator` locator of the frame to check\n\n\n`text` does frame contain this text\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${res} | Does Frame Contain | id:myframe | secret |\n\n", "tags": [], "source": null, "shortdoc": "Does frame contain expected text", "lineno": 1428}, {"name": "Does Location Contain", "args": [{"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Does current URL contain expected\n\n\n`expected` URL should contain this\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Open Available Browser | [https://robocorp.com](https://robocorp.com) |  |\n| ${res} | Does Location Contain | robocorp |\n\n", "tags": [], "source": null, "shortdoc": "Does current URL contain expected", "lineno": 1536}, {"name": "Does Page Contain", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Does page contain expected text\n\n\n`text` page should contain this\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Open Available Browser | [https://google.com](https://google.com) |  |\n| ${res} | Does Page Contain | Gmail |\n\n", "tags": [], "source": null, "shortdoc": "Does page contain expected text", "lineno": 1551}, {"name": "Does Page Contain Button", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Does page contain expected button\n\n\n`locator` element locator\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Does Page Contain Button | search-button |\n\n", "tags": [], "source": null, "shortdoc": "Does page contain expected button", "lineno": 1566}, {"name": "Does Page Contain Checkbox", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Does page contain expected checkbox\n\n\n`locator` element locator\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Does Page Contain Checkbox | random-selection |\n\n", "tags": [], "source": null, "shortdoc": "Does page contain expected checkbox", "lineno": 1580}, {"name": "Does Page Contain Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "count", "kind": "POSITIONAL_OR_NAMED", "repr": "count: int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Does page contain expected element\n\n\n`locator` element locator\n\n\n`count` how many times element is expected to appear on page by default one or more\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${res} | Does Page Contain Element | textarea |  |\n| ${res} | Does Page Contain Element | button | count=4 |\n\n", "tags": [], "source": null, "shortdoc": "Does page contain expected element", "lineno": 1594}, {"name": "Does Page Contain Image", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Does page contain expected image\n\n\n`locator` element locator\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Open Available Browser | [https://google.com](https://google.com) |  |\n| ${res} | Does Page Contain Image | Google |\n\n", "tags": [], "source": null, "shortdoc": "Does page contain expected image", "lineno": 1612}, {"name": "Does Page Contain Link", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Does page contain expected link\n\n\n`locator` element locator\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Does Page Contain Link | id:submit |\n\n", "tags": [], "source": null, "shortdoc": "Does page contain expected link", "lineno": 1627}, {"name": "Does Page Contain List", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Does page contain expected list\n\n\n`locator` element locator\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Does Page Contain List | class:selections |\n\n", "tags": [], "source": null, "shortdoc": "Does page contain expected list", "lineno": 1641}, {"name": "Does Page Contain Radio Button", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Does page contain expected radio button\n\n\n`locator` element locator\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Does Page Contain Radio Button | male |\n\n", "tags": [], "source": null, "shortdoc": "Does page contain expected radio button", "lineno": 1655}, {"name": "Does Page Contain Textfield", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Does page contain expected textfield\n\n\n`locator` element locator\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Does Page Contain Textfield | id:address |\n\n", "tags": [], "source": null, "shortdoc": "Does page contain expected textfield", "lineno": 1669}, {"name": "Does Table Cell Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Does table cell contain expected text\n\n\n`locator` element locator for the table\n\n\n`row` row index starting from 1 (beginning) or -1 (from the end)\n\n\n`column` column index starting from 1 (beginning) or -1 (from the end)\n\n\n`expected` expected text in table row\n\n\nExample:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| ${res} | Does Table Cell Contain | //table | 1 | 1 | Company |\n\n", "tags": [], "source": null, "shortdoc": "Does table cell contain expected text", "lineno": 1716}, {"name": "Does Table Column Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Does table column contain expected text\n\n\n`locator` element locator for the table\n\n\n`column` column index starting from 1 (beginning) or -1 (from the end)\n\n\n`expected` expected text in table column\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| ${res} | Does Table Column Contain | //table | 1 | Nokia |\n\n", "tags": [], "source": null, "shortdoc": "Does table column contain expected text", "lineno": 1738}, {"name": "Does Table Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Does table contain expected text\n\n\n`locator` element locator\n\n\n`expected` expected text in table\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${res} | Does Table Contain | //table | February |\n\n", "tags": [], "source": null, "shortdoc": "Does table contain expected text", "lineno": 1808}, {"name": "Does Table Footer Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Does table footer contain expected text\n\n\n`locator` element locator for the table\n\n\n`expected` expected text in table footer\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${res} | Does Table Footer Contain | //table | Sum |\n\n", "tags": [], "source": null, "shortdoc": "Does table footer contain expected text", "lineno": 1776}, {"name": "Does Table Header Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Does table header contain expected text\n\n\n`locator` element locator for the table\n\n\n`expected` expected text in table header\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${res} | Does Table Header Contain | //table | Month |\n\n", "tags": [], "source": null, "shortdoc": "Does table header contain expected text", "lineno": 1792}, {"name": "Does Table Row Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Does table row contain expected text\n\n\n`locator` element locator for the table\n\n\n`row` row index starting from 1 (beginning) or -1 (from the end)\n\n\n`expected` expected text in table row\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| ${res} | Does Table Row Contain | //table | 1 | Company |\n\n", "tags": [], "source": null, "shortdoc": "Does table row contain expected text", "lineno": 1758}, {"name": "Does Textarea Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Does textarea contain expected text\n\n\n`locator` element locator\n\n\n`expected` expected text in textarea\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${res} | Does Textarea Contain | //textarea | sincerely |\n\n", "tags": [], "source": null, "shortdoc": "Does textarea contain expected text", "lineno": 1840}, {"name": "Does Textfield Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Does textfield contain expected text\n\n\n`locator` element locator\n\n\n`expected` expected text in textfield\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${res} | Does Textfield Contain | id:lname | Last |\n\n", "tags": [], "source": null, "shortdoc": "Does textfield contain expected text", "lineno": 1856}, {"name": "Double Click Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Double clicks the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Double clicks the element identified by `locator`.", "lineno": 744}, {"name": "Drag And Drop", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "target", "kind": "POSITIONAL_OR_NAMED", "repr": "target: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Drags the element identified by `locator` into the `target` element.\n\n\nThe `locator` argument is the locator of the dragged element and the `target` is the locator of the target. See the `Locating elements` section for details about the locator syntax.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Drag And Drop` | css:div\\#element | css:div.target |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Drags the element identified by `locator` into the `target` element.", "lineno": 780}, {"name": "Drag And Drop By Offset", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "xoffset", "kind": "POSITIONAL_OR_NAMED", "repr": "xoffset: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "yoffset", "kind": "POSITIONAL_OR_NAMED", "repr": "yoffset: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}], "doc": "Drags the element identified with `locator` by `xoffset/yoffset`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe element will be moved by `xoffset` and `yoffset`, each of which is a negative or positive number specifying the offset.\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Drag And Drop By Offset` | myElem | 50 | -35 | \\# Move myElem 50px right and 35px down |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Drags the element identified with `locator` by `xoffset/yoffset`.", "lineno": 798}, {"name": "Element Attribute Value Should Be", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "attribute", "kind": "POSITIONAL_OR_NAMED", "repr": "attribute: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: None | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Verifies element identified by `locator` contains expected attribute value.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nExample: `Element Attribute Value Should Be` | css:img | href | value\n\n\nNew in SeleniumLibrary 3.2.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies element identified by `locator` contains expected attribute value.", "lineno": 451}, {"name": "Element Should Be Disabled", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Verifies that element identified by `locator` is disabled.\n\n\nThis keyword considers also elements that are read-only to be disabled.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element identified by `locator` is disabled.", "lineno": 246}, {"name": "Element Should Be Enabled", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Verifies that element identified by `locator` is enabled.\n\n\nThis keyword considers also elements that are read-only to be disabled.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element identified by `locator` is enabled.", "lineno": 259}, {"name": "Element Should Be Focused", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Verifies that element identified by `locator` is focused.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element identified by `locator` is focused.", "lineno": 272}, {"name": "Element Should Be Visible", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Verifies that the element identified by `locator` is visible.\n\n\nHerein, visible means that the element is logically visible, not optically visible in the current browser viewport. For example, an element that carries `display:none` is not logically visible, so using this keyword on that element would fail.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `message` argument can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that the element identified by `locator` is visible.", "lineno": 289}, {"name": "Element Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: None | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Verifies that element `locator` contains text `expected`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False. New in SeleniumLibrary 3.1.\n\n\n`ignore_case` argument is new in SeleniumLibrary 3.1.\n\n\nUse `Element Text Should Be` if you want to match the exact text, not a substring.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element `locator` contains text `expected`.", "lineno": 54}, {"name": "Element Should Not Be Visible", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Verifies that the element identified by `locator` is NOT visible.\n\n\nPasses if the element does not exists. See `Element Should Be Visible` for more information about visibility and supported arguments.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that the element identified by `locator` is NOT visible.", "lineno": 312}, {"name": "Element Should Not Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: None | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Verifies that element `locator` does not contain text `expected`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False.\n\n\n`ignore_case` argument new in SeleniumLibrary 3.1.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element `locator` does not contain text `expected`.", "lineno": 92}, {"name": "Element Text Should Be", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: None | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Verifies that element `locator` contains exact the text `expected`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False.\n\n\n`ignore_case` argument is new in SeleniumLibrary 3.1.\n\n\nUse `Element Should Contain` if a substring match is desired.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element `locator` contains exact the text `expected`.", "lineno": 331}, {"name": "Element Text Should Not Be", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "not_expected", "kind": "POSITIONAL_OR_NAMED", "repr": "not_expected: None | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Verifies that element `locator` does not contain exact the text `not_expected`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False.\n\n\nNew in SeleniumLibrary 3.1.1\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element `locator` does not contain exact the text `not_expected`.", "lineno": 367}, {"name": "Execute Async Javascript", "args": [{"name": "@code: Any", "kind": "VAR_POSITIONAL", "repr": "*code: Any", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Executes asynchronous JavaScript code with possible arguments.\n\n\nSimilar to `Execute Javascript` except that scripts executed with this keyword must explicitly signal they are finished by invoking the provided callback. This callback is always injected into the executed function as the last argument.\n\n\nScripts must complete within the script timeout or this keyword will fail. See the `Timeout` section for more information.\n\n\nStarting from SeleniumLibrary 3.2 it is possible to provide JavaScript [arguments](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html\\#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script) as part of `code` argument. See `Execute Javascript` for more details.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Execute Async JavaScript` | var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000); |  |\n| `Execute Async JavaScript` | ${CURDIR}/async_js_to_execute.js |  |\n| ${result} = | `Execute Async JavaScript` |  |\n| ... | var callback = arguments[arguments.length - 1]; |  |\n| ... | function answer(){callback(\"text\");}; |  |\n| ... | window.setTimeout(answer, 2000); |  |\n| `Should Be Equal` | ${result} | text |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\javascript.py", "shortdoc": "Executes asynchronous JavaScript code with possible arguments.", "lineno": 76}, {"name": "Execute Cdp", "args": [{"name": "command", "kind": "POSITIONAL_OR_NAMED", "repr": "command", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "parameters", "kind": "POSITIONAL_OR_NAMED", "repr": "parameters", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Executes Chromium DevTools Protocol commands\n\n\nWorks only with Chromium-based browsers!\n\n\nFor more information, available commands and parameters, see: [https://chromedevtools.github.io/devtools-protocol/](https://chromedevtools.github.io/devtools-protocol/)\n\n\n`command` command to execute as string\n\n\n`parameters` parameters for command as a dictionary\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Open Chrome Browser | about:blank | headless=${True} |\n| &{params} | Create Dictionary | userAgent=Chrome/83.0.4103.53 |\n| Execute CDP | Network.setUserAgentOverride | ${params} |\n| Go To | [https://robocorp.com](https://robocorp.com) |  |\n\n", "tags": [], "source": null, "shortdoc": "Executes Chromium DevTools Protocol commands", "lineno": 2173}, {"name": "Execute Javascript", "args": [{"name": "@code: Any", "kind": "VAR_POSITIONAL", "repr": "*code: Any", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Executes the given JavaScript code with possible arguments.\n\n\n`code` may be divided into multiple cells in the test data and `code` may contain multiple lines of code and arguments. In that case, the JavaScript code parts are concatenated together without adding spaces and optional arguments are separated from `code`.\n\n\nIf `code` is a path to an existing file, the JavaScript to execute will be read from that file. Forward slashes work as a path separator on all operating systems.\n\n\nThe JavaScript executes in the context of the currently selected frame or window as the body of an anonymous function. Use `window` to refer to the window of your application and `document` to refer to the document object of the current frame or window, e.g. `document.getElementById('example')`.\n\n\nThis keyword returns whatever the executed JavaScript code returns. Return values are converted to the appropriate Python types.\n\n\nStarting from SeleniumLibrary 3.2 it is possible to provide JavaScript [arguments](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html\\#selenium.webdriver.remote.webdriver.WebDriver.execute_script) as part of `code` argument. The JavaScript code and arguments must be separated with `JAVASCRIPT` and `ARGUMENTS` markers and must be used exactly with this format. If the Javascript code is first, then the `JAVASCRIPT` marker is optional. The order of `JAVASCRIPT` and `ARGUMENTS` markers can be swapped, but if `ARGUMENTS` is the first marker, then `JAVASCRIPT` marker is mandatory. It is only allowed to use `JAVASCRIPT` and `ARGUMENTS` markers only one time in the `code` argument.\n\n\nExamples:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Execute JavaScript` | window.myFunc('arg1', 'arg2') |  |  |  |\n| `Execute JavaScript` | ${CURDIR}/js_to_execute.js |  |  |  |\n| `Execute JavaScript` | alert(arguments[0]); | ARGUMENTS | 123 |  |\n| `Execute JavaScript` | ARGUMENTS | 123 | JAVASCRIPT | alert(arguments[0]); |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\javascript.py", "shortdoc": "Executes the given JavaScript code with possible arguments.", "lineno": 33}, {"name": "Frame Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies that frame identified by `locator` contains `text`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nSee `Page Should Contain` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py", "shortdoc": "Verifies that frame identified by `locator` contains `text`.", "lineno": 84}, {"name": "Get Action Chain Delay", "args": [], "doc": "Gets the currently stored value for chain_delay_value in timestr format.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Gets the currently stored value for chain_delay_value in timestr format.", "lineno": 656}, {"name": "Get All Links", "args": [], "doc": "Returns a list containing ids of all links found in current page.\n\n\nIf a link has no id, an empty string will be in the list instead.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns a list containing ids of all links found in current page.", "lineno": 1027}, {"name": "Get Browser Aliases", "args": [], "doc": "Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary `${aliases.key}` or as list `@{aliases}[0]`.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Open Browser` | [https://example.com](https://example.com) | alias=BrowserA |  |\n| `Open Browser` | [https://example.com](https://example.com) | alias=BrowserB |  |\n| &{aliases} | `Get Browser Aliases` |  | \\# &{aliases} = { BrowserA=1|BrowserB=2 } |\n| `Log` | ${aliases.BrowserA} |  | \\# logs `1` |\n| FOR | ${alias} | IN | @{aliases} |\n|  | `Log` | ${alias} | \\# logs `BrowserA` and `BrowserB` |\n| END |  |  |  |\n\n\nSee `Switch Browser` for more information and examples.\n\n\nNew in SeleniumLibrary 4.0\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary `${aliases.key}` or as list `@{aliases}[0]`.", "lineno": 388}, {"name": "Get Browser Capabilities", "args": [], "doc": "Get dictionary of browser properties\n\n\nExample:\n\n\n|  |  |\n| :--- | :--- |\n| ${caps}= | Get Browser Capabilities |\n\n", "tags": [], "source": null, "shortdoc": "Get dictionary of browser properties", "lineno": 1975}, {"name": "Get Browser Ids", "args": [], "doc": "Returns index of all active browser as list.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| @{browser_ids}= | Get Browser Ids |  |  |\n| FOR | ${id} | IN | @{browser_ids} |\n|  | @{window_titles}= | Get Window Titles | browser=${id} |\n|  | Log | Browser ${id} has these windows: ${window_titles} |  |\n| END |  |  |  |\n\n\nSee `Switch Browser` for more information and examples.\n\n\nNew in SeleniumLibrary 4.0\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Returns index of all active browser as list.", "lineno": 371}, {"name": "Get Cookie", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Returns information of cookie with `name` as an object.\n\n\nIf no cookie is found with `name`, keyword fails. The cookie object contains details about the cookie. Attributes available in the object are documented in the table below.\n\n\n| Attribute | Explanation |\n| :--- | :--- |\n| name | The name of a cookie. |\n| value | Value of the cookie. |\n| path | Indicates a URL path, for example `/`. |\n| domain | The domain, the cookie is visible to. |\n| secure | When true, the cookie is only used with HTTPS connections. |\n| httpOnly | When true, the cookie is not accessible via JavaScript. |\n| expiry | Python datetime object indicating when the cookie expires. |\n| extra | Possible attributes outside of the WebDriver specification |\n\n\nSee the [WebDriver specification](https://w3c.github.io/webdriver/\\#cookies) for details about the cookie information. Notice that `expiry` is specified as a [datetime object](https://docs.python.org/3/library/datetime.html\\#datetime.datetime), not as seconds since Unix Epoch like WebDriver natively does.\n\n\nIn some cases, example when running a browser in the cloud, it is possible that the cookie contains other attributes than is defined in the [WebDriver specification](https://w3c.github.io/webdriver/\\#cookies). These other attributes are available in an `extra` attribute in the cookie object and it contains a dictionary of the other attributes. The `extra` attribute is new in SeleniumLibrary 4.0.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Add Cookie` | foo | bar |\n| ${cookie} = | `Get Cookie` | foo |\n| `Should Be Equal` | ${cookie.name} | foo |\n| `Should Be Equal` | ${cookie.value} | bar |\n| `Should Be True` | ${cookie.expiry.year} > 2017 |  |\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py", "shortdoc": "Returns information of cookie with `name` as an object.", "lineno": 97}, {"name": "Get Cookies", "args": [{"name": "as_dict", "kind": "POSITIONAL_OR_NAMED", "repr": "as_dict: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Returns all cookies of the current page.\n\n\nIf `as_dict` argument evaluates as false, see `Boolean arguments` for more details, then cookie information is returned as a single string in format `name1=value1; name2=value2; name3=value3`. When `as_dict` argument evaluates as true, cookie information is returned as Robot Framework dictionary format. The string format can be used, for example, for logging purposes or in headers when sending HTTP requests. The dictionary format is helpful when the result can be passed to requests library's Create Session keyword's optional cookies parameter.\n\n\nThe `` as_dict`` argument is new in SeleniumLibrary 3.3\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py", "shortdoc": "Returns all cookies of the current page.", "lineno": 70}, {"name": "Get Dom Attribute", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "attribute", "kind": "POSITIONAL_OR_NAMED", "repr": "attribute: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Returns the value of `attribute` from the element `locator`. `Get DOM Attribute` keyword only returns attributes declared within the element's HTML markup.  If the requested attribute is not there, the keyword returns ${None}.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${id}= | `Get DOM Attribute` | css:h1 | id |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the value of `attribute` from the element `locator`. `Get DOM Attribute` keyword only returns attributes declared within the element's HTML markup.  If the requested attribute is not there, the keyword returns ${None}.", "lineno": 419}, {"name": "Get Element Attribute", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "attribute", "kind": "POSITIONAL_OR_NAMED", "repr": "attribute: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Returns the value of `attribute` from the element `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${id}= | `Get Element Attribute` | css:h1 | id |\n\n\nPassing attribute name as part of the `locator` was removed in SeleniumLibrary 3.2. The explicit `attribute` argument should be used instead.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the value of `attribute` from the element `locator`.", "lineno": 401}, {"name": "Get Element Count", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns the number of elements matching `locator`.\n\n\nIf you wish to assert the number of matching elements, use `Page Should Contain Element` with `limit` argument. Keyword will always return an integer.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${count} = | `Get Element Count` | name:div_name |\n| `Should Be True` | ${count} > 2 |  |\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the number of elements matching `locator`.", "lineno": 1132}, {"name": "Get Element Size", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns width and height of the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nBoth width and height are returned as integers.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${width} | ${height} = | `Get Element Size` | css:div\\#container |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns width and height of the element identified by `locator`.", "lineno": 496}, {"name": "Get Element Status", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Return dictionary containing element status of:\n\n\n- visible\n- enabled\n- disabled\n- focused\n\n\n`locator` element locator\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| &{res} | Get Element Status | class:special |\n| Log | ${res.visible} |  |\n| Log | ${res.enabled} |  |\n| Log | ${res.disabled} |  |\n| Log | ${res.focused} |  |\n\n", "tags": [], "source": null, "shortdoc": "Return dictionary containing element status of:", "lineno": 1918}, {"name": "Get Horizontal Position", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns the horizontal position of the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe position is returned in pixels off the left side of the page, as an integer.\n\n\nSee also `Get Vertical Position`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the horizontal position of the element identified by `locator`.", "lineno": 482}, {"name": "Get List Items", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "values", "kind": "POSITIONAL_OR_NAMED", "repr": "values: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Returns all labels or values of selection list `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nReturns visible labels by default, but values can be returned by setting the `values` argument to a true value (see `Boolean arguments`).\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${labels} = | `Get List Items` | mylist |  |\n| ${values} = | `Get List Items` | css:\\#example select | values=True |\n\n\nSupport to return values is new in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Returns all labels or values of selection list `locator`.", "lineno": 27}, {"name": "Get Location", "args": [], "doc": "Returns the current browser window URL.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Returns the current browser window URL.", "lineno": 427}, {"name": "Get Locations", "args": [{"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = CURRENT", "required": true, "defaultValue": "CURRENT", "types": ["str"], "typedocs": []}], "doc": "Returns and logs URLs of all windows of the selected browser.\n\n\n**Browser Scope:**\n\n\nThe `browser` argument specifies the browser that shall return its windows information.\n\n\n- `browser` can be `index_or_alias` like in `Switch Browser`.\n\n\n- If `browser` is `CURRENT` (default, case-insensitive) the currently active browser is selected.\n\n\n- If `browser` is `ALL` (case-insensitive) the window information of all windows of all opened browsers are returned.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns and logs URLs of all windows of the selected browser.", "lineno": 166}, {"name": "Get Property", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "property", "kind": "POSITIONAL_OR_NAMED", "repr": "property: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Returns the value of `property` from the element `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${text_length}= | `Get Property` | css:h1 | text_length |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the value of `property` from the element `locator`.", "lineno": 436}, {"name": "Get Selected List Label", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns the label of selected option from selection list `locator`.\n\n\nIf there are multiple selected options, the label of the first option is returned.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Returns the label of selected option from selection list `locator`.", "lineno": 52}, {"name": "Get Selected List Labels", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns labels of selected options from selection list `locator`.\n\n\nStarting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Returns labels of selected options from selection list `locator`.", "lineno": 65}, {"name": "Get Selected List Value", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns the value of selected option from selection list `locator`.\n\n\nIf there are multiple selected options, the value of the first option is returned.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Returns the value of selected option from selection list `locator`.", "lineno": 78}, {"name": "Get Selected List Values", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns values of selected options from selection list `locator`.\n\n\nStarting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Returns values of selected options from selection list `locator`.", "lineno": 91}, {"name": "Get Selenium Implicit Wait", "args": [], "doc": "Gets the implicit wait value used by Selenium.\n\n\nThe value is returned as a human-readable string like `1 second`.\n\n\nSee the `Implicit wait` section above for more information.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Gets the implicit wait value used by Selenium.", "lineno": 549}, {"name": "Get Selenium Page Load Timeout", "args": [], "doc": "Gets the time to wait for a page load to complete before raising a timeout exception.\n\n\nThe value is returned as a human-readable string like `1 second`.\n\n\nSee the `Page load` section above for more information.\n\n\nNew in SeleniumLibrary 6.1\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Gets the time to wait for a page load to complete before raising a timeout exception.", "lineno": 559}, {"name": "Get Selenium Speed", "args": [], "doc": "Gets the delay that is waited after each Selenium command.\n\n\nThe value is returned as a human-readable string like `1 second`.\n\n\nSee the `Selenium Speed` section above for more information.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Gets the delay that is waited after each Selenium command.", "lineno": 529}, {"name": "Get Selenium Timeout", "args": [], "doc": "Gets the timeout that is used by various keywords.\n\n\nThe value is returned as a human-readable string like `1 second`.\n\n\nSee the `Timeout` section above for more information.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Gets the timeout that is used by various keywords.", "lineno": 539}, {"name": "Get Session Id", "args": [], "doc": "Returns the currently active browser session id.\n\n\nNew in SeleniumLibrary 3.2\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Returns the currently active browser session id.", "lineno": 409}, {"name": "Get Source", "args": [], "doc": "Returns the entire HTML source of the current page or frame.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Returns the entire HTML source of the current page or frame.", "lineno": 417}, {"name": "Get Table Cell", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Returns contents of a table cell.\n\n\nThe table is located using the `locator` argument and its cell found using `row` and `column`. See the `Locating elements` section for details about the locator syntax.\n\n\nBoth row and column indexes start from 1, and header and footer rows are included in the count. It is possible to refer to rows and columns from the end by using negative indexes so that -1 is the last row/column, -2 is the second last, and so on.\n\n\nAll `\\<th>` and `\\<td>` elements anywhere in the table are considered to be cells.\n\n\nSee `Page Should Contain` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Returns contents of a table cell.", "lineno": 26}, {"name": "Get Testability Status", "args": [], "doc": "Get SeleniumTestability plugin status\n\n", "tags": [], "source": null, "shortdoc": "Get SeleniumTestability plugin status", "lineno": 1945}, {"name": "Get Text", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns the text value of the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the text value of the element identified by `locator`.", "lineno": 552}, {"name": "Get Title", "args": [], "doc": "Returns the title of the current page.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Returns the title of the current page.", "lineno": 422}, {"name": "Get Value", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns the value attribute of the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the value attribute of the element identified by `locator`.", "lineno": 543}, {"name": "Get Vertical Position", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns the vertical position of the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe position is returned in pixels off the top of the page, as an integer.\n\n\nSee also `Get Horizontal Position`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the vertical position of the element identified by `locator`.", "lineno": 570}, {"name": "Get WebElement", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "parent", "kind": "POSITIONAL_OR_NAMED", "repr": "parent: WebElement | ShadowRoot | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "shadow", "kind": "POSITIONAL_OR_NAMED", "repr": "shadow: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Returns the first `Element` matching the given `locator`.\n\n\nWith the `parent` parameter you can optionally specify a parent to start the search from. Set `shadow` to `True` if you're targeting and expecting a shadow root in return. Read more on the shadow root: [https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot)\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": null, "shortdoc": "Returns the first `Element` matching the given `locator`.", "lineno": 2267}, {"name": "Get WebElements", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Returns a list of WebElement objects matching the `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nStarting from SeleniumLibrary 3.0, the keyword returns an empty list if there are no matching elements. In previous releases, the keyword failed in this case.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns a list of WebElement objects matching the `locator`.", "lineno": 41}, {"name": "Get Window Handles", "args": [{"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = CURRENT", "required": true, "defaultValue": "CURRENT", "types": ["str"], "typedocs": []}], "doc": "Returns all child window handles of the selected browser as a list.\n\n\nCan be used as a list of windows to exclude with `Select Window`.\n\n\nHow to select the `browser` scope of this keyword, see `Get Locations`.\n\n\nPrior to SeleniumLibrary 3.0, this keyword was named `List Windows`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns all child window handles of the selected browser as a list.", "lineno": 130}, {"name": "Get Window Identifiers", "args": [{"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = CURRENT", "required": true, "defaultValue": "CURRENT", "types": ["str"], "typedocs": []}], "doc": "Returns and logs id attributes of all windows of the selected browser.\n\n\nHow to select the `browser` scope of this keyword, see `Get Locations`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns and logs id attributes of all windows of the selected browser.", "lineno": 142}, {"name": "Get Window Names", "args": [{"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = CURRENT", "required": true, "defaultValue": "CURRENT", "types": ["str"], "typedocs": []}], "doc": "Returns and logs names of all windows of the selected browser.\n\n\nHow to select the `browser` scope of this keyword, see `Get Locations`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns and logs names of all windows of the selected browser.", "lineno": 150}, {"name": "Get Window Position", "args": [], "doc": "Returns current window position.\n\n\nThe position is relative to the top left corner of the screen. Returned values are integers. See also `Set Window Position`.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${x} | ${y}= | `Get Window Position` |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns current window position.", "lineno": 261}, {"name": "Get Window Size", "args": [{"name": "inner", "kind": "POSITIONAL_OR_NAMED", "repr": "inner: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Returns current window width and height as integers.\n\n\nSee also `Set Window Size`.\n\n\nIf `inner` parameter is set to True, keyword returns HTML DOM window.innerWidth and window.innerHeight properties. See `Boolean arguments` for more details on how to set boolean arguments. The `inner` is new in SeleniumLibrary 4.0.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${width} | ${height}= | `Get Window Size` |  |\n| ${width} | ${height}= | `Get Window Size` | True |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns current window width and height as integers.", "lineno": 195}, {"name": "Get Window Titles", "args": [{"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = CURRENT", "required": true, "defaultValue": "CURRENT", "types": ["str"], "typedocs": []}], "doc": "Returns and logs titles of all windows of the selected browser.\n\n\nHow to select the `browser` scope of this keyword, see `Get Locations`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns and logs titles of all windows of the selected browser.", "lineno": 158}, {"name": "Go Back", "args": [], "doc": "Simulates the user clicking the back button on their browser.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Simulates the user clicking the back button on their browser.", "lineno": 513}, {"name": "Go To", "args": [{"name": "url", "kind": "POSITIONAL_OR_NAMED", "repr": "url: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Navigates the current browser window to the provided `url`.\n\n", "tags": [], "source": null, "shortdoc": "Navigates the current browser window to the provided `url`.", "lineno": 128}, {"name": "Handle Alert", "args": [{"name": "action", "kind": "POSITIONAL_OR_NAMED", "repr": "action: str = ACCEPT", "required": true, "defaultValue": "ACCEPT", "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Handles the current alert and returns its message.\n\n\nBy default, the alert is accepted, but this can be controlled with the `action` argument that supports the following case-insensitive values:\n\n\n- `ACCEPT`: Accept the alert i.e. press `Ok`. Default.\n- `DISMISS`: Dismiss the alert i.e. press `Cancel`.\n- `LEAVE`: Leave the alert open.\n\n\nThe `timeout` argument specifies how long to wait for the alert to appear. If it is not given, the global default `timeout` is used instead.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Handle Alert |  |  | \\# Accept alert. |\n| Handle Alert | action=DISMISS |  | \\# Dismiss alert. |\n| Handle Alert | timeout=10 s |  | \\# Use custom timeout and accept alert. |\n| Handle Alert | DISMISS | 1 min | \\# Use custom timeout and dismiss alert. |\n| ${message} = | Handle Alert |  | \\# Accept alert and get its message. |\n| ${message} = | Handle Alert | LEAVE | \\# Leave alert open and get its message. |\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py", "shortdoc": "Handles the current alert and returns its message.", "lineno": 104}, {"name": "Highlight Elements", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "width", "kind": "POSITIONAL_OR_NAMED", "repr": "width: str = 2px", "required": true, "defaultValue": "2px", "types": ["str"], "typedocs": []}, {"name": "style", "kind": "POSITIONAL_OR_NAMED", "repr": "style: str = dotted", "required": true, "defaultValue": "dotted", "types": ["str"], "typedocs": []}, {"name": "color", "kind": "POSITIONAL_OR_NAMED", "repr": "color: str = blue", "required": true, "defaultValue": "blue", "types": ["str"], "typedocs": []}], "doc": "Highlight all matching elements by locator.\n\n\nHighlighting is done by adding a colored outline around the elements with CSS styling.\n\n\n`locator`  element locator `width`    highlight outline width `style`    highlight outline style `color`    highlight outline color\n\n\nExample:\n\n\n|  |  |\n| :--- | :--- |\n| Highlight Elements | [xpath://h2](xpath://h2) |\n\n", "tags": [], "source": null, "shortdoc": "Highlight all matching elements by locator.", "lineno": 2057}, {"name": "Input Password", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "password", "kind": "POSITIONAL_OR_NAMED", "repr": "password: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "clear", "kind": "POSITIONAL_OR_NAMED", "repr": "clear: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Types the given password into the text field identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax. See `Input Text` for `clear` argument details.\n\n\nDifference compared to `Input Text` is that this keyword does not log the given password on the INFO level. Notice that if you use the keyword like\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Input Password | password_field | password |\n\n\nthe password is shown as a normal keyword argument. A way to avoid that is using variables like\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Input Password | password_field | ${PASSWORD} |\n\n\nPlease notice that Robot Framework logs all arguments using the TRACE level and tests must not be executed using level below DEBUG if the password should not be logged in any format.\n\n\nThe `clear` argument is new in SeleniumLibrary 4.0. Hiding password logging from Selenium logs is new in SeleniumLibrary 4.2.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Types the given password into the text field identified by `locator`.", "lineno": 242}, {"name": "Input Text", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "clear", "kind": "POSITIONAL_OR_NAMED", "repr": "clear: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Types the given `text` into the text field identified by `locator`.\n\n\nWhen `clear` is true, the input element is cleared before the text is typed into the element. When false, the previous text is not cleared from the element. Use `Input Password` if you do not want the given `text` to be logged.\n\n\nIf [Selenium Grid](https://github.com/SeleniumHQ/selenium/wiki/Grid2) is used and the `text` argument points to a file in the file system, then this keyword prevents the Selenium to transfer the file to the Selenium Grid hub. Instead, this keyword will send the `text` string as is to the element. If a file should be transferred to the hub and upload should be performed, please use `Choose File` keyword.\n\n\nSee the `Locating elements` section for details about the locator syntax. See the `Boolean arguments` section how Boolean values are handled.\n\n\nDisabling the file upload the Selenium Grid node and the `clear` argument are new in SeleniumLibrary 4.0\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Types the given `text` into the text field identified by `locator`.", "lineno": 272}, {"name": "Input Text Into Alert", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "action", "kind": "POSITIONAL_OR_NAMED", "repr": "action: str = ACCEPT", "required": true, "defaultValue": "ACCEPT", "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Types the given `text` into an input field in an alert.\n\n\nThe alert is accepted by default, but that behavior can be controlled by using the `action` argument same way as with `Handle Alert`.\n\n\n`timeout` specifies how long to wait for the alert to appear. If it is not given, the global default `timeout` is used instead.\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py", "shortdoc": "Types the given `text` into an input field in an alert.", "lineno": 34}, {"name": "Input Text When Element Is Visible", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Input text into locator after it has become visible.\n\n\n`locator` element locator\n\n\n`text` insert text to locator\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Input Text When Element Is Visible | //input[@id=\"freetext\"] | my feedback |\n\n", "tags": [], "source": null, "shortdoc": "Input text into locator after it has become visible.", "lineno": 1245}, {"name": "Is Alert Present", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "action", "kind": "POSITIONAL_OR_NAMED", "repr": "action: str = ACCEPT", "required": true, "defaultValue": "ACCEPT", "types": ["str"], "typedocs": []}], "doc": "Is alert box present, which can be identified with text and action can also be done which by default is ACCEPT.\n\n\nOther possible actions are DISMISS and LEAVE.\n\n\n`text` check if alert text is matching to this, if `None` will check if alert is present at all\n\n\n`action` possible action if alert is present, default ACCEPT\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Is Alert Present | alert message |\n\n", "tags": [], "source": null, "shortdoc": "Is alert box present, which can be identified with text and action can also be done which by default is ACCEPT.", "lineno": 1353}, {"name": "Is Checkbox Selected", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Is checkbox selected\n\n\n`locator` element locator\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Is Checkbox Selected | id:taxes-paid |\n\n", "tags": [], "source": null, "shortdoc": "Is checkbox selected", "lineno": 1414}, {"name": "Is Element Attribute Equal To", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "attribute", "kind": "POSITIONAL_OR_NAMED", "repr": "attribute: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Is element attribute equal to expected value\n\n\n`locator` element locator\n\n\n`attribute` element attribute to check for\n\n\n`expected` is attribute value equal to this\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| ${res} | Is Element Attribute Equal To | h1 | id | main |\n\n", "tags": [], "source": null, "shortdoc": "Is element attribute equal to expected value", "lineno": 1333}, {"name": "Is Element Disabled", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "missing_ok", "kind": "POSITIONAL_OR_NAMED", "repr": "missing_ok: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Is element disabled\n\n\n`locator` element locator `missing_ok` default True, set to False if keyword should Fail if element does not exist\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Is Element Disabled | //input[@type=\"submit\"] |\n\n", "tags": [], "source": null, "shortdoc": "Is element disabled", "lineno": 1297}, {"name": "Is Element Enabled", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "missing_ok", "kind": "POSITIONAL_OR_NAMED", "repr": "missing_ok: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Is element enabled\n\n\n`locator` element locator `missing_ok` default True, set to False if keyword should Fail if element does not exist\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Is Element Enabled | input.field1 |\n\n", "tags": [], "source": null, "shortdoc": "Is element enabled", "lineno": 1261}, {"name": "Is Element Focused", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "missing_ok", "kind": "POSITIONAL_OR_NAMED", "repr": "missing_ok: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Is element focused\n\n\n`locator` element locator `missing_ok` default True, set to False if keyword should Fail if element does not exist\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Is Element Focused | //input[@id=\"freetext\"] |\n\n", "tags": [], "source": null, "shortdoc": "Is element focused", "lineno": 1315}, {"name": "Is Element Text", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Is element text expected\n\n\n`locator` element locator\n\n\n`expected` expected element text\n\n\n`ignore_case` should check be case insensitive, default `False`\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| ${res} | Is Element Text | id:name | john doe |  |\n| ${res} | Is Element Text | id:name | john doe | ignore_case=True |\n\n", "tags": [], "source": null, "shortdoc": "Is element text expected", "lineno": 1468}, {"name": "Is Element Visible", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "missing_ok", "kind": "POSITIONAL_OR_NAMED", "repr": "missing_ok: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Is element visible\n\n\n`locator` element locator `missing_ok` default True, set to False if keyword should Fail if element does not exist\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Is Element Visible | id:confirmation |\n\n", "tags": [], "source": null, "shortdoc": "Is element visible", "lineno": 1279}, {"name": "Is List Selected", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Is any option selected in the\n\n\n`locator` element locator\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Is List Selected | id:cars |\n\n", "tags": [], "source": null, "shortdoc": "Is any option selected in the", "lineno": 1508}, {"name": "Is List Selection", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "@expected: str", "kind": "VAR_POSITIONAL", "repr": "*expected: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Is list selected with expected values\n\n\n`locator` element locator\n\n\n`expected` expected selected options\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${res} | Is List Selection | id:cars | Ford |\n\n", "tags": [], "source": null, "shortdoc": "Is list selected with expected values", "lineno": 1492}, {"name": "Is Location", "args": [{"name": "url", "kind": "POSITIONAL_OR_NAMED", "repr": "url: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Is current URL expected url\n\n\n`url` expected current URL\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Open Available Browser | [https://www.robocorp.com](https://www.robocorp.com) |  |\n| ${res} | Is Location | [https://www.robocorp.com](https://www.robocorp.com) |\n\n", "tags": [], "source": null, "shortdoc": "Is current URL expected url", "lineno": 1523}, {"name": "Is Radio Button Selected", "args": [{"name": "group_name", "kind": "POSITIONAL_OR_NAMED", "repr": "group_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Is any radio button selected in the button group\n\n\n`group_name` radio button group name\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Is Radio Button Selected | group_name=gender |\n\n", "tags": [], "source": null, "shortdoc": "Is any radio button selected in the button group", "lineno": 1699}, {"name": "Is Radio Button Set To", "args": [{"name": "group_name", "kind": "POSITIONAL_OR_NAMED", "repr": "group_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Is radio button group set to expected value\n\n\n`group_name` radio button group name\n\n\n`value` expected value\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${res} | Is Radio Button Set To | group_name=gender | value=female |\n\n", "tags": [], "source": null, "shortdoc": "Is radio button group set to expected value", "lineno": 1683}, {"name": "Is Textarea Value", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Is textarea matching expected value\n\n\n`locator` element locator\n\n\n`expected` expected textarea value\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${res} | Is Textarea Value | //textarea | Yours sincerely |\n\n", "tags": [], "source": null, "shortdoc": "Is textarea matching expected value", "lineno": 1824}, {"name": "Is Textfield Value", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Is textfield value expected\n\n\n`locator` element locator\n\n\n`expected` expected textfield value\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${res} | Is Textfield Value | id:lname | Lastname |\n\n", "tags": [], "source": null, "shortdoc": "Is textfield value expected", "lineno": 1872}, {"name": "Is Title", "args": [{"name": "title", "kind": "POSITIONAL_OR_NAMED", "repr": "title: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Is page title expected\n\n\n`title` expected title value\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${res} | Is Title | Webpage title text |\n\n", "tags": [], "source": null, "shortdoc": "Is page title expected", "lineno": 1888}, {"name": "List Selection Should Be", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "@expected: str", "kind": "VAR_POSITIONAL", "repr": "*expected: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Verifies selection list `locator` has `expected` options selected.\n\n\nIt is possible to give expected options both as visible labels and as values. Starting from SeleniumLibrary 3.0, mixing labels and values is not possible. Order of the selected options is not validated.\n\n\nIf no expected options are given, validates that the list has no selections. A more explicit alternative is using `List Should Have No Selections`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `List Selection Should Be` | gender | Female |  |\n| `List Selection Should Be` | interests | Test Automation | Python |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Verifies selection list `locator` has `expected` options selected.", "lineno": 104}, {"name": "List Should Have No Selections", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Verifies selection list `locator` has no options selected.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Verifies selection list `locator` has no options selected.", "lineno": 141}, {"name": "Location Should Be", "args": [{"name": "url", "kind": "POSITIONAL_OR_NAMED", "repr": "url: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Verifies that the current URL is exactly `url`.\n\n\nThe `url` argument contains the exact url that should exist in browser.\n\n\nThe `message` argument can be used to override the default error message.\n\n\n`message` argument is new in SeleniumLibrary 3.2.0.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Verifies that the current URL is exactly `url`.", "lineno": 432}, {"name": "Location Should Contain", "args": [{"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Verifies that the current URL contains `expected`.\n\n\nThe `expected` argument contains the expected value in url.\n\n\nThe `message` argument can be used to override the default error message.\n\n\n`message` argument is new in SeleniumLibrary 3.2.0.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Verifies that the current URL contains `expected`.", "lineno": 450}, {"name": "Log Location", "args": [], "doc": "Logs and returns the current browser window URL.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Logs and returns the current browser window URL.", "lineno": 471}, {"name": "Log Source", "args": [{"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = INFO", "required": true, "defaultValue": "INFO", "types": ["str"], "typedocs": []}], "doc": "Logs and returns the HTML source of the current page or frame.\n\n\nThe `loglevel` argument defines the used log level. Valid log levels are `WARN`, `INFO` (default), `DEBUG`, `TRACE` and `NONE` (no logging).\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Logs and returns the HTML source of the current page or frame.", "lineno": 478}, {"name": "Log Title", "args": [], "doc": "Logs and returns the title of the current page.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Logs and returns the title of the current page.", "lineno": 490}, {"name": "Maximize Browser Window", "args": [{"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "force", "kind": "NAMED_ONLY", "repr": "force: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "&kwargs", "kind": "VAR_NAMED", "repr": "**kwargs", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Maximizes current browser window.\n\n\nThe window won't be maximized in headless mode since there's no way to know the screen size to set the window size to in the absence of an UI. Use the `Set Window Size` keyword with a specific side or set the `force` param to `True` if you still want to enforce this undefined behaviour.\n\n", "tags": [], "source": null, "shortdoc": "Maximizes current browser window.", "lineno": 172}, {"name": "Minimize Browser Window", "args": [], "doc": "Minimizes current browser window.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Minimizes current browser window.", "lineno": 190}, {"name": "Mouse Down", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Simulates pressing the left mouse button on the element `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe element is pressed without releasing the mouse button.\n\n\nSee also the more specific keywords `Mouse Down On Image` and `Mouse Down On Link`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates pressing the left mouse button on the element `locator`.", "lineno": 818}, {"name": "Mouse Down On Image", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Simulates a mouse down event on an image identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates a mouse down event on an image identified by `locator`.", "lineno": 1084}, {"name": "Mouse Down On Link", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Simulates a mouse down event on a link identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates a mouse down event on a link identified by `locator`.", "lineno": 1036}, {"name": "Mouse Out", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Simulates moving the mouse away from the element `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates moving the mouse away from the element `locator`.", "lineno": 835}, {"name": "Mouse Over", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Simulates hovering the mouse over the element `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates hovering the mouse over the element `locator`.", "lineno": 852}, {"name": "Mouse Up", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Simulates releasing the left mouse button on the element `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates releasing the left mouse button on the element `locator`.", "lineno": 864}, {"name": "Open Available Browser", "args": [{"name": "url", "kind": "POSITIONAL_OR_NAMED", "repr": "url: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "use_profile", "kind": "POSITIONAL_OR_NAMED", "repr": "use_profile: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "headless", "kind": "POSITIONAL_OR_NAMED", "repr": "headless: bool | str = AUTO", "required": true, "defaultValue": "AUTO", "types": ["Union"], "typedocs": []}, {"name": "maximized", "kind": "POSITIONAL_OR_NAMED", "repr": "maximized: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "browser_selection", "kind": "POSITIONAL_OR_NAMED", "repr": "browser_selection: Any = AUTO", "required": true, "defaultValue": "AUTO", "types": ["Any"], "typedocs": []}, {"name": "alias", "kind": "POSITIONAL_OR_NAMED", "repr": "alias: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "profile_name", "kind": "POSITIONAL_OR_NAMED", "repr": "profile_name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "profile_path", "kind": "POSITIONAL_OR_NAMED", "repr": "profile_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "preferences", "kind": "POSITIONAL_OR_NAMED", "repr": "preferences: dict | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "proxy", "kind": "POSITIONAL_OR_NAMED", "repr": "proxy: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "user_agent", "kind": "POSITIONAL_OR_NAMED", "repr": "user_agent: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "download", "kind": "POSITIONAL_OR_NAMED", "repr": "download: Any = AUTO", "required": true, "defaultValue": "AUTO", "types": ["Any"], "typedocs": []}, {"name": "options", "kind": "POSITIONAL_OR_NAMED", "repr": "options: ArgOptions | str | Dict[str, str | List | Dict] | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "port", "kind": "POSITIONAL_OR_NAMED", "repr": "port: int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "sandbox", "kind": "POSITIONAL_OR_NAMED", "repr": "sandbox: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Attempts to open a browser on the user's device from a set of supported browsers. Automatically downloads a corresponding webdriver if none is already installed.\n\n\nCurrently supported browsers: Chrome, Firefox, Edge, ChromiumEdge, Safari, Ie\n\n\nOptionally can be given a `url` as the first argument, to open the browser directly to the given page.\n\n\nReturns either a generated index or a custom `alias` for the browser instance. The returned value can be used to refer to that specific browser instance in other keywords.\n\n\nIf the browser should start in a maximized window, this can be enabled with the argument `maximized`, but is disabled by default.\n\n\nFor certain applications it might also be required to force a certain user-agent string for Selenium, which can be overridden with the `user_agent` argument.\n\n\nWebDriver creation can be customized with `options`. This accepts a class instance (e.g. `ChromeOptions`), a string like `add_argument(\"--incognito\");set_capability(\"acceptInsecureCerts\", True)` or even a simple dictionary like: `{\"arguments\": [\"--incognito\"], \"capabilities\": {\"acceptInsecureCerts\": True}}`\n\n\nA custom `port` can be provided to start the browser webdriver without a randomly picked one. Make sure you provide every time a unique system-available local port if you plan to have multiple browsers being controlled in parallel.\n\n\nFor incompatible web apps designed to work in Internet Explorer only, Edge can run in IE mode by simply setting `ie` in the `browser_selection` param. Robot example: [https://github.com/robocorp/example-ie-mode-edge](https://github.com/robocorp/example-ie-mode-edge)\n\n\nThe `sandbox` argument can be used to enable the sandbox mode for the browser. By default browser is opened in `--no-sandbox` mode, but this started to cause issues on Chromium version 124. The `--no-sandbox` flag is set by default to preserve the older behavior.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Open Available Browser | [https://www.robocorp.com](https://www.robocorp.com) |  |  |\n| ${index}= | Open Available Browser | ${URL} | browser_selection=opera,firefox |\n| Open Available Browser | ${URL} | headless=${True} | alias=HeadlessBrowser |\n| Open Available Browser | ${URL} | options=add_argument(\"user-data-dir=path/to/data\");add_argument(\"--incognito\") |  |\n| Open Available Browser | ${URL} | port=${8888} |  |\n\n\n### Browser order\n\nThe default order of supported browsers is based on the operating system and is as follows:\n\n\n|  |  |\n| :--- | :--- |\n| Platform | Default order |\n| `Windows` | Chrome, Firefox, Edge |\n| `Linux` | Chrome, Firefox, Edge |\n| `Darwin` | Chrome, Firefox, Edge, Safari |\n\n\nThe order can be overridden with a custom list by using the argument `browser_selection`. The argument can be either a comma-separated string or a list object.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Open Available Browser | ${URL} | browser_selection=ie |\n\n\n### Webdriver download\n\nThe library can (if requested) automatically download webdrivers for all the supported browsers. This can be controlled with the argument `download`.\n\n\nIf the value is `False`, it will only attempt to start webdrivers found from the system PATH.\n\n\nIf the value is `True`, it will download a webdriver that matches the current browser.\n\n\nBy default the argument has the value `AUTO`, which means it first attempts to use webdrivers found in PATH and if that fails forces a webdriver download.\n\n\n### Opening process\n\n1. Parse list of preferred browser order. If not given, use values from above table.\n\n\n2. Loop through listed browsers:\n\n\na. Set the webdriver options for the browser.\n\n\nb. Download webdriver (if requested).\n\n\nc. Attempt to launch the webdriver and stop the loop if successful.\n\n\n3. Return index/alias if webdriver was created, or raise an exception if no browsers were successfully opened.\n\n\n### Headless mode\n\nIf required, the browser can also run `headless`, which means that it does not create a visible window. Generally a headless browser is slightly faster, but might not support all features a normal browser does.\n\n\nOne typical use-case for headless mode is in cloud containers, where there is no display available. It also prevents manual interaction with the browser, which can be either a benefit or a drawback depending on the context.\n\n\nIt can be explicitly enabled or disabled with the argument `headless`. By default, it will be disabled, unless it detects that it is running in a Linux environment without a display, e.g. a container or if the `RPA_HEADLESS_MODE` env var is set to a number different than `0`.\n\n\n### Chromium options\n\nSome features are currently available only for Chromium-based browsers. This includes using an existing user profile. By default Selenium uses a new profile for each session, but it can use an existing one by enabling the `use_profile` argument.\n\n\nIf a custom profile is stored somewhere outside of the default location, the path to the profiles directory and the name of the profile can be controlled with `profile_path` and `profile_name` respectively. Keep in mind that the `profile_path` for the Chrome browser for e.g. ends usually with \"Chrome\", \"User Data\" or \"google-chrome\" (based on platform) and the `profile_name` is a directory relative to `profile_path`, usually named \"Profile 1\", \"Profile 2\" etc. (and not as your visible name in the Chrome browser). Similar behavior is observed with Edge as well.\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| Open Available Browser | [https://www.robocorp.com](https://www.robocorp.com) | use_profile=${True} |  |  |\n| Open Available Browser | [https://www.robocorp.com](https://www.robocorp.com) | use_profile=${True} | profile_name=Default |  |\n| Open Available Browser | [https://www.robocorp.com](https://www.robocorp.com) | use_profile=${True} | profile_name=Profile 2 |  |\n| Open Available Browser | [https://www.robocorp.com](https://www.robocorp.com) | use_profile=${True} | profile_name=Profile 1 | profile_path=path/to/custom/user_data_dir |\n\n\nProfile preferences can be further overridden with the `preferences` argument by giving a dictionary of key/value pairs.\n\n\nChromium-based browsers can additionally connect through a `proxy`, which should be given as either a local or remote address.\n\n", "tags": [], "source": null, "shortdoc": "Attempts to open a browser on the user's device from a set of supported browsers. Automatically downloads a corresponding webdriver if none is already installed.", "lineno": 350}, {"name": "Open Browser", "args": [{"name": "url", "kind": "POSITIONAL_OR_NAMED", "repr": "url: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = firefox", "required": true, "defaultValue": "firefox", "types": ["str"], "typedocs": []}, {"name": "alias", "kind": "POSITIONAL_OR_NAMED", "repr": "alias: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "remote_url", "kind": "POSITIONAL_OR_NAMED", "repr": "remote_url: bool | str = False", "required": true, "defaultValue": "False", "types": ["Union"], "typedocs": []}, {"name": "desired_capabilities", "kind": "POSITIONAL_OR_NAMED", "repr": "desired_capabilities: dict | None | str = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "ff_profile_dir", "kind": "POSITIONAL_OR_NAMED", "repr": "ff_profile_dir: FirefoxProfile | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "options", "kind": "POSITIONAL_OR_NAMED", "repr": "options: ArgOptions | str | Dict[str, str | List | Dict] | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "service_log_path", "kind": "POSITIONAL_OR_NAMED", "repr": "service_log_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "executable_path", "kind": "POSITIONAL_OR_NAMED", "repr": "executable_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "service", "kind": "POSITIONAL_OR_NAMED", "repr": "service: Any | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Opens a new browser instance to the optional `url`.\n\n\nThe `browser` argument specifies which browser to use. The supported browsers are listed in the table below. The browser names are case-insensitive and some browsers have multiple supported names.\n\n\n| Browser | Name(s) |\n| :--- | :--- |\n| Firefox | firefox, ff |\n| Google Chrome | googlechrome, chrome, gc |\n| Headless Firefox | headlessfirefox |\n| Headless Chrome | headlesschrome |\n| Internet Explorer | internetexplorer, ie |\n| Edge | edge |\n| Safari | safari |\n\n\nTo be able to actually use one of these browsers, you need to have a matching Selenium browser driver available. See the [project documentation](https://github.com/robotframework/SeleniumLibrary\\#browser-drivers) for more details.\n\n\nAfter opening the browser, it is possible to use optional `url` to navigate the browser to the desired address.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Open Browser` | [http://example.com](http://example.com) | Chrome |  |\n| `Open Browser` | [http://example.com](http://example.com) | Firefox | alias=Firefox |\n| `Open Browser` | [http://example.com](http://example.com) | Edge | remote_url=http://127.0.0.1:4444/wd/hub |\n| `Open Browser` | about:blank |  |  |\n| `Open Browser` | browser=Chrome |  |  |\n\n\nOptional `alias` is an alias given for this browser instance and it can be used for switching between browsers. When same `alias` is given with two `Open Browser` keywords, the first keyword will open a new browser, but the second one will switch to the already opened browser and will not open a new browser. The `alias` definition overrules `browser` definition. When same `alias` is used but a different `browser` is defined, then switch to a browser with same alias is done and new browser is not opened. An alternative approach for switching is using an index returned by this keyword. These indices start from 1, are incremented when new browsers are opened, and reset back to 1 when `Close All Browsers` is called. See `Switch Browser` for more information and examples.\n\n\nAlias examples:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| ${1_index} = | `Open Browser` | [http://example.com](http://example.com) | Chrome | alias=Chrome | \\# Opens new browser because alias is new. |\n| ${2_index} = | `Open Browser` | [http://example.com](http://example.com) | Firefox |  | \\# Opens new browser because alias is not defined. |\n| ${3_index} = | `Open Browser` | [http://example.com](http://example.com) | Chrome | alias=Chrome | \\# Switches to the browser with Chrome alias. |\n| ${4_index} = | `Open Browser` | [http://example.com](http://example.com) | Chrome | alias=${1_index} | \\# Switches to the browser with Chrome alias. |\n| Should Be Equal | ${1_index} | ${3_index} |  |  |  |\n| Should Be Equal | ${1_index} | ${4_index} |  |  |  |\n| Should Be Equal | ${2_index} | ${2} |  |  |  |\n\n\nOptional `remote_url` is the URL for a [Selenium Grid](https://github.com/SeleniumHQ/selenium/wiki/Grid2).\n\n\nOptional `desired_capabilities` is deprecated and will be removed in the next release. Capabilities of each individual browser is now done through options or services. Please refer to those arguments for configuring specific browsers.\n\n\nOptional `ff_profile_dir` is the path to the Firefox profile directory if you wish to overwrite the default profile Selenium uses. The `ff_profile_dir` can also be an instance of the [selenium.webdriver.FirefoxProfile](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html) . As a third option, it is possible to use `FirefoxProfile` methods and attributes to define the profile using methods and attributes in the same way as with `options` argument. Example: It is possible to use FirefoxProfile `set_preference` to define different profile settings. See `options` argument documentation in below how to handle backslash escaping.\n\n\nExample for FirefoxProfile\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Open Browser` | [http://example.com](http://example.com) | Firefox | ff_profile_dir=/path/to/profile | \\# Using profile from disk. |\n| `Open Browser` | [http://example.com](http://example.com) | Firefox | ff_profile_dir=${FirefoxProfile_instance} | \\# Using instance of FirefoxProfile. |\n| `Open Browser` | [http://example.com](http://example.com) | Firefox | ff_profile_dir=set_preference(\"key\", \"value\");set_preference(\"other\", \"setting\") | \\# Defining profile using FirefoxProfile mehtods. |\n\n\nOptional `options` argument allows defining browser specific Selenium options. Example for Chrome, the `options` argument allows defining the following [methods and attributes](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html\\#selenium.webdriver.chrome.options.Options) and for Firefox these [methods and attributes](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox\\#selenium.webdriver.firefox.options.Options) are available. Selenium options are also supported, when `remote_url` argument is used.\n\n\nThe SeleniumLibrary `options` argument accepts Selenium options in two different formats: as a string and as Python object which is an instance of the Selenium options class.\n\n\nThe string format uses a Python like syntax to define Selenium options methods or attributes.\n\n\nExample when using [Chrome options](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html\\#selenium.webdriver.chrome.options.Options) method:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Open Browser` | [http://example.com](http://example.com) | Chrome | options=add_argument(\"--disable-popup-blocking\"); add_argument(\"--ignore-certificate-errors\") | \\# Sting format. |\n| `Open Browser` | None | Chrome | options=binary_location=\"/path/to/binary\";add_argument(\"remote-debugging-port=port\") | \\# Start Chomium-based application. |\n| `Open Browser` | None | Chrome | options=binary_location=r\"C:\\\\path\\\\to\\\\binary\" | \\# Windows OS path escaping. |\n\n\n`options` argument also supports receiving the Selenium options as Python class instance.\n\n\nSee the `Browser and Driver options` section for more details on how to use the either the string format or Python object syntax with the `options` argument.\n\n\nOptional `service_log_path` will be deprecated in the next release. Please use the browser specific `service` attribute instead. The `service_log_path` argument defines the name of the file where to write the browser driver logs. If the `service_log_path`  argument contains a marker `{index}`, it will be automatically replaced with unique running index preventing files to be overwritten. Indices start's from 1, and how they are represented can be customized using Python's [format string syntax](https://docs.python.org/3/library/string.html\\#format-string-syntax).\n\n\nOptional `executable_path`  will be deprecated in the next release. Please use the `executable_path` and, if needed, `port` attribute on the `service` argument instead. The `executable_path` argument defines the path to the driver executable, example to a chromedriver or a geckodriver. If not defined it is assumed the executable is in the [$PATH](https://en.wikipedia.org/wiki/PATH_(variable)).\n\n\nOptional `service` argument allows for managing the local drivers as well as setting some browser specific settings like logging. Service classes are not supported when `remote_url` argument is used. See the `Browser and Driver options` section for more details on how to use the `service` argument.\n\n\nIf the provided configuration options are not enough, it is possible to use `Create Webdriver` to customize browser initialization even more.\n\n\nThe `service` argument is new in SeleniumLibrary 6.4.\n\n", "tags": [], "source": null, "shortdoc": "Opens a new browser instance to the optional `url`.", "lineno": 135}, {"name": "Open Chrome Browser", "args": [{"name": "url", "kind": "POSITIONAL_OR_NAMED", "repr": "url: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "use_profile", "kind": "POSITIONAL_OR_NAMED", "repr": "use_profile: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "headless", "kind": "POSITIONAL_OR_NAMED", "repr": "headless: bool | str = AUTO", "required": true, "defaultValue": "AUTO", "types": ["Union"], "typedocs": []}, {"name": "maximized", "kind": "POSITIONAL_OR_NAMED", "repr": "maximized: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}, {"name": "alias", "kind": "POSITIONAL_OR_NAMED", "repr": "alias: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "profile_name", "kind": "POSITIONAL_OR_NAMED", "repr": "profile_name: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "profile_path", "kind": "POSITIONAL_OR_NAMED", "repr": "profile_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "preferences", "kind": "POSITIONAL_OR_NAMED", "repr": "preferences: dict | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "proxy", "kind": "POSITIONAL_OR_NAMED", "repr": "proxy: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "user_agent", "kind": "POSITIONAL_OR_NAMED", "repr": "user_agent: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "sandbox", "kind": "POSITIONAL_OR_NAMED", "repr": "sandbox: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Opens a Chrome browser.\n\n\nSee `Open Available Browser` for a full descriptions of the arguments.\n\n", "tags": [], "source": null, "shortdoc": "Opens a Chrome browser.", "lineno": 1057}, {"name": "Open Context Menu", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Opens the context menu on the element identified by `locator`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Opens the context menu on the element identified by `locator`.", "lineno": 875}, {"name": "Open Headless Chrome Browser", "args": [{"name": "url", "kind": "POSITIONAL_OR_NAMED", "repr": "url: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Opens the Chrome browser in headless mode.\n\n\n`url` URL to open\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${idx} = | Open Headless Chrome Browser | [https://www.google.com](https://www.google.com) |\n\n", "tags": [], "source": null, "shortdoc": "Opens the Chrome browser in headless mode.", "lineno": 1120}, {"name": "Open User Browser", "args": [{"name": "url", "kind": "POSITIONAL_OR_NAMED", "repr": "url: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "tab", "kind": "POSITIONAL_OR_NAMED", "repr": "tab=True", "required": true, "defaultValue": "True", "types": [], "typedocs": []}], "doc": "Opens an URL with te user's default browser.\n\n\nThe browser opened with this keyword is not accessible with Selenium. To interact with the opened browser it is possible to use `RPA.Desktop` or `RPA.Windows` library keywords.\n\n\nThe keyword `Attach Chrome Browser` can be used to access an already open browser with Selenium keywords.\n\n\nRead more: [https://robocorp.com/portal/tutorial/how-to-attach-to-running-chrome-browser](https://robocorp.com/portal/tutorial/how-to-attach-to-running-chrome-browser)\n\n\n`url` URL to open `tab` defines is url is opened in a tab (defaults to `True`) or in new window (if set to `False`)\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Open User Browser | [https://www.google.com?q=rpa](https://www.google.com?q=rpa) |  |\n| Open User Browser | [https://www.google.com?q=rpa](https://www.google.com?q=rpa) | tab=${False} |\n\n", "tags": [], "source": null, "shortdoc": "Opens an URL with te user's default browser.", "lineno": 1950}, {"name": "Page Should Contain", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies that current page contains `text`.\n\n\nIf this keyword fails, it automatically logs the page source using the log level specified with the optional `loglevel` argument. Valid log levels are `TRACE` (default), `DEBUG`, `INFO`, `WARN`, and `NONE`. If the log level is `NONE` or below the current active log level the source will not be logged.\n\n\n!! WARNING !! If you have an iframe selected, `Page Should Contain` will reset the frame reference back to the main frame. This is due to the fact that is searches for the `text` in all frames. To locate an element in an iframe after calling `Page Should Contian` one needs to (re)select the frame.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that current page contains `text`.", "lineno": 127}, {"name": "Page Should Contain Button", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies button `locator` is found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, buttons are searched using `id`, `name`, and `value`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies button `locator` is found from current page.", "lineno": 430}, {"name": "Page Should Contain Checkbox", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies checkbox `locator` is found from the current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies checkbox `locator` is found from the current page.", "lineno": 70}, {"name": "Page Should Contain Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str | List[WebElement | str]", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}, {"name": "limit", "kind": "POSITIONAL_OR_NAMED", "repr": "limit: int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Verifies that element `locator` is found on the current page.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nThe `limit` argument can used to define how many elements the page should contain. When `limit` is `None` (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.\n\n\nSee `Page Should Contain` for an explanation about the `loglevel` argument.\n\n\nExamples assumes that locator matches to two elements.\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Page Should Contain Element` | div_name | limit=1 | \\# Keyword fails. |\n| `Page Should Contain Element` | div_name | limit=2 | \\# Keyword passes. |\n| `Page Should Contain Element` | div_name | limit=none | \\# None is considered one or more. |\n| `Page Should Contain Element` | div_name |  | \\# Same as above. |\n\n\nThe `limit` argument is new in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element `locator` is found on the current page.", "lineno": 150}, {"name": "Page Should Contain Image", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies image identified by `locator` is found from current page.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies image identified by `locator` is found from current page.", "lineno": 1096}, {"name": "Page Should Contain Link", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies link identified by `locator` is found from current page.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies link identified by `locator` is found from current page.", "lineno": 1048}, {"name": "Page Should Contain List", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies selection list `locator` is found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Verifies selection list `locator` is found from current page.", "lineno": 159}, {"name": "Page Should Contain Radio Button", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies radio button `locator` is found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using `id`, `name` and `value`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies radio button `locator` is found from current page.", "lineno": 132}, {"name": "Page Should Contain Textfield", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies text field `locator` is found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies text field `locator` is found from current page.", "lineno": 300}, {"name": "Page Should Not Contain", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies the current page does not contain `text`.\n\n\nSee `Page Should Contain` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies the current page does not contain `text`.", "lineno": 198}, {"name": "Page Should Not Contain Button", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies button `locator` is not found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, buttons are searched using `id`, `name`, and `value`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies button `locator` is not found from current page.", "lineno": 451}, {"name": "Page Should Not Contain Checkbox", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies checkbox `locator` is not found from the current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies checkbox `locator` is not found from the current page.", "lineno": 87}, {"name": "Page Should Not Contain Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies that element `locator` is not found on the current page.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nSee `Page Should Contain` for an explanation about `message` and `loglevel` arguments.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element `locator` is not found on the current page.", "lineno": 210}, {"name": "Page Should Not Contain Image", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies image identified by `locator` is not found from current page.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies image identified by `locator` is not found from current page.", "lineno": 1114}, {"name": "Page Should Not Contain Link", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies link identified by `locator` is not found from current page.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies link identified by `locator` is not found from current page.", "lineno": 1066}, {"name": "Page Should Not Contain List", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies selection list `locator` is not found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Verifies selection list `locator` is not found from current page.", "lineno": 176}, {"name": "Page Should Not Contain Radio Button", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies radio button `locator` is not found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using `id`, `name` and `value`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies radio button `locator` is not found from current page.", "lineno": 150}, {"name": "Page Should Not Contain Textfield", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies text field `locator` is not found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies text field `locator` is not found from current page.", "lineno": 317}, {"name": "Press Key", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "key", "kind": "POSITIONAL_OR_NAMED", "repr": "key: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Simulates user pressing key on element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\n`key` is either a single character, a string, or a numerical ASCII code of the key lead by '\\'.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Press Key` | text_field | q |  |\n| `Press Key` | text_field | abcde |  |\n| `Press Key` | login_button | \\13 | \\# ASCII code for enter key |\n\n\n`Press Key` and `Press Keys` differ in the methods to simulate key presses. `Press Key` uses the WebDriver `SEND_KEYS_TO_ELEMENT` command using the selenium send_keys method. Although one is not recommended over the other if `Press Key` does not work we recommend trying `Press Keys`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates user pressing key on element identified by `locator`.", "lineno": 907}, {"name": "Press Keys", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "@keys: str", "kind": "VAR_POSITIONAL", "repr": "*keys: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Simulates the user pressing key(s) to an element or on the active browser.\n\n\nIf `locator` evaluates as false, see `Boolean arguments` for more details, then the `keys` are sent to the currently active browser. Otherwise element is searched and `keys` are send to the element identified by the `locator`. In later case, keyword fails if element is not found. See the `Locating elements` section for details about the locator syntax.\n\n\n`keys` arguments can contain one or many strings, but it can not be empty. `keys` can also be a combination of [Selenium Keys](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html) and strings or a single Selenium Key. If Selenium Key is combined with strings, Selenium key and strings must be separated by the `+` character, like in `CONTROL+c`. Selenium Keys are space and case sensitive and Selenium Keys are not parsed inside of the string. Example AALTO, would send string `AALTO` and `ALT` not parsed inside of the string. But `A+ALT+O` would found Selenium ALT key from the `keys` argument. It also possible to press many Selenium Keys down at the same time, example 'ALT+ARROW_DOWN`.\n\n\nIf Selenium Keys are detected in the `keys` argument, keyword will press the Selenium Key down, send the strings and then release the Selenium Key. If keyword needs to send a Selenium Key as a string, then each character must be separated with `+` character, example `E+N+D`.\n\n\n`CTRL` is alias for [Selenium CONTROL](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html\\#selenium.webdriver.common.keys.Keys.CONTROL) and ESC is alias for [Selenium ESCAPE](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html\\#selenium.webdriver.common.keys.Keys.ESCAPE)\n\n\nNew in SeleniumLibrary 3.3\n\n\nExamples:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Press Keys` | text_field | AAAAA |  | \\# Sends string \"AAAAA\" to element. |\n| `Press Keys` | None | BBBBB |  | \\# Sends string \"BBBBB\" to currently active browser. |\n| `Press Keys` | text_field | E+N+D |  | \\# Sends string \"END\" to element. |\n| `Press Keys` | text_field | XXX | YY | \\# Sends strings \"XXX\" and \"YY\" to element. |\n| `Press Keys` | text_field | XXX+YY |  | \\# Same as above. |\n| `Press Keys` | text_field | ALT+ARROW_DOWN |  | \\# Pressing \"ALT\" key down, then pressing ARROW_DOWN and then releasing both keys. |\n| `Press Keys` | text_field | ALT | ARROW_DOWN | \\# Pressing \"ALT\" key and then pressing ARROW_DOWN. |\n| `Press Keys` | text_field | CTRL+c |  | \\# Pressing CTRL key down, sends string \"c\" and then releases CTRL key. |\n| `Press Keys` | button | RETURN |  | \\# Pressing \"ENTER\" key to element. |\n\n\n`Press Key` and `Press Keys` differ in the methods to simulate key presses. `Press Keys` uses the Selenium/WebDriver Actions. `Press Keys` also has a more extensive syntax for describing keys, key combinations, and key actions. Although one is not recommended over the other if `Press Keys` does not work we recommend trying `Press Key`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates the user pressing key(s) to an element or on the active browser.", "lineno": 933}, {"name": "Print Page As Pdf", "args": [{"name": "filename", "kind": "POSITIONAL_OR_NAMED", "repr": "filename: str = selenium-page-{index}.pdf", "required": true, "defaultValue": "selenium-page-{index}.pdf", "types": ["str"], "typedocs": []}, {"name": "background", "kind": "POSITIONAL_OR_NAMED", "repr": "background: bool | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "margin_bottom", "kind": "POSITIONAL_OR_NAMED", "repr": "margin_bottom: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "margin_left", "kind": "POSITIONAL_OR_NAMED", "repr": "margin_left: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "margin_right", "kind": "POSITIONAL_OR_NAMED", "repr": "margin_right: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "margin_top", "kind": "POSITIONAL_OR_NAMED", "repr": "margin_top: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "orientation", "kind": "POSITIONAL_OR_NAMED", "repr": "orientation: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "page_height", "kind": "POSITIONAL_OR_NAMED", "repr": "page_height: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "page_ranges", "kind": "POSITIONAL_OR_NAMED", "repr": "page_ranges: list | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "page_width", "kind": "POSITIONAL_OR_NAMED", "repr": "page_width: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "scale", "kind": "POSITIONAL_OR_NAMED", "repr": "scale: float | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "shrink_to_fit", "kind": "POSITIONAL_OR_NAMED", "repr": "shrink_to_fit: bool | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Print the current page as a PDF\n\n\n`page_ranges` defaults to `['-']` or \"all\" pages. `page_ranges` takes a list of strings indicating the ranges.\n\n\nThe page size defaults to 21.59 for `page_width` and 27.94 for `page_height`. This is the equivalent size of US-Letter. The assumed units on these parameters is centimeters.\n\n\nThe default margin for top, left, bottom, right is `1`. The assumed units on these parameters is centimeters.\n\n\nThe default `orientation` is `portrait`. `orientation` can be either `portrait` or `landscape`.\n\n\nThe default `scale` is `1`. `scale` must be greater than or equal to `0.1` and less than or equal to `2`.\n\n\n`background` and `scale_to_fit` can be either `${True}` or `${False}`..\n\n\nIf all print options are None then a pdf will fail to print silently.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py", "shortdoc": "Print the current page as a PDF", "lineno": 243}, {"name": "Print To Pdf", "args": [{"name": "output_path", "kind": "POSITIONAL_OR_NAMED", "repr": "output_path: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "params", "kind": "POSITIONAL_OR_NAMED", "repr": "params: dict | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Print the current page to a PDF document using Chrome's DevTools.\n\n\nAttention: With some older browsers, this may work in **headless** mode only! For a list of supported parameters see: [https://chromedevtools.github.io/devtools-protocol/tot/Page/\\#method-printToPDF](https://chromedevtools.github.io/devtools-protocol/tot/Page/\\#method-printToPDF) Returns the output PDF file path.\n\n\nParameter `output_path` specifies the file path for the generated PDF document. By default, it is saved to the output folder with the default name of `out.pdf`. Parameter `params` specify parameters for the browser printing method. By default, it uses the following values: ``` { \"landscape\": False, \"displayHeaderFooter\": False, \"printBackground\": True, \"preferCSSPageSize\": True, } ```\n\n", "tags": [], "source": null, "shortdoc": "Print the current page to a PDF document using Chrome's DevTools.", "lineno": 2124}, {"name": "Radio Button Should Be Set To", "args": [{"name": "group_name", "kind": "POSITIONAL_OR_NAMED", "repr": "group_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Verifies radio button group `group_name` is set to `value`.\n\n\n`group_name` is the `name` of the radio button group.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies radio button group `group_name` is set to `value`.", "lineno": 168}, {"name": "Radio Button Should Not Be Selected", "args": [{"name": "group_name", "kind": "POSITIONAL_OR_NAMED", "repr": "group_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Verifies radio button group `group_name` has no selection.\n\n\n`group_name` is the `name` of the radio button group.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies radio button group `group_name` has no selection.", "lineno": 183}, {"name": "Register Keyword To Run On Failure", "args": [{"name": "keyword", "kind": "POSITIONAL_OR_NAMED", "repr": "keyword: str | None", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Sets the keyword to execute, when a SeleniumLibrary keyword fails.\n\n\n`keyword` is the name of a keyword that will be executed if a SeleniumLibrary keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries, but the keyword must not take any arguments.\n\n\nThe initial keyword to use is set when `importing` the library, and the keyword that is used by default is `Capture Page Screenshot`. Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.\n\n\nIt is possible to use string `NOTHING` or `NONE`, case-insensitively, as well as Python `None` to disable this feature altogether.\n\n\nThis keyword returns the name of the previously registered failure keyword or Python `None` if this functionality was previously disabled. The return value can be always used to restore the original value later.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Register Keyword To Run On Failure` | Log Source |  |\n| ${previous kw}= | `Register Keyword To Run On Failure` | NONE |\n| `Register Keyword To Run On Failure` | ${previous kw} |  |\n\n\nChanges in SeleniumLibrary 3.0:\n\n\n- Possible to use string `NONE` or Python `None` to disable the functionality.\n- Return Python `None` when the functionality was disabled earlier. In previous versions special value `No Keyword` was returned and it could not be used to restore the original state.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\runonfailure.py", "shortdoc": "Sets the keyword to execute, when a SeleniumLibrary keyword fails.", "lineno": 23}, {"name": "Reload Page", "args": [], "doc": "Simulates user reloading page.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Simulates user reloading page.", "lineno": 524}, {"name": "Remove Location Strategy", "args": [{"name": "strategy_name", "kind": "POSITIONAL_OR_NAMED", "repr": "strategy_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Removes a previously added custom location strategy.\n\n\nSee `Custom locators` for information on how to create and use custom strategies.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Removes a previously added custom location strategy.", "lineno": 1165}, {"name": "Screenshot", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "filename", "kind": "POSITIONAL_OR_NAMED", "repr": "filename: str | None = ", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Capture page and/or element screenshot.\n\n\n`locator` if defined, take element screenshot, if not takes page screenshot\n\n\n`filename` filename for the screenshot, by default creates file `screenshot-\\<timestamp>-(element|page).png` if set to `None` then file is not saved at all\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Screenshot | locator=//img[@alt=\"Google\"] | filename=locator.png | \\# element screenshot, defined filename |\n| Screenshot | filename=page.png |  | \\# page screenshot, defined filename |\n| Screenshot | filename=${NONE} |  | \\# page screenshot, NO file will be created |\n| Screenshot |  |  | \\# page screenshot, default filename |\n| Screenshot | locator=//img[@alt=\"Google\"] |  | \\# element screenshot, default filename |\n| Screenshot | locator=//img[@alt=\"Google\"] | filename=${CURDIR}/subdir/loc.png | \\# element screenshot, create dirs if not existing |\n\n", "tags": [], "source": null, "shortdoc": "Capture page and/or element screenshot.", "lineno": 1132}, {"name": "Scroll Element Into View", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Scrolls the element identified by `locator` into view.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nNew in SeleniumLibrary 3.2.0\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Scrolls the element identified by `locator` into view.", "lineno": 768}, {"name": "Select All From List", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Selects all options from multi-selection list `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Selects all options from multi-selection list `locator`.", "lineno": 193}, {"name": "Select Checkbox", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Selects the checkbox identified by `locator`.\n\n\nDoes nothing if checkbox is already selected.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Selects the checkbox identified by `locator`.", "lineno": 104}, {"name": "Select Frame", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Sets frame identified by `locator` as the current frame.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nWorks both with frames and iframes. Use `Unselect Frame` to cancel the frame selection and return to the main frame.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Select Frame` | top-frame | \\# Select frame with id or name 'top-frame' |\n| `Click Link` | example | \\# Click link 'example' in the selected frame |\n| `Unselect Frame` |  | \\# Back to main frame. |\n| `Select Frame` | //iframe[@name='xxx'] | \\# Select frame using xpath |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py", "shortdoc": "Sets frame identified by `locator` as the current frame.", "lineno": 25}, {"name": "Select From List By Index", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "@indexes: str", "kind": "VAR_POSITIONAL", "repr": "*indexes: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Selects options from selection list `locator` by `indexes`.\n\n\nIndexes of list options start from 0.\n\n\nIf more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Selects options from selection list `locator` by `indexes`.", "lineno": 209}, {"name": "Select From List By Label", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "@labels: str", "kind": "VAR_POSITIONAL", "repr": "*labels: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Selects options from selection list `locator` by `labels`.\n\n\nIf more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Selects options from selection list `locator` by `labels`.", "lineno": 256}, {"name": "Select From List By Value", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "@values: str", "kind": "VAR_POSITIONAL", "repr": "*values: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Selects options from selection list `locator` by `values`.\n\n\nIf more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Selects options from selection list `locator` by `values`.", "lineno": 234}, {"name": "Select Radio Button", "args": [{"name": "group_name", "kind": "POSITIONAL_OR_NAMED", "repr": "group_name: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Sets the radio button group `group_name` to `value`.\n\n\nThe radio button to be selected is located by two arguments:\n\n\n- `group_name` is the name of the radio button group.\n- `value` is the `id` or `value` attribute of the actual radio button.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Select Radio Button` | size | XL |\n| `Select Radio Button` | contact | email |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Sets the radio button group `group_name` to `value`.", "lineno": 198}, {"name": "Set Action Chain Delay", "args": [{"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: timedelta", "required": true, "defaultValue": null, "types": ["timedelta"], "typedocs": []}], "doc": "Sets the duration of delay in ActionChains() used by SeleniumLibrary.\n\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`.\n\n\nValue is always stored as milliseconds internally.\n\n\nThe previous value is returned and can be used to restore the original value later if needed.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Sets the duration of delay in ActionChains() used by SeleniumLibrary.", "lineno": 640}, {"name": "Set Browser Implicit Wait", "args": [{"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: timedelta", "required": true, "defaultValue": null, "types": ["timedelta"], "typedocs": []}], "doc": "Sets the implicit wait value used by Selenium.\n\n\nSame as `Set Selenium Implicit Wait` but only affects the current browser.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Sets the implicit wait value used by Selenium.", "lineno": 662}, {"name": "Set Default Url Scheme", "args": [{"name": "scheme", "kind": "POSITIONAL_OR_NAMED", "repr": "scheme: str | None", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Sets the default `scheme` used for URLs without a defined value, such as `http` or `https`.\n\n\nThe feature is disabled if the value is set to `None`.\n\n", "tags": [], "source": null, "shortdoc": "Sets the default `scheme` used for URLs without a defined value, such as `http` or `https`.", "lineno": 119}, {"name": "Set Download Directory", "args": [{"name": "directory", "kind": "POSITIONAL_OR_NAMED", "repr": "directory: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "download_pdf", "kind": "POSITIONAL_OR_NAMED", "repr": "download_pdf: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}], "doc": "Set a custom browser download directory.\n\n\nThis has to be called before opening the browser and it works with the following keywords:\n\n\n- `Open Available Browser`\n- `Open Chrome Browser`\n- `Open Headless Chrome Browser`\n\n\nSupported browsers: Chrome, Edge, Firefox.\n\n\nIf the downloading doesn't work (file is not found on disk), try using the browser in non-headless (headful) mode when opening it. (`headless=${False}`)\n\n\nParameter `directory` sets a path for downloads, defaults to `None`, which means that this setting is removed and the default location will be used. Parameter `download_pdf` will download a PDF file instead of previewing it within browser's internal viewer when this is set to `True`. (enabled by default)\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Set Download Directory` | ${OUTPUT_DIR} |  |\n| Open Available Browser | [https://cdn.robocorp.com/legal/Robocorp-EULA-v1.0.pdf](https://cdn.robocorp.com/legal/Robocorp-EULA-v1.0.pdf) |  |\n| @{files} = | List Files In Directory | ${OUTPUT_DIR} |\n| Log List | ${files} |  |\n\n", "tags": [], "source": null, "shortdoc": "Set a custom browser download directory.", "lineno": 1986}, {"name": "Set Element Attribute", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "attribute", "kind": "POSITIONAL_OR_NAMED", "repr": "attribute: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Sets a `value` for the `attribute` in the element `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Set Element Attribute | css:h1 | class | active |\n\n", "tags": [], "source": null, "shortdoc": "Sets a `value` for the `attribute` in the element `locator`.", "lineno": 2212}, {"name": "Set Focus To Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Sets the focus to the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nPrior to SeleniumLibrary 3.0 this keyword was named `Focus`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Sets the focus to the element identified by `locator`.", "lineno": 756}, {"name": "Set Screenshot Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: None | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Sets the directory for captured screenshots.\n\n\n`path` argument specifies the absolute path to a directory where the screenshots should be written to. If the directory does not exist, it will be created. The directory can also be set when `importing` the library. If it is not configured anywhere, screenshots are saved to the same directory where Robot Framework's log file is written.\n\n\nIf `path` equals to EMBED (case insensitive) and `Capture Page Screenshot` or `capture Element Screenshot` keywords filename argument is not changed from the default value, then the page or element screenshot is embedded as Base64 image to the log.html.\n\n\nThe previous value is returned and can be used to restore the original value later if needed.\n\n\nReturning the previous value is new in SeleniumLibrary 3.0. The persist argument was removed in SeleniumLibrary 3.2 and EMBED is new in SeleniumLibrary 4.2.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py", "shortdoc": "Sets the directory for captured screenshots.", "lineno": 35}, {"name": "Set Selenium Implicit Wait", "args": [{"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: timedelta", "required": true, "defaultValue": null, "types": ["timedelta"], "typedocs": []}], "doc": "Sets the implicit wait value used by Selenium.\n\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\n\nThis keyword sets the implicit wait for all opened browsers. Use `Set Browser Implicit Wait` to set it only to the current browser.\n\n\nSee the `Implicit wait` section above for more information.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${orig wait} = | `Set Selenium Implicit Wait` | 10 seconds |\n| `Perform AJAX call that is slow` |  |  |\n| `Set Selenium Implicit Wait` | ${orig wait} |  |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Sets the implicit wait value used by Selenium.", "lineno": 614}, {"name": "Set Selenium Page Load Timeout", "args": [{"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: timedelta", "required": true, "defaultValue": null, "types": ["timedelta"], "typedocs": []}], "doc": "Sets the page load timeout value used by Selenium.\n\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\n\nIn contrast to `Set Selenium Timeout` and `Set Selenium Implicit Wait`, this keywords sets the time for the Webdriver to wait until the page is loaded before raising a timeout exception.\n\n\nSee the `Page load` section above for more information.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${orig page load timeout} = | `Set Selenium Page Load Timeout` | 30 seconds |\n| `Open page that loads slowly` |  |  |\n| `Set Selenium Page Load Timeout` | ${orig page load timeout} |  |\n\n\nNew in SeleniumLibrary 6.1\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Sets the page load timeout value used by Selenium.", "lineno": 671}, {"name": "Set Selenium Speed", "args": [{"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: timedelta", "required": true, "defaultValue": null, "types": ["timedelta"], "typedocs": []}], "doc": "Sets the delay that is waited after each Selenium command.\n\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\n\nSee the `Selenium Speed` section above for more information.\n\n\nExample:\n\n\n|  |  |\n| :--- | :--- |\n| `Set Selenium Speed` | 0.5 seconds |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Sets the delay that is waited after each Selenium command.", "lineno": 572}, {"name": "Set Selenium Timeout", "args": [{"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: timedelta", "required": true, "defaultValue": null, "types": ["timedelta"], "typedocs": []}], "doc": "Sets the timeout that is used by various keywords.\n\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\n\nSee the `Timeout` section above for more information.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${orig timeout} = | `Set Selenium Timeout` | 15 seconds |\n| `Open page that loads slowly` |  |  |\n| `Set Selenium Timeout` | ${orig timeout} |  |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Sets the timeout that is used by various keywords.", "lineno": 592}, {"name": "Set Window Position", "args": [{"name": "x", "kind": "POSITIONAL_OR_NAMED", "repr": "x: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "y", "kind": "POSITIONAL_OR_NAMED", "repr": "y: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}], "doc": "Sets window position using `x` and `y` coordinates.\n\n\nThe position is relative to the top left corner of the screen, but some browsers exclude possible task bar set by the operating system from the calculation. The actual position may thus be different with different browsers.\n\n\nValues can be given using strings containing numbers or by using actual numbers. See also `Get Window Position`.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Set Window Position` | 100 | 200 |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Sets window position using `x` and `y` coordinates.", "lineno": 274}, {"name": "Set Window Size", "args": [{"name": "width", "kind": "POSITIONAL_OR_NAMED", "repr": "width: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "height", "kind": "POSITIONAL_OR_NAMED", "repr": "height: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "inner", "kind": "POSITIONAL_OR_NAMED", "repr": "inner: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Sets current windows size to given `width` and `height`.\n\n\nValues can be given using strings containing numbers or by using actual numbers. See also `Get Window Size`.\n\n\nBrowsers have a limit on their minimum size. Trying to set them smaller will cause the actual size to be bigger than the requested size.\n\n\nIf `inner` parameter is set to True, keyword sets the necessary window width and height to have the desired HTML DOM *window.innerWidth* and *window.innerHeight*. See `Boolean arguments` for more details on how to set boolean arguments.\n\n\nThe `inner` argument is new since SeleniumLibrary 4.0.\n\n\nThis `inner` argument does not support Frames. If a frame is selected, switch to default before running this.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Set Window Size` | 800 | 600 |  |\n| `Set Window Size` | 800 | 600 | True |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Sets current windows size to given `width` and `height`.", "lineno": 217}, {"name": "Simulate Event", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "event", "kind": "POSITIONAL_OR_NAMED", "repr": "event: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Simulates `event` on the element identified by `locator`.\n\n\nThis keyword is useful if element has `OnEvent` handler that needs to be explicitly invoked.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nPrior to SeleniumLibrary 3.0 this keyword was named `Simulate`.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates `event` on the element identified by `locator`.", "lineno": 882}, {"name": "Submit Form", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Submits a form identified by `locator`.\n\n\nIf `locator` is not given, first form on the page is submitted.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Submits a form identified by `locator`.", "lineno": 29}, {"name": "Switch Browser", "args": [{"name": "index_or_alias", "kind": "POSITIONAL_OR_NAMED", "repr": "index_or_alias: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}], "doc": "Switches between active browsers using `index_or_alias`.\n\n\nIndices are returned by the `Open Browser` keyword and aliases can be given to it explicitly. Indices start from 1.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Open Browser` | [http://google.com](http://google.com) | ff |  |\n| `Location Should Be` | [http://google.com](http://google.com) |  |  |\n| `Open Browser` | [http://yahoo.com](http://yahoo.com) | ie | alias=second |\n| `Location Should Be` | [http://yahoo.com](http://yahoo.com) |  |  |\n| `Switch Browser` | 1 | \\# index |  |\n| `Page Should Contain` | I'm feeling lucky |  |  |\n| `Switch Browser` | second | \\# alias |  |\n| `Page Should Contain` | More Yahoo! |  |  |\n| `Close All Browsers` |  |  |  |\n\n\nAbove example expects that there was no other open browsers when opening the first one because it used index `1` when switching to it later. If you are not sure about that, you can store the index into a variable as below.\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${index} = | `Open Browser` | [http://google.com](http://google.com) |\n| \\# Do something ... |  |  |\n| `Switch Browser` | ${index} |  |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Switches between active browsers using `index_or_alias`.", "lineno": 334}, {"name": "Switch Window", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: list | str = MAIN", "required": true, "defaultValue": "MAIN", "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = CURRENT", "required": true, "defaultValue": "CURRENT", "types": ["str"], "typedocs": []}], "doc": "Switches to browser window matching `locator`.\n\n\nIf the window is found, all subsequent commands use the selected window, until this keyword is used again. If the window is not found, this keyword fails. The previous windows handle is returned and can be used to switch back to it later.\n\n\nNotice that alerts should be handled with `Handle Alert` or other alert related keywords.\n\n\nThe `locator` can be specified using different strategies somewhat similarly as when `locating elements` on pages.\n\n\n- By default, the `locator` is matched against window handle, name, title, and URL. Matching is done in that order and the first matching window is selected.\n\n\n- The `locator` can specify an explicit strategy by using the format `strategy:value` (recommended) or `strategy=value`. Supported strategies are `name`, `title`, and `url`. These matches windows using their name, title, or URL, respectively. Additionally, `default` can be used to explicitly use the default strategy explained above.\n\n\n- If the `locator` is `NEW` (case-insensitive), the latest opened window is selected. It is an error if this is the same as the current window.\n\n\n- If the `locator` is `MAIN` (default, case-insensitive), the main window is selected.\n\n\n- If the `locator` is `CURRENT` (case-insensitive), nothing is done. This effectively just returns the current window handle.\n\n\n- If the `locator` is not a string, it is expected to be a list of window handles *to exclude*. Such a list of excluded windows can be got from `Get Window Handles` before doing an action that opens a new window.\n\n\nThe `timeout` is used to specify how long keyword will poll to select the new window. The `timeout` is new in SeleniumLibrary 3.2.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Click Link` | popup1 |  | \\# Open new window |\n| `Switch Window` | example |  | \\# Select window using default strategy |\n| `Title Should Be` | Pop-up 1 |  |  |\n| `Click Button` | popup2 |  | \\# Open another window |\n| ${handle} = | `Switch Window` | NEW | \\# Select latest opened window |\n| `Title Should Be` | Pop-up 2 |  |  |\n| `Switch Window` | ${handle} |  | \\# Select window using handle |\n| `Title Should Be` | Pop-up 1 |  |  |\n| `Switch Window` | MAIN |  | \\# Select the main window |\n| `Title Should Be` | Main |  |  |\n| ${excludes} = | `Get Window Handles` |  | \\# Get list of current windows |\n| `Click Link` | popup3 |  | \\# Open one more window |\n| `Switch Window` | ${excludes} |  | \\# Select window using excludes |\n| `Title Should Be` | Pop-up 3 |  |  |\n\n\nThe `browser` argument allows with `index_or_alias` to implicitly switch to a specific browser when switching to a window. See `Switch Browser`\n\n\n- If the `browser` is `CURRENT` (case-insensitive), no other browser is selected.\n\n\n**NOTE:**\n\n\n- The `strategy:value` syntax is only supported by SeleniumLibrary 3.0 and newer.\n- Prior to SeleniumLibrary 3.0 matching windows by name, title and URL was case-insensitive.\n- Earlier versions supported aliases `None`, `null` and the empty string for selecting the main window, and alias `self` for selecting the current window. Support for these aliases was removed in SeleniumLibrary 3.2.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Switches to browser window matching `locator`.", "lineno": 33}, {"name": "Table Cell Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies table cell contains text `expected`.\n\n\nSee `Get Table Cell` that this keyword uses internally for an explanation about accepted arguments.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Verifies table cell contains text `expected`.", "lineno": 90}, {"name": "Table Column Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies table column contains text `expected`.\n\n\nThe table is located using the `locator` argument and its column found using `column`. See the `Locating elements` section for details about the locator syntax.\n\n\nColumn indexes start from 1. It is possible to refer to columns from the end by using negative indexes so that -1 is the last column, -2 is the second last, and so on.\n\n\nIf a table contains cells that span multiple columns, those merged cells count as a single column.\n\n\nSee `Page Should Contain Element` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Verifies table column contains text `expected`.", "lineno": 113}, {"name": "Table Footer Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies table footer contains text `expected`.\n\n\nAny `\\<td>` element inside `\\<tfoot>` element is considered to be part of the footer.\n\n\nThe table is located using the `locator` argument. See the `Locating elements` section for details about the locator syntax.\n\n\nSee `Page Should Contain Element` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Verifies table footer contains text `expected`.", "lineno": 144}, {"name": "Table Header Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies table header contains text `expected`.\n\n\nAny `\\<th>` element anywhere in the table is considered to be part of the header.\n\n\nThe table is located using the `locator` argument. See the `Locating elements` section for details about the locator syntax.\n\n\nSee `Page Should Contain Element` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Verifies table header contains text `expected`.", "lineno": 169}, {"name": "Table Row Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": ["int"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies that table row contains text `expected`.\n\n\nThe table is located using the `locator` argument and its column found using `column`. See the `Locating elements` section for details about the locator syntax.\n\n\nRow indexes start from 1. It is possible to refer to rows from the end by using negative indexes so that -1 is the last row, -2 is the second last, and so on.\n\n\nIf a table contains cells that span multiple rows, a match only occurs for the uppermost row of those merged cells.\n\n\nSee `Page Should Contain Element` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Verifies that table row contains text `expected`.", "lineno": 194}, {"name": "Table Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": ["str"], "typedocs": []}], "doc": "Verifies table contains text `expected`.\n\n\nThe table is located using the `locator` argument. See the `Locating elements` section for details about the locator syntax.\n\n\nSee `Page Should Contain Element` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Verifies table contains text `expected`.", "lineno": 225}, {"name": "Textarea Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Verifies text area `locator` contains text `expected`.\n\n\n`message` can be used to override default error message.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies text area `locator` contains text `expected`.", "lineno": 382}, {"name": "Textarea Value Should Be", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Verifies text area `locator` has exactly text `expected`.\n\n\n`message` can be used to override default error message.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies text area `locator` has exactly text `expected`.", "lineno": 406}, {"name": "Textfield Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Verifies text field `locator` contains text `expected`.\n\n\n`message` can be used to override the default error message.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies text field `locator` contains text `expected`.", "lineno": 334}, {"name": "Textfield Value Should Be", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Verifies text field `locator` has exactly text `expected`.\n\n\n`message` can be used to override default error message.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies text field `locator` has exactly text `expected`.", "lineno": 358}, {"name": "Title Should Be", "args": [{"name": "title", "kind": "POSITIONAL_OR_NAMED", "repr": "title: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Verifies that the current page title equals `title`.\n\n\nThe `message` argument can be used to override the default error message.\n\n\n`message` argument is new in SeleniumLibrary 3.1.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Verifies that the current page title equals `title`.", "lineno": 497}, {"name": "Unselect All From List", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Unselects all options from multi-selection list `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Unselects all options from multi-selection list `locator`.", "lineno": 278}, {"name": "Unselect Checkbox", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}], "doc": "Removes the selection of checkbox identified by `locator`.\n\n\nDoes nothing if the checkbox is not selected.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Removes the selection of checkbox identified by `locator`.", "lineno": 118}, {"name": "Unselect Frame", "args": [], "doc": "Sets the main frame as the current frame.\n\n\nIn practice cancels the previous `Select Frame` call.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py", "shortdoc": "Sets the main frame as the current frame.", "lineno": 45}, {"name": "Unselect From List By Index", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "@indexes: str", "kind": "VAR_POSITIONAL", "repr": "*indexes: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Unselects options from selection list `locator` by `indexes`.\n\n\nIndexes of list options start from 0. This keyword works only with multi-selection lists.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Unselects options from selection list `locator` by `indexes`.", "lineno": 295}, {"name": "Unselect From List By Label", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "@labels: str", "kind": "VAR_POSITIONAL", "repr": "*labels: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Unselects options from selection list `locator` by `labels`.\n\n\nThis keyword works only with multi-selection lists.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Unselects options from selection list `locator` by `labels`.", "lineno": 347}, {"name": "Unselect From List By Value", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "@values: str", "kind": "VAR_POSITIONAL", "repr": "*values: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Unselects options from selection list `locator` by `values`.\n\n\nThis keyword works only with multi-selection lists.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Unselects options from selection list `locator` by `values`.", "lineno": 322}, {"name": "Wait And Click Button", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | ShadowRoot | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "modifier", "kind": "POSITIONAL_OR_NAMED", "repr": "modifier: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Click button identified by `locator`, once it becomes visible.\n\n\n`locator` element locator\n\n\n`modifier` press given keys while clicking the element, e.g. CTRL\n\n\nExample:\n\n\n|  |  |\n| :--- | :--- |\n| Click Button When Visible | //button[@class=\"mybutton\"] |\n\n", "tags": [], "source": null, "shortdoc": "Click button identified by `locator`, once it becomes visible.", "lineno": 1211}, {"name": "Wait For Condition", "args": [{"name": "condition", "kind": "POSITIONAL_OR_NAMED", "repr": "condition: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until `condition` is true or `timeout` expires.\n\n\nThe condition can be arbitrary JavaScript expression but it must return a value to be evaluated. See `Execute JavaScript` for information about accessing content on pages.\n\n\nFails if the timeout expires before the condition becomes true. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\n`error` can be used to override the default error message.\n\n\nExamples:\n\n\n|  |  |\n| :--- | :--- |\n| `Wait For Condition` | return document.title == \"New Title\" |\n| `Wait For Condition` | return jQuery.active == 0 |\n| `Wait For Condition` | style = document.querySelector('h1').style; return style.background == \"red\" && style.color == \"white\" |\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until `condition` is true or `timeout` expires.", "lineno": 31}, {"name": "Wait For Expected Condition", "args": [{"name": "condition", "kind": "POSITIONAL_OR_NAMED", "repr": "condition: <module 'string' from 'C:\\\\Users\\\\Gustavo Zanotto\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\string.py'>", "required": true, "defaultValue": null, "types": ["<module 'string' from 'C:\\\\Users\\\\Gustavo Zanotto\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\string.py'>"], "typedocs": []}, {"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "timeout", "kind": "NAMED_ONLY", "repr": "timeout: float | None = 10", "required": true, "defaultValue": "10", "types": ["Union"], "typedocs": []}], "doc": "Waits until `condition` is true or `timeout` expires.\n\n\nThe condition must be one of selenium's expected condition which can be found within the selenium [Python API](https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html\\#module-selenium.webdriver.support.expected_conditions) documentation. The expected condition can written as snake_case (ex title_is) or it can be space delimited (ex Title Is). Some conditions require additional arguments or `args` which should be passed along after the expected condition.\n\n\nFails if the timeout expires before the condition becomes true. The default value is 10 seconds.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Wait For Expected Condition` | alert_is_present |  |\n| `Wait For Expected Condition` | Title Is | New Title |\n\n\nIf the expected condition expects a locator then one can pass as arguments a tuple containing the selenium locator strategies and the locator.\n\n\nExample of expected condition expecting locator:\n\n\n```text\n${byElem}= |  Evaluate  (\"id\",\"added_btn\")\n`Wait For Expected Condition` | Presence Of Element Located | ${byElem}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\expectedconditions.py", "shortdoc": "Waits until `condition` is true or `timeout` expires.", "lineno": 24}, {"name": "Wait Until Element Contains", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until the element `locator` contains `text`.\n\n\nFails if `timeout` expires before the text appears. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` contains `text`.", "lineno": 373}, {"name": "Wait Until Element Does Not Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until the element `locator` does not contain `text`.\n\n\nFails if `timeout` expires before the text disappears. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` does not contain `text`.", "lineno": 397}, {"name": "Wait Until Element Is Enabled", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until the element `locator` is enabled.\n\n\nElement is considered enabled if it is not disabled nor read-only.\n\n\nFails if `timeout` expires before the element is enabled. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n\nConsidering read-only elements to be disabled is a new feature in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` is enabled.", "lineno": 345}, {"name": "Wait Until Element Is Not Visible", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until the element `locator` is not visible.\n\n\nFails if `timeout` expires before the element is not visible. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` is not visible.", "lineno": 322}, {"name": "Wait Until Element Is Visible", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until the element `locator` is visible.\n\n\nFails if `timeout` expires before the element is visible. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` is visible.", "lineno": 299}, {"name": "Wait Until Location Contains", "args": [{"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until the current URL contains `expected`.\n\n\nThe `expected` argument contains the expected value in url.\n\n\nFails if `timeout` expires before the location contains. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nNew in SeleniumLibrary 4.0\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the current URL contains `expected`.", "lineno": 123}, {"name": "Wait Until Location Does Not Contain", "args": [{"name": "location", "kind": "POSITIONAL_OR_NAMED", "repr": "location: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until the current URL does not contains `location`.\n\n\nThe `location` argument contains value not expected in url.\n\n\nFails if `timeout` expires before the location not contains. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nNew in SeleniumLibrary 4.3\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the current URL does not contains `location`.", "lineno": 151}, {"name": "Wait Until Location Is", "args": [{"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until the current URL is `expected`.\n\n\nThe `expected` argument is the expected value in url.\n\n\nFails if `timeout` expires before the location is. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nNew in SeleniumLibrary 4.0\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the current URL is `expected`.", "lineno": 66}, {"name": "Wait Until Location Is Not", "args": [{"name": "location", "kind": "POSITIONAL_OR_NAMED", "repr": "location: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until the current URL is not `location`.\n\n\nThe `location` argument is the unexpected value in url.\n\n\nFails if `timeout` expires before the location is not. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nNew in SeleniumLibrary 4.3\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the current URL is not `location`.", "lineno": 95}, {"name": "Wait Until Page Contains", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until `text` appears on the current page.\n\n\nFails if `timeout` expires before the text appears. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\n`error` can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until `text` appears on the current page.", "lineno": 179}, {"name": "Wait Until Page Contains Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "limit", "kind": "POSITIONAL_OR_NAMED", "repr": "limit: int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until the element `locator` appears on the current page.\n\n\nFails if `timeout` expires before the element appears. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n\nThe `limit` argument can used to define how many elements the page should contain. When `limit` is `None` (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.\n\n\n`limit` is new in SeleniumLibrary 4.4\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` appears on the current page.", "lineno": 223}, {"name": "Wait Until Page Does Not Contain", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": ["str"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until `text` disappears from the current page.\n\n\nFails if `timeout` expires before the text disappears. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\n`error` can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until `text` disappears from the current page.", "lineno": 201}, {"name": "Wait Until Page Does Not Contain Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "limit", "kind": "POSITIONAL_OR_NAMED", "repr": "limit: int | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}], "doc": "Waits until the element `locator` disappears from the current page.\n\n\nFails if `timeout` expires before the element disappears. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n\nThe `limit` argument can used to define how many elements the page should not contain. When `limit` is `None` (default) page can`t contain any elements. When limit is a number, page must not contain same number of elements.\n\n\n`limit` is new in SeleniumLibrary 4.4\n\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` disappears from the current page.", "lineno": 261}], "dataTypes": {}, "typedocs": []}
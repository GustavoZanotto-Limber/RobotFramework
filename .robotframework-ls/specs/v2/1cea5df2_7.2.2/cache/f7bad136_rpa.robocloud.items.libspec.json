mtime:1744200440.26264
{"name": "RPA.Robocloud.Items", "doc": "A library for interacting with Control Room work items.\n\nWork items are used for managing data that go through multiple\nsteps and tasks inside a process. Each step of a process receives\ninput work items from the previous step, and creates output work items for\nthe next step.\n\n**Item structure**\n\nA work item's data payload is JSON and allows storing anything that is\nserializable. This library by default interacts with payloads that\nare a dictionary of key-value pairs, which it treats as individual\nvariables. These variables can be exposed to the Robot Framework task\nto be used directly.\n\nIn addition to the data section, a work item can also contain files,\nwhich are stored by default in Robocorp Control Room. Adding and using\nfiles with work items requires no additional setup from the user.\n\n**Loading inputs**\n\nThe library automatically loads the first input work item, if the\nlibrary input argument `autoload` is truthy (default).\n\nAfter an input has been loaded its payload and files can be accessed\nthrough corresponding keywords, and optionally these values can be modified.\n\n**E-mail triggering**\n\nSince a process can be started in Control Room by sending an e-mail, a body\nin Text/JSON/YAML/HTML format can be sent as well and this gets attached to the\ninput work item with the `rawEmail` payload variable. This library automatically\nparses the content of it and saves into `parsedEmail` the dictionary\ntransformation of the original e-mail.\n\nIf \"Parse email\" Control Room configuration option is enabled (recommended), then\nyour e-mail is automatically parsed in the work item under the `email` payload\nvariable, which is a dictionary containing a `body` holding the final parsed form\nof the interpreted e-mail body. The payload variable `parsedEmail` is still\navailable for backwards compatibility reasons and holds the very same body inside\nthe `parsedEmail[Body]`.\n\nE-mail attachments will be added into the work item as files. Read more on:\n[https://robocorp.com/docs-robot-framework/control-room/unattended/email-trigger](https://robocorp.com/docs-robot-framework/control-room/unattended/email-trigger)\n\nExample:\n\nAfter starting the process by sending an e-mail with a body like:\n\n```json\n{\n    \"message\": \"Hello world!\"\n}\n```\n\nThe robot can use the parsed e-mail body's dictionary:\n\n```robotframework\n*** Tasks ***\nUsing Parsed Emails\n    ${mail} =    Get Work Item Variable    email\n    Set Work Item Variables    &{mail}[body]\n    ${message} =     Get Work Item Variable     message\n    Log    ${message}    # will print \"Hello world!\"\n```\n\nThe behaviour can be disabled by loading the library with\n`auto_parse_email=${None}` or altered by providing to it a dictionary with one\n\"key: value\" where the key is usually \"email.text\" (deprecated \"rawEmail\", the\nvariable set by Control Room, which acts as source for the parsed (deprecated raw)\ne-mail data) and the value can be \"email.body\" (deprecated \"parsedEmail\", where the\nparsed e-mail data gets stored into), value which can be customized and retrieved\nwith `Get Work Item Variable`.\n\n**Creating outputs**\n\nIt's possible to create multiple new work items as an output from a\ntask. With the keyword `Create Output Work Item` a new empty item\nis created as a child for the currently loaded input.\n\nAll created output items are sent into the input queue of the next\nstep in the process.\n\n**Active work item**\n\nKeywords that read or write from a work item always operate on the currently\nactive work item. Usually that is the input item that has been automatically\nloaded when the execution started, but the currently active item is changed\nwhenever the keywords `Create Output Work Item` or `Get Input Work Item`\nare called. It's also possible to change the active item manually with the\nkeyword `Set current work item`.\n\n**Saving changes**\n\nWhile a work item is loaded automatically when a suite starts, changes are\nnot automatically reflected back to the source. The work item will be modified\nlocally and then saved when the keyword `Save Work Item` is called.\nThis also applies to created output work items.\n\nIt is recommended to defer saves until all changes have been made to prevent\nleaving work items in a half-modified state in case of failures.\n\n**Local Development**\n\nWhile Control Room is the default implementation, it can also be replaced\nwith a custom adapter. The selection is based on either the `default_adapter`\nargument for the library, or the `RPA_WORKITEMS_ADAPTER` environment\nvariable. The library has a built-in alternative adapter called FileAdapter for\nstoring work items to disk.\n\nThe FileAdapter uses a local JSON file for input work items.\nIt's a list of work items, each of which has a data payload and files.\n\nAn example of a local file with one work item:\n\n```json\n[\n    {\n        \"payload\": {\n            \"variable1\": \"a-string-value\",\n            \"variable2\": [\"a\", \"list\", \"value\"]\n        },\n        \"files\": {\n            \"file1\": \"path/to/file.ext\"\n        }\n    }\n]\n```\n\nOutput work items (if any) are saved to an adjacent file\nwith the same name, but with the extension `.output.json`. You can specify\nthrough the \"RPA_OUTPUT_WORKITEM_PATH\" env var a different path and name for this\nfile.\n\n**Simulating the Cloud with Robocorp Code VSCode Extension**\n\nIf you are developing in VSCode with the [Robocorp Code extension](https://robocorp.com/docs-robot-framework/developer-tools/visual-studio-code/extension-features), you can\nutilize the built in local development features described in the\n[Developing with work items locally](https://robocorp.com/docs-robot-framework/development-guide/control-room/work-items#developing-with-work-items-locally) section of the\n[Using work items](https://robocorp.com/docs-robot-framework/development-guide/control-room/work-items) development guide.\n\n**Examples**\n\n**Robot Framework**\n\nIn the following example a task creates an output work item,\nand attaches some variables to it.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Robocorp.WorkItems\n\n*** Tasks ***\nSave variables to Control Room\n    Create Output Work Item\n    Set work item variables    user=Dude    mail=address@company.com\n    Save Work Item\n```\n\nIn the next step of the process inside a different robot, we can use\npreviously saved work item variables. Also note how the input work item is\nloaded implicitly when the suite starts.\n\n```robotframework\n*** Settings ***\nLibrary    RPA.Robocorp.WorkItems\n\n*** Tasks ***\nUse variables from Control Room\n    Set task variables from work item\n    Log    Variables are now available: s${user}, ${mail}\n```\n\n**Python**\n\nThe library can also be used through Python, but it does not implicitly\nload the first work item.\n\n```python\nimport logging\nfrom RPA.Robocorp.WorkItems import WorkItems\n\ndef list_variables(item_id):\n    library = WorkItems()\n    library.get_input_work_item()\n\n    variables = library.get_work_item_variables()\n    for variable, value in variables.items():\n        logging.info(\"%s = %s\", variable, value)\n```\n", "version": null, "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocloud\\Items.py", "lineno": 13, "tags": [], "inits": [{"name": "__init__", "args": [{"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "&kwargs", "kind": "VAR_NAMED", "repr": "**kwargs", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Initialize self.  See help(type(self)) for accurate signature.\n", "tags": [], "source": null, "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.", "lineno": 16}], "keywords": [{"name": "Add Work Item File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Add given file to work item.\n\nparam path\n\n:   Path to file on disk\n\nparam name\n\n:   Destination name for file. If not given, current name\n    of local file is used.\n\n**NOTE**: Files are not uploaded before work item is saved\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Add work item file    output.xls\n    Save Work Item\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Add given file to work item.", "lineno": 1593}, {"name": "Add Work Item Files", "args": [{"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Add all files that match given pattern to work item.\n\nparam pattern\n\n:   Path wildcard pattern\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Add work item files    %{ROBOT_ROOT}/generated/*.csv\n    Save Work Item\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Add all files that match given pattern to work item.", "lineno": 1667}, {"name": "Clear Work Item", "args": [], "doc": "Remove all data and files in the current work item.\n\nExample:\n\n```robotframework\n*** Tasks ***\nClearing a work item\n    Clear work item\n    Save work item\n```\n\n```python\nfrom RPA.Robocorp.WorkItems import WorkItems\n\nwi = WorkItems()\nwi.get_input_work_item()\nwi.clear_work_item()\nwi.save_work_item()\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Remove all data and files in the current work item.", "lineno": 1304}, {"name": "Create Output Work Item", "args": [{"name": "variables", "kind": "POSITIONAL_OR_NAMED", "repr": "variables: dict | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "files", "kind": "POSITIONAL_OR_NAMED", "repr": "files: str | List[str] | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "save", "kind": "POSITIONAL_OR_NAMED", "repr": "save: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Create a new output work item with optional variables and files.\n\nAn output work item is always created as a child for an input item, therefore\na non-released input is required to be loaded first.\nAll changes to the work item are done locally and are sent to the output queue\nafter the keyword `Save Work Item` is called only, except when save is\nTrue.\n\nparam variables\n\n:   Optional dictionary with variables to be set into the new\n    output work item.\n\nparam files\n\n:   Optional list or comma separated paths to files to be included\n    into the new output work item.\n\nparam save\n\n:   Automatically call `Save Work Item` over the newly created\n    output work item.\n\nreturns\n\n:   The newly created output work item object.\n\n**Examples**\n\n**Robot Framework**\n\n```robotframework\n*** Tasks ***\nCreate output items with variables then save\n    ${customers} =  Load customer data\n    FOR     ${customer}    IN    @{customers}\n        Create Output Work Item\n        Set Work Item Variables    id=${customer.id}\n        ...     name=${customer.name}\n        Save Work Item\n    END\n\nCreate and save output items with variables and files in one go\n    ${customers} =  Load customer data\n    FOR     ${customer}    IN    @{customers}\n        &{customer_vars} =    Create Dictionary    id=${customer.id}\n        ...     name=${customer.name}\n        Create Output Work Item     variables=${customer_vars}\n        ...     files=devdata${/}report.csv   save=${True}\n    END\n```\n\n**Python**\n\n```python\nfrom RPA.Robocorp.WorkItems import WorkItems\n\nwi = WorkItems()\nwi.get_input_work_item()\ncustomers = wi.get_work_item_variable(\"customers\")\nfor customer in customers:\n    wi.create_output_work_item(customer, save=True)\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Create a new output work item with optional variables and files.", "lineno": 1206}, {"name": "Delete Work Item Variables", "args": [{"name": "@names", "kind": "VAR_POSITIONAL", "repr": "*names", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "force", "kind": "NAMED_ONLY", "repr": "force=True", "required": true, "defaultValue": "True", "types": [], "typedocs": []}], "doc": "Delete variable(s) from the current work item.\n\nparam names\n\n:   Names of variables to remove\n\nparam force\n\n:   Ignore variables that don't exist in work item\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Delete work item variables    username    email\n    Save Work Item\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Delete variable(s) from the current work item.", "lineno": 1511}, {"name": "For Each Input Work Item", "args": [{"name": "keyword_or_func", "kind": "POSITIONAL_OR_NAMED", "repr": "keyword_or_func: str | Callable", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "items_limit", "kind": "NAMED_ONLY", "repr": "items_limit: int = 0", "required": true, "defaultValue": "0", "types": ["int"], "typedocs": []}, {"name": "return_results", "kind": "NAMED_ONLY", "repr": "return_results: bool = True", "required": true, "defaultValue": "True", "types": ["bool"], "typedocs": []}, {"name": "&kwargs", "kind": "VAR_NAMED", "repr": "**kwargs", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Run a keyword or function for each work item in the input queue.\n\nAutomatically collects and returns a list of results, switch\n`return_results` to `False` for avoiding this.\n\nparam keyword_or_func\n\n:   The RF keyword or Py function you want to map through\n    all the work items\n\nparam args\n\n:   Variable list of arguments that go into the called keyword/function\n\nparam kwargs\n\n:   Variable list of keyword arguments that go into the called\n    keyword/function\n\nparam items_limit\n\n:   Limit the queue item retrieval to a certain amount,\n    otherwise all the items are retrieved from the queue until depletion\n\nparam return_results\n\n:   Collect and return a list of results given each\n    keyword/function call if truthy\n\nExample:\n\n```robotframework\n*** Tasks ***\nLog Payloads\n    @{lengths} =     For Each Input Work Item    Log Payload\n    Log   Payload lengths: @{lengths}\n\n*** Keywords ***\nLog Payload\n    ${payload} =     Get Work Item Payload\n    Log To Console    ${payload}\n    ${len} =     Get Length    ${payload}\n    [Return]    ${len}\n```\n\nOR\n\n```python\nimport logging\nfrom RPA.Robocorp.WorkItems import WorkItems\n\nlibrary = WorkItems()\n\ndef log_payload():\n    payload = library.get_work_item_payload()\n    print(payload)\n    return len(payload)\n\ndef log_payloads():\n    library.get_input_work_item()\n    lengths = library.for_each_input_work_item(log_payload)\n    logging.info(\"Payload lengths: %s\", lengths)\n\nlog_payloads()\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Run a keyword or function for each work item in the input queue.", "lineno": 1735}, {"name": "Get Current Work Item", "args": [], "doc": "Get the currently active work item.\n\nThe current work item is used as the target by other keywords\nin this library.\n\nKeywords `Get Input Work Item` and `Create Output Work Item`\nset the active work item automatically, and return the created\ninstance.\n\nWith this keyword the active work item can be retrieved manually.\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${input} =    Get Current Work Item\n    ${output} =   Create Output Work Item\n    Set Current Work Item    ${input}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Get the currently active work item.", "lineno": 1949}, {"name": "Get Input Work Item", "args": [{"name": "_internal_call", "kind": "POSITIONAL_OR_NAMED", "repr": "_internal_call: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Load the next work item from the input queue, and set it as the active work\nitem.\n\nEach time this is called, the previous input work item is released (as DONE)\nprior to reserving the next one.\nIf the library import argument `autoload` is truthy (default),\nthis is called automatically when the Robot Framework suite\nstarts.\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Load the next work item from the input queue, and set it as the active work item.", "lineno": 1176}, {"name": "Get Work Item File", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Get attached file from work item to disk.\nReturns the absolute path to the created file.\n\nparam name\n\n:   Name of attached file\n\nparam path\n\n:   Destination path of file. If not given, current\n    working directory is used.\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${path}=    Get work item file    input.xls\n    Open workbook    ${path}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Get attached file from work item to disk. Returns the absolute path to the created file.", "lineno": 1571}, {"name": "Get Work Item Files", "args": [{"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "dirname", "kind": "POSITIONAL_OR_NAMED", "repr": "dirname=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Get files attached to work item that match given pattern.\nReturns a list of absolute paths to the downloaded files.\n\nparam pattern\n\n:   Filename wildcard pattern\n\nparam dirname\n\n:   Destination directory, if not given robot root is used\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${paths}=    Get work item files    customer_*.xlsx\n    FOR  ${path}  IN  @{paths}\n        Handle customer file    ${path}\n    END\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Get files attached to work item that match given pattern. Returns a list of absolute paths to the downloaded files.", "lineno": 1636}, {"name": "Get Work Item Payload", "args": [], "doc": "Get the full JSON payload for a work item.\n\n**NOTE**: Most use cases should prefer higher-level keywords.\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${payload}=    Get work item payload\n    Log    Entire payload as dictionary: ${payload}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Get the full JSON payload for a work item.", "lineno": 1329}, {"name": "Get Work Item Variable", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "default", "kind": "POSITIONAL_OR_NAMED", "repr": "default=<object object at 0x000001CF876FCFA0>", "required": true, "defaultValue": "<object object at 0x000001CF876FCFA0>", "types": [], "typedocs": []}], "doc": "Return a single variable value from the work item,\nor default value if defined and key does not exist.\n\nIf key does not exist and default is not defined, raises KeyError.\n\nparam name\n\n:   Name of variable\n\nparam default\n\n:   Default value if key does not exist\n\nRobot Framework Example:\n\n```robotframework\n*** Tasks ***\nUsing a work item\n    ${username}=    Get work item variable    username    default=guest\n```\n\nPython Example:\n\n```python\nfrom RPA.Robocorp.WorkItems import WorkItems\n\nwi = WorkItems()\nwi.get_input_work_item()\ncustomers = wi.get_work_item_variable(\"customers\")\nprint(customers)\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Return a single variable value from the work item, or default value if defined and key does not exist.", "lineno": 1387}, {"name": "Get Work Item Variables", "args": [], "doc": "Read all variables from the current work item and\nreturn their names and values as a dictionary.\n\nRobot Framework Example:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${variables}=    Get work item variables\n    Log    Username: ${variables}[username], Email: ${variables}[email]\n```\n\nPython Example:\n\n> from RPA.Robocorp.WorkItems import WorkItems\n> wi = WorkItems()\n> wi.get_input_work_item()\n> input_wi = wi.get_work_item_variables()\n> print(input_wi[\"username\"])\n> print(input_wi[\"email\"])\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Read all variables from the current work item and return their names and values as a dictionary.", "lineno": 1425}, {"name": "List Work Item Files", "args": [], "doc": "List the names of files attached to the current work item.\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${names}=    List work item files\n    Log    Work item has files with names: ${names}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "List the names of files attached to the current work item.", "lineno": 1556}, {"name": "List Work Item Variables", "args": [], "doc": "List the variable names for the current work item.\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${variables}=    List work item variables\n    Log    Available variables in work item: ${variables}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "List the variable names for the current work item.", "lineno": 1371}, {"name": "Release Input Work Item", "args": [{"name": "state", "kind": "POSITIONAL_OR_NAMED", "repr": "state: State | str", "required": true, "defaultValue": null, "types": ["Union"], "typedocs": []}, {"name": "exception_type", "kind": "POSITIONAL_OR_NAMED", "repr": "exception_type: Error | str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "code", "kind": "POSITIONAL_OR_NAMED", "repr": "code: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["Union"], "typedocs": []}, {"name": "_internal_release", "kind": "POSITIONAL_OR_NAMED", "repr": "_internal_release: bool = False", "required": true, "defaultValue": "False", "types": ["bool"], "typedocs": []}], "doc": "Release the lastly retrieved input work item and set its state.\n\nThis can be released with DONE or FAILED states. With the FAILED state, an\nadditional exception can be sent to Control Room describing the problem that\nyou encountered by specifying a type and optionally a code and/or message.\nAfter this has been called, no more output work items can be created\nunless a new input work item has been loaded again.\n\nparam state\n\n:   The status on the last processed input work item\n\nparam exception_type\n\n:   Error type (BUSINESS, APPLICATION). If this is not\n    specified, then the cloud will assume UNSPECIFIED\n\nparam code\n\n:   Optional error code identifying the exception for future\n    filtering, grouping and custom retrying behaviour in the cloud\n\nparam message\n\n:   Optional human-friendly error message supplying additional\n    details regarding the sent exception\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Login into portal\n        ${user} =     Get Work Item Variable    user\n        ${doc} =    Get Work Item Variable    doc\n        TRY\n            Login Keyword    ${user}\n            Upload Doc Keyword    ${doc}\n\n        EXCEPT    Login Failed\n            Release Input Work Item     FAILED\n            ...    exception_type=APPLICATION\n            ...    code=LOGIN_PORTAL_DOWN\n            ...    message=Unable to login, retry again later.\n\n        EXCEPT    Format Error    AS    ${err}\n            ${message} =    Catenate\n            ...    Document format is not correct and cannot be uploaded.\n            ...    Correct the format in this work item and try again.\n            ...    Full error message received: ${err}\n            Release Input Work Item     FAILED\n            ...    exception_type=BUSINESS\n            ...    code=DOC_FORMAT_ERROR\n            ...    message=${message}\n\n        END\n```\n\nOR\n\n```python\nfrom RPA.Robocorp.WorkItems import State, WorkItems\n\nlibrary = WorkItems()\n\ndef process_and_set_state():\n    library.get_input_work_item()\n    library.release_input_work_item(State.DONE)\n    print(library.current.state)  # would print \"State.DONE\"\n\nprocess_and_set_state()\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Release the lastly retrieved input work item and set its state.", "lineno": 1829}, {"name": "Remove Work Item File", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "missing_ok", "kind": "POSITIONAL_OR_NAMED", "repr": "missing_ok=True", "required": true, "defaultValue": "True", "types": [], "typedocs": []}], "doc": "Remove attached file from work item.\n\nparam name\n\n:   Name of attached file\n\nparam missing_ok\n\n:   Do not raise exception if file doesn't exist\n\n**NOTE**: Files are not deleted before work item is saved\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Remove work item file    input.xls\n    Save Work Item\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Remove attached file from work item.", "lineno": 1615}, {"name": "Remove Work Item Files", "args": [{"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "missing_ok", "kind": "POSITIONAL_OR_NAMED", "repr": "missing_ok=True", "required": true, "defaultValue": "True", "types": [], "typedocs": []}], "doc": "Removes files attached to work item that match the given pattern.\n\nparam pattern\n\n:   Filename wildcard pattern\n\nparam missing_ok\n\n:   Do not raise exception if file doesn't exist\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Remove work item files    *.xlsx\n    Save Work Item\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Removes files attached to work item that match the given pattern.", "lineno": 1692}, {"name": "Save Work Item", "args": [], "doc": "Save the current data and files in the work item. If not saved,\nall changes are discarded when the library goes out of scope.\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Save the current data and files in the work item. If not saved, all changes are discarded when the library goes out of scope.", "lineno": 1297}, {"name": "Set Current Work Item", "args": [{"name": "item", "kind": "POSITIONAL_OR_NAMED", "repr": "item: WorkItem", "required": true, "defaultValue": null, "types": ["WorkItem"], "typedocs": []}], "doc": "Set the currently active work item.\n\nThe current work item is used as the target by other keywords\nin this library.\n\nKeywords `Get Input Work Item` and `Create Output Work Item`\nset the active work item automatically, and return the created\ninstance.\n\nWith this keyword the active work item can be set manually.\n\nRobot Framework Example:\n\n```robotframework\n*** Tasks ***\nCreating outputs\n    ${input}=    Get Input Work Item\n    ${output}=   Create Output Work Item\n    Set current work item    ${input}\n```\n\nPython Example:\n\n```python\nfrom RPA.Robocorp.WorkItems import WorkItems\n\nwi = WorkItems()\nparent_wi = wi.get_input_work_item()\nchild_wi = wi.create_output_work_item()\nwi.set_current_work_item(parent_wi)\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Set the currently active work item.", "lineno": 1139}, {"name": "Set Task Variables From Work Item", "args": [], "doc": "Convert all variables in the current work item to\nRobot Framework task variables, see [variable scopes](https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#variable-scopes).\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    # Work item has variable INPUT_URL\n    Set task variables from work item\n    Log    The variable is now available: ${INPUT_URL}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Convert all variables in the current work item to Robot Framework task variables, see [variable scopes](https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#variable-scopes).", "lineno": 1535}, {"name": "Set Work Item Payload", "args": [{"name": "payload", "kind": "POSITIONAL_OR_NAMED", "repr": "payload", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Set the full JSON payload for a work item.\n\nparam payload\n\n:   Content of payload, must be JSON-serializable\n\n**NOTE**: Most use cases should prefer higher-level keywords.\nUsing this keyword may cause errors when getting the payload via\nthe normal `Get work item variable` and\n`Get work item variables` keywords if you do not set the payload\nto a `dict`.\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    ${output}=    Create dictionary    url=example.com    username=Mark\n    Set work item payload    ${output}\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Set the full JSON payload for a work item.", "lineno": 1346}, {"name": "Set Work Item Variable", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Set a single variable value in the current work item.\n\nparam name\n\n:   Name of variable\n\nparam value\n\n:   Value of variable\n\nRobot Framework Example:\n\n```robotframework\n*** Tasks ***\nExample task\n    Set work item variable    username    MarkyMark\n    Save Work Item\n```\n\nPython Example:\n\n```python\nfrom RPA.Robocorp.WorkItems import WorkItems\n\ncustomers = [{\"id\": 1, \"name\": \"Apple\"}, {\"id\": 2, \"name\": \"Microsoft\"}]\nwi = WorkItems()\nwi.get_input_work_item()\nwi.set_work_item_variable(\"customers\", customers)\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Set a single variable value in the current work item.", "lineno": 1460}, {"name": "Set Work Item Variables", "args": [{"name": "&kwargs", "kind": "VAR_NAMED", "repr": "**kwargs", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Set multiple variables in the current work item.\n\nparam kwargs\n\n:   Pairs of variable names and values\n\nExample:\n\n```robotframework\n*** Tasks ***\nExample task\n    Set work item variables    username=MarkyMark    email=mark@example.com\n    Save Work Item\n```\n", "tags": [], "source": "C:\\Users\\Gustavo Zanotto\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py", "shortdoc": "Set multiple variables in the current work item.", "lineno": 1491}], "dataTypes": {}, "typedocs": []}